"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[62117],{71711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"txn-use","title":"Get started","description":"Get started to use Pulsar transaction API.","source":"@site/versioned_docs/version-3.2.x/txn-use.md","sourceDirName":".","slug":"/txn-use","permalink":"/docs/3.2.x/txn-use","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.2.x/txn-use.md","tags":[],"version":"3.2.x","frontMatter":{"id":"txn-use","title":"Get started","sidebar_label":"Get started","description":"Get started to use Pulsar transaction API."},"sidebar":"docsSidebar","previous":{"title":"Concept","permalink":"/docs/3.2.x/txn-what"},"next":{"title":"Advanced features","permalink":"/docs/3.2.x/txn-advanced-features"}}');var s=t(74848),o=t(28453),a=t(89089),i=t(19365);const c={id:"txn-use",title:"Get started",sidebar_label:"Get started",description:"Get started to use Pulsar transaction API."},u=void 0,l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Related topics",id:"related-topics",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Pulsar transaction is primarily a server-side and protocol-level feature. This tutorial guides you through every step of how to use the ",(0,s.jsx)(n.a,{href:"https://pulsar.apache.org/api/admin/3.2.x/",children:"Pulsar transaction API"})," to send and receive messages in a Java client."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Currently, ",(0,s.jsx)(n.a,{href:"https://pulsar.apache.org/api/admin/3.2.x/",children:"Pulsar transaction API"})," is available in ",(0,s.jsx)(n.strong,{children:"Pulsar 2.8.0 or later"})," versions. It is only available for ",(0,s.jsx)(n.strong,{children:"Java"}),", ",(0,s.jsx)(n.strong,{children:"Go"})," and ",(0,s.jsx)(n.strong,{children:".NET"})," clients."]})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/3.2.x/getting-started-standalone",children:"Start Pulsar 2.8.0 or later versions"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(n.p,{children:"To use Pulsar transaction API, complete the following steps."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enable transactions."}),"\n",(0,s.jsxs)(n.p,{children:["You can set the following configurations in the ",(0,s.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/conf/broker.conf",children:(0,s.jsx)(n.code,{children:"broker.conf"})})," or ",(0,s.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/conf/standalone.conf",children:(0,s.jsx)(n.code,{children:"standalone.conf"})})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-conf",children:"//mandatory configuration, used to enable transaction coordinator\ntransactionCoordinatorEnabled=true\n\n//mandatory configuration, used to create systemTopic used for transaction buffer snapshot\nsystemTopicEnabled=true\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"By default"}),", Pulsar transactions are ",(0,s.jsx)(n.strong,{children:"disabled"}),"."]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Initialize transaction coordinator metadata."}),"\n",(0,s.jsx)(n.p,{children:"The transaction coordinator can leverage the advantages of partitioned topics (such as load balance)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"bin/pulsar initialize-transaction-coordinator-metadata -cs 127.0.0.1:2181 -c standalone\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"Transaction coordinator metadata setup success\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a Pulsar client and enable transactions. Since client need to know transaction coordinator from system topic, please make sure your client role has system namespace ",(0,s.jsx)(n.code,{children:"pulsar/system"})," produce/consume permissions."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create producers and consumers."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Produce and receive messages."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create transactions."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Produce and ack messages with transactions."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Currently, messages can be acked individually rather than cumulatively."})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"End transactions."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"The code snippet below is the example for step 3 - step 8."})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(a.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Go",value:"Go"}],children:[(0,s.jsx)(i.A,{value:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'PulsarClient client = PulsarClient.builder()\n                // Step 3: create a Pulsar client and enable transactions.\n                .enableTransaction(true)\n                .serviceUrl(jct.serviceUrl)\n                .build();\n\n// Step 4: create three producers to produce messages to input and output topics.\nProducerBuilder<String> producerBuilder = client.newProducer(Schema.STRING);\nProducer<String> inputProducer = producerBuilder.topic(inputTopic)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\nProducer<String> outputProducerOne = producerBuilder.topic(outputTopicOne)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\nProducer<String> outputProducerTwo = producerBuilder.topic(outputTopicTwo)\n        .sendTimeout(0, TimeUnit.SECONDS).create();\n// Step 4: create three consumers to consume messages from input and output topics.\nConsumer<String> inputConsumer = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(inputTopic).subscribe();\nConsumer<String> outputConsumerOne = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(outputTopicOne).subscribe();\nConsumer<String> outputConsumerTwo = client.newConsumer(Schema.STRING)\n        .subscriptionName("your-subscription-name").topic(outputTopicTwo).subscribe();\n\nint count = 2;\n// Step 5: produce messages to input topics.\nfor (int i = 0; i < count; i++) {\n    inputProducer.send("Hello Pulsar! count : " + i);\n}\n\n// Step 5: consume messages and produce them to output topics with transactions.\nfor (int i = 0; i < count; i++) {\n\n    // Step 5: the consumer successfully receives messages.\n    Message<String> message = inputConsumer.receive();\n\n    // Step 6: create transactions.\n    // The transaction timeout is specified as 10 seconds.\n    // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n    Transaction txn = null;\n    try {\n        txn = client.newTransaction()\n                .withTransactionTimeout(10, TimeUnit.SECONDS).build().get();\n        // Step 6: you can process the received message with your use case and business logic.\n\n        // Step 7: the producers produce messages to output topics with transactions\n        outputProducerOne.newMessage(txn).value("Hello Pulsar! outputTopicOne count : " + i).send();\n        outputProducerTwo.newMessage(txn).value("Hello Pulsar! outputTopicTwo count : " + i).send();\n\n        // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n        inputConsumer.acknowledgeAsync(message.getMessageId(), txn).get();\n        // Step 8: commit transactions.\n        txn.commit().get();\n    } catch (ExecutionException e) {\n        if (!(e.getCause() instanceof PulsarClientException.TransactionConflictException)) {\n            // If TransactionConflictException is not thrown,\n            // you need to redeliver or negativeAcknowledge this message,\n            // or else this message will not be received again.\n            inputConsumer.negativeAcknowledge(message);\n        }\n\n        // If a new transaction is created,\n        // then the old transaction should be aborted.\n        if (txn != null) {\n            txn.abort();\n        }\n    }\n}\n\n// Final result: consume messages from output topics and print them.\nfor (int i = 0; i < count; i++) {\n    Message<String> message =  outputConsumerOne.receive();\n    System.out.println("Receive transaction message: " + message.getValue());\n}\n\nfor (int i = 0; i < count; i++) {\n    Message<String> message =  outputConsumerTwo.receive();\n    System.out.println("Receive transaction message: " + message.getValue());\n}\n'})})}),(0,s.jsx)(i.A,{value:"Go",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Step 3: create a Pulsar client and enable transactions.\nclient, err := pulsar.NewClient(pulsar.ClientOptions{\n  URL:               "<serviceUrl>",\n  EnableTransaction: true,\n})\nif err != nil {\n  log.Fatalf("create client fail, err = %v", err)\n}\ndefer client.Close()\n// Step 4: create three producers to produce messages to input and output topics.\ninputTopic := "inputTopic"\noutputTopicOne := "outputTopicOne"\noutputTopicTwo := "outputTopicTwo"\nsubscriptionName := "your-subscription-name"\ninputProducer, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       inputTopic,\n  SendTimeout: 0,\n})\ndefer inputProducer.Close()\noutputProducerOne, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       outputTopicOne,\n  SendTimeout: 0,\n})\ndefer outputProducerOne.Close()\noutputProducerTwo, _ := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:       outputTopicTwo,\n  SendTimeout: 0,\n})\ndefer outputProducerTwo.Close()\n\n// Step 4: create three consumers to consume messages from input and output topics.\ninputConsumer, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            inputTopic,\n  SubscriptionName: subscriptionName,\n})\ndefer inputConsumer.Close()\noutputConsumerOne, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            outputTopicOne,\n  SubscriptionName: subscriptionName,\n})\ndefer outputConsumerOne.Close()\noutputConsumerTwo, _ := client.Subscribe(pulsar.ConsumerOptions{\n  Topic:            outputTopicTwo,\n  SubscriptionName: subscriptionName,\n})\ndefer outputConsumerTwo.Close()\n\n// Step 5: produce messages to input topics.\nctx := context.Background()\ncount := 2\nfor i := 0; i < count; i++ {\n  inputProducer.Send(ctx, &pulsar.ProducerMessage{\n    Payload: []byte(fmt.Sprintf("Hello Pulsar! count : %d", i)),\n  })\n}\n// Step 5: consume messages and produce them to output topics with transactions.\nfor i := 0; i < count; i++ {\n  // Step 5: the consumer successfully receives messages.\n  message, err := inputConsumer.Receive(ctx)\n  if err != nil {\n    log.Printf("receive message from %s fail, err = %v", inputTopic, err)\n    continue\n  }\n  // Step 6: create transactions.\n  // The transaction timeout is specified as 10 seconds.\n  // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n  txn, err := client.NewTransaction(10 * time.Second)\n  if err != nil {\n    log.Printf("create txn fail, err = %v", err)\n    continue\n  }\n  // Step 6: you can process the received message with your use case and business logic.\n  // processMessage(message)\n  // Step 7: the producers produce messages to output topics with transactions\n  _, err = outputProducerOne.Send(context.Background(), &pulsar.ProducerMessage{\n    Transaction: txn,\n    Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicOne count : %d", i)),\n  })\n  if err != nil {\n    log.Printf("send to producerOne fail %v", err)\n    txn.Abort(ctx)\n  }\n  _, err = outputProducerTwo.Send(context.Background(), &pulsar.ProducerMessage{\n    Transaction: txn,\n    Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicTwo count : %d", i)),\n  })\n  if err != nil {\n    log.Printf("send to producerTwo fail %v", err)\n    txn.Abort(ctx)\n  }\n  // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n  err = inputConsumer.AckWithTxn(message, txn)\n  if err != nil {\n    log.Printf("ack message fail %v", err)\n    txn.Abort(ctx)\n  }\n  // Step 8: commit transactions.\n  err = txn.Commit(ctx)\n  if err != nil {\n    log.Printf("commit txn fail %v", err)\n  }\n}\n\n// Final result: consume messages from output topics and print them.\nfor i := 0; i < count; i++ {\n  message, _ := outputConsumerOne.Receive(ctx)\n  log.Printf("Receive transaction message: %s", string(message.Payload()))\n}\nfor i := 0; i < count; i++ {\n  message, _ := outputConsumerTwo.Receive(ctx)\n  log.Printf("Receive transaction message: %s", string(message.Payload()))\n}\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Receive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\nReceive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-topics",children:"Related topics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To learn more features that can be used with transactions, see ",(0,s.jsx)(n.a,{href:"/docs/3.2.x/txn-advanced-features",children:"Pulsar transactions - Advanced features"}),"."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var r=t(34164);const s={tabItem:"tabItem_Ymn6"};var o=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,a),hidden:t,children:n})}},89089:(e,n,t)=>{t.d(n,{A:()=>P});var r=t(96540),s=t(34164),o=t(23104),a=t(56347),i=t(205),c=t(57485),u=t(31682),l=t(70679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const s=(0,a.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=p(e),[a,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[u,d]=h({queryString:t,groupId:s}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,o]=(0,l.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:s}),x=(()=>{const e=u??g;return m({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{x&&c(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),f(e)}),[d,f,o]),tabValues:o}}var f=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function v(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),s=i[t].value;s!==r&&(u(n),a(s))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:d,onClick:l,...o,className:(0,s.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function T(e){let{lazy:n,children:t,selectedValue:o}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function j(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(T,{...n,...e})]})}function P(e){const n=(0,f.A)();return(0,b.jsx)(j,{...e,children:d(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);