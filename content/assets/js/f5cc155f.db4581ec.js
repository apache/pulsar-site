"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[99101],{27975:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"deploy-monitoring","title":"Monitoring","description":"There are different ways to monitor a Pulsar cluster, exposing both metrics relative to the usage of topics and the overall health of the individual components of the cluster.","source":"@site/versioned_docs/version-2.3.0/deploy-monitoring.md","sourceDirName":".","slug":"/deploy-monitoring","permalink":"/docs/2.3.0/deploy-monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.3.0/deploy-monitoring.md","tags":[],"version":"2.3.0","frontMatter":{"id":"deploy-monitoring","title":"Monitoring","sidebar_label":"Monitoring","original_id":"deploy-monitoring"},"sidebar":"docsSidebar","previous":{"title":"Bare metal multi-cluster","permalink":"/docs/2.3.0/deploy-bare-metal-multi-cluster"},"next":{"title":"ZooKeeper and BookKeeper","permalink":"/docs/2.3.0/administration-zk-bk"}}');var s=t(74848),o=t(28453);const i={id:"deploy-monitoring",title:"Monitoring",sidebar_label:"Monitoring",original_id:"deploy-monitoring"},a=void 0,l={},d=[{value:"Collecting metrics",id:"collecting-metrics",level:2},{value:"Broker stats",id:"broker-stats",level:3},{value:"ZooKeeper stats",id:"zookeeper-stats",level:3},{value:"BookKeeper stats",id:"bookkeeper-stats",level:3},{value:"Configuring Prometheus",id:"configuring-prometheus",level:2},{value:"Dashboards",id:"dashboards",level:2},{value:"Pulsar per-topic dashboard",id:"pulsar-per-topic-dashboard",level:3},{value:"Grafana",id:"grafana",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"There are different ways to monitor a Pulsar cluster, exposing both metrics relative to the usage of topics and the overall health of the individual components of the cluster."}),"\n",(0,s.jsx)(n.h2,{id:"collecting-metrics",children:"Collecting metrics"}),"\n",(0,s.jsx)(n.h3,{id:"broker-stats",children:"Broker stats"}),"\n",(0,s.jsx)(n.p,{children:"Pulsar broker metrics can be collected from brokers and exported in JSON format. There are two main types of metrics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Destination dumps"}),", which containing stats for each individual topic. They can be fetched using"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\nbin/pulsar-admin broker-stats destinations\n\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Broker metrics, containing broker info and topics stats aggregated at namespace\nlevel:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\nbin/pulsar-admin broker-stats monitoring-metrics\n\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All the message rates are updated every 1min."}),"\n",(0,s.jsxs)(n.p,{children:["The aggregated broker metrics are also exposed in the ",(0,s.jsx)(n.a,{href:"https://prometheus.io",children:"Prometheus"})," format at:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\nhttp://$BROKER_ADDRESS:8080/metrics/\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"zookeeper-stats",children:"ZooKeeper stats"}),"\n",(0,s.jsx)(n.p,{children:"The local Zookeeper/configuration store server and clients that are shipped with Pulsar have been instrumented to expose\ndetailed stats through Prometheus as well."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\nhttp://$LOCAL_ZK_SERVER:8000/metrics\nhttp://$GLOBAL_ZK_SERVER:8001/metrics\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The default port of local ZooKeeper is ",(0,s.jsx)(n.code,{children:"8000"})," and that of configuration store is ",(0,s.jsx)(n.code,{children:"8001"}),".\nThese can be changed by specifying system property ",(0,s.jsx)(n.code,{children:"stats_server_port"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"bookkeeper-stats",children:"BookKeeper stats"}),"\n",(0,s.jsxs)(n.p,{children:["For BookKeeper you can configure the stats frameworks by changing the ",(0,s.jsx)(n.code,{children:"statsProviderClass"})," in\n",(0,s.jsx)(n.code,{children:"conf/bookkeeper.conf"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"By default, the default BookKeeper configuration included with Pulsar distribution will enable\nthe Prometheus exporter."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\nhttp://$BOOKIE_ADDRESS:8000/metrics\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For bookies, the default port is ",(0,s.jsx)(n.code,{children:"8000"})," (instead of ",(0,s.jsx)(n.code,{children:"8080"}),") and that can be configured by changing\nthe ",(0,s.jsx)(n.code,{children:"prometheusStatsHttpPort"})," in ",(0,s.jsx)(n.code,{children:"conf/bookkeeper.conf"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"configuring-prometheus",children:"Configuring Prometheus"}),"\n",(0,s.jsxs)(n.p,{children:["You can configure Prometheus to collect and store the metrics data by following the Prometheus ",(0,s.jsx)(n.a,{href:"https://prometheus.io/docs/introduction/getting_started/",children:"Getting started"})," guide."]}),"\n",(0,s.jsxs)(n.p,{children:["When running on bare metal, you can provide the list of nodes that needs to be probed. When deploying\nin a Kubernetes cluster, the monitoring is automatically setup with the ",(0,s.jsx)(n.a,{href:"/docs/2.3.0/deploy-kubernetes",children:"provided"}),"\ninstructions."]}),"\n",(0,s.jsx)(n.h2,{id:"dashboards",children:"Dashboards"}),"\n",(0,s.jsx)(n.p,{children:"When collecting time series statistics, the major problem is to make sure the number of dimensions\nattached to the data does not explode."}),"\n",(0,s.jsx)(n.p,{children:"For that reason we only collect time series of metrics aggregated at the namespace level."}),"\n",(0,s.jsx)(n.h3,{id:"pulsar-per-topic-dashboard",children:"Pulsar per-topic dashboard"}),"\n",(0,s.jsxs)(n.p,{children:["The per-topic dashboard instructions are available at ",(0,s.jsx)(n.a,{href:"/docs/2.3.0/administration-dashboard",children:"Dashboard"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"grafana",children:"Grafana"}),"\n",(0,s.jsx)(n.p,{children:"You can use grafana to easily create dashboard driven by the data stored in Prometheus."}),"\n",(0,s.jsxs)(n.p,{children:["There is a ",(0,s.jsx)(n.code,{children:"pulsar-grafana"})," Docker image that is ready to use with the principal dashboards already\nin place. This is enabled by default when deploying Pulsar on Kubernetes."]}),"\n",(0,s.jsx)(n.p,{children:"To use the dashboard manually:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"\ndocker run -p3000:3000 \\\n        -e PROMETHEUS_URL=http://$PROMETHEUS_HOST:9090/ \\\n        apachepulsar/pulsar-grafana:latest\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);