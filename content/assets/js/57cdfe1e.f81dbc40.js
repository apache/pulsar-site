"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[23027],{81070:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"2.2.1","label":"2.2.1","banner":null,"badge":false,"noIndex":false,"className":"docs-version-2.2.1","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"About","href":"/docs/2.2.1/","docId":"about","unlisted":false},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Pulsar 2.0","href":"/docs/2.2.1/pulsar-2.0","docId":"pulsar-2.0","unlisted":false},{"type":"link","label":"Run Pulsar locally","href":"/docs/2.2.1/getting-started-standalone","docId":"getting-started-standalone","unlisted":false},{"type":"link","label":"Pulsar in Docker","href":"/docs/2.2.1/getting-started-docker","docId":"getting-started-docker","unlisted":false},{"type":"link","label":"Overview","href":"/docs/2.2.1/client-libraries","docId":"client-libraries","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Concepts and Architecture","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/concepts-overview","docId":"concepts-overview","unlisted":false},{"type":"link","label":"Messaging","href":"/docs/2.2.1/concepts-messaging","docId":"concepts-messaging","unlisted":false},{"type":"link","label":"Architecture","href":"/docs/2.2.1/concepts-architecture-overview","docId":"concepts-architecture-overview","unlisted":false},{"type":"link","label":"Clients","href":"/docs/2.2.1/concepts-clients","docId":"concepts-clients","unlisted":false},{"type":"link","label":"Geo Replication","href":"/docs/2.2.1/concepts-replication","docId":"concepts-replication","unlisted":false},{"type":"link","label":"Multi Tenancy","href":"/docs/2.2.1/concepts-multi-tenancy","docId":"concepts-multi-tenancy","unlisted":false},{"type":"link","label":"Authentication and Authorization","href":"/docs/2.2.1/concepts-authentication","docId":"concepts-authentication","unlisted":false},{"type":"link","label":"Topic Compaction","href":"/docs/2.2.1/concepts-topic-compaction","docId":"concepts-topic-compaction","unlisted":false},{"type":"link","label":"Tiered Storage","href":"/docs/2.2.1/concepts-tiered-storage","docId":"concepts-tiered-storage","unlisted":false},{"type":"link","label":"Schema Registry","href":"/docs/2.2.1/concepts-schema-registry","docId":"concepts-schema-registry","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Pulsar Functions","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/functions-overview","docId":"functions-overview","unlisted":false},{"type":"link","label":"Getting started","href":"/docs/2.2.1/functions-quickstart","docId":"functions-quickstart","unlisted":false},{"type":"link","label":"API","href":"/docs/2.2.1/functions-api","docId":"functions-api","unlisted":false},{"type":"link","label":"Deploying functions","href":"/docs/2.2.1/functions-deploying","docId":"functions-deploying","unlisted":false},{"type":"link","label":"Processing guarantees","href":"/docs/2.2.1/functions-guarantees","docId":"functions-guarantees","unlisted":false},{"type":"link","label":"State Storage","href":"/docs/2.2.1/functions-state","docId":"functions-state","unlisted":false},{"type":"link","label":"Metrics","href":"/docs/2.2.1/functions-metrics","docId":"functions-metrics","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Pulsar IO","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/io-overview","docId":"io-overview","unlisted":false},{"type":"link","label":"Getting started","href":"/docs/2.2.1/io-quickstart","docId":"io-quickstart","unlisted":false},{"type":"link","label":"Managing Connectors","href":"/docs/2.2.1/io-managing","docId":"io-managing","unlisted":false},{"type":"link","label":"Builtin Connectors","href":"/docs/2.2.1/io-connectors","docId":"io-connectors","unlisted":false},{"type":"link","label":"Develop","href":"/docs/2.2.1/io-develop","docId":"io-develop","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Pulsar SQL","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/sql-overview","docId":"sql-overview","unlisted":false},{"type":"link","label":"Query data","href":"/docs/2.2.1/sql-getting-started","docId":"sql-getting-started","unlisted":false},{"type":"link","label":"Configuration and deployment","href":"/docs/2.2.1/sql-deployment-configurations","docId":"sql-deployment-configurations","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Deployment","items":[{"type":"link","label":"Amazon Web Services","href":"/docs/2.2.1/deploy-aws","docId":"deploy-aws","unlisted":false},{"type":"link","label":"Kubernetes","href":"/docs/2.2.1/deploy-kubernetes","docId":"deploy-kubernetes","unlisted":false},{"type":"link","label":"Bare metal","href":"/docs/2.2.1/deploy-bare-metal","docId":"deploy-bare-metal","unlisted":false},{"type":"link","label":"Bare metal multi-cluster","href":"/docs/2.2.1/deploy-bare-metal-multi-cluster","docId":"deploy-bare-metal-multi-cluster","unlisted":false},{"type":"link","label":"Monitor","href":"/docs/2.2.1/deploy-monitoring","docId":"deploy-monitoring","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Administration","items":[{"type":"link","label":"ZooKeeper and BookKeeper","href":"/docs/2.2.1/administration-zk-bk","docId":"administration-zk-bk","unlisted":false},{"type":"link","label":"Geo-replication","href":"/docs/2.2.1/administration-geo","docId":"administration-geo","unlisted":false},{"type":"link","label":"Dashboard","href":"/docs/2.2.1/administration-dashboard","docId":"administration-dashboard","unlisted":false},{"type":"link","label":"Pulsar statistics","href":"/docs/2.2.1/administration-stats","docId":"administration-stats","unlisted":false},{"type":"link","label":"Load distribution","href":"/docs/2.2.1/administration-load-distribution","docId":"administration-load-distribution","unlisted":false},{"type":"link","label":"Pulsar proxy","href":"/docs/2.2.1/administration-proxy","docId":"administration-proxy","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/security-overview","docId":"security-overview","unlisted":false},{"type":"link","label":"Transport Encryption using TLS","href":"/docs/2.2.1/security-tls-transport","docId":"security-tls-transport","unlisted":false},{"type":"link","label":"Authentication using TLS","href":"/docs/2.2.1/security-tls-authentication","docId":"security-tls-authentication","unlisted":false},{"type":"link","label":"Authentication using Athenz","href":"/docs/2.2.1/security-athenz","docId":"security-athenz","unlisted":false},{"type":"link","label":"Authorization and ACLs","href":"/docs/2.2.1/security-authorization","docId":"security-authorization","unlisted":false},{"type":"link","label":"End-to-End Encryption","href":"/docs/2.2.1/security-encryption","docId":"security-encryption","unlisted":false},{"type":"link","label":"Extend Authentication and Authorization","href":"/docs/2.2.1/security-extending","docId":"security-extending","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Client Libraries","items":[{"type":"link","label":"Java","href":"/docs/2.2.1/client-libraries-java","docId":"client-libraries-java","unlisted":false},{"type":"link","label":"Go","href":"/docs/2.2.1/client-libraries-go","docId":"client-libraries-go","unlisted":false},{"type":"link","label":"Python","href":"/docs/2.2.1/client-libraries-python","docId":"client-libraries-python","unlisted":false},{"type":"link","label":"C++","href":"/docs/2.2.1/client-libraries-cpp","docId":"client-libraries-cpp","unlisted":false},{"type":"link","label":"WebSocket","href":"/docs/2.2.1/client-libraries-websocket","docId":"client-libraries-websocket","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Admin API","items":[{"type":"link","label":"Overview","href":"/docs/2.2.1/admin-api-overview","docId":"admin-api-overview","unlisted":false},{"type":"link","label":"Clusters","href":"/docs/2.2.1/admin-api-clusters","docId":"admin-api-clusters","unlisted":false},{"type":"link","label":"Tenants","href":"/docs/2.2.1/admin-api-tenants","docId":"admin-api-tenants","unlisted":false},{"type":"link","label":"Brokers","href":"/docs/2.2.1/admin-api-brokers","docId":"admin-api-brokers","unlisted":false},{"type":"link","label":"Namespaces","href":"/docs/2.2.1/admin-api-namespaces","docId":"admin-api-namespaces","unlisted":false},{"type":"link","label":"Permissions","href":"/docs/2.2.1/admin-api-permissions","docId":"admin-api-permissions","unlisted":false},{"type":"link","label":"Persistent topics","href":"/docs/2.2.1/admin-api-persistent-topics","docId":"admin-api-persistent-topics","unlisted":false},{"type":"link","label":"Non-Persistent topics","href":"/docs/2.2.1/admin-api-non-persistent-topics","docId":"admin-api-non-persistent-topics","unlisted":false},{"type":"link","label":"Partitioned topics","href":"/docs/2.2.1/admin-api-partitioned-topics","docId":"admin-api-partitioned-topics","unlisted":false},{"type":"link","label":"Schemas","href":"/docs/2.2.1/admin-api-schemas","docId":"admin-api-schemas","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Adaptors","items":[{"type":"link","label":"Kafka client wrapper","href":"/docs/2.2.1/adaptors-kafka","docId":"adaptors-kafka","unlisted":false},{"type":"link","label":"Apache Spark","href":"/docs/2.2.1/adaptors-spark","docId":"adaptors-spark","unlisted":false},{"type":"link","label":"Apache Storm","href":"/docs/2.2.1/adaptors-storm","docId":"adaptors-storm","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Cookbooks","items":[{"type":"link","label":"Tiered Storage","href":"/docs/2.2.1/cookbooks-tiered-storage","docId":"cookbooks-tiered-storage","unlisted":false},{"type":"link","label":"Topic compaction","href":"/docs/2.2.1/cookbooks-compaction","docId":"cookbooks-compaction","unlisted":false},{"type":"link","label":"Message deduplication ","href":"/docs/2.2.1/cookbooks-deduplication","docId":"cookbooks-deduplication","unlisted":false},{"type":"link","label":"Non-persistent messaging","href":"/docs/2.2.1/cookbooks-non-persistent","docId":"cookbooks-non-persistent","unlisted":false},{"type":"link","label":"Partitioned Topics","href":"/docs/2.2.1/cookbooks-partitioned","docId":"cookbooks-partitioned","unlisted":false},{"type":"link","label":"Message retention and expiry","href":"/docs/2.2.1/cookbooks-retention-expiry","docId":"cookbooks-retention-expiry","unlisted":false},{"type":"link","label":"Encryption ","href":"/docs/2.2.1/cookbooks-encryption","docId":"cookbooks-encryption","unlisted":false},{"type":"link","label":"Message queue","href":"/docs/2.2.1/cookbooks-message-queue","docId":"cookbooks-message-queue","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Development","items":[{"type":"link","label":"Simulation tools","href":"/docs/2.2.1/develop-tools","docId":"develop-tools","unlisted":false},{"type":"link","label":"Binary protocol","href":"/docs/2.2.1/developing-binary-protocol","docId":"developing-binary-protocol","unlisted":false},{"type":"link","label":"Custom schema storage","href":"/docs/2.2.1/develop-schema","docId":"develop-schema","unlisted":false},{"type":"link","label":"Modular load manager","href":"/docs/2.2.1/develop-load-manager","docId":"develop-load-manager","unlisted":false},{"type":"link","label":"Building Pulsar C++ client","href":"/docs/2.2.1/develop-cpp","docId":"develop-cpp","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Reference","items":[{"type":"link","label":"Terminology","href":"/docs/2.2.1/reference-terminology","docId":"reference-terminology","unlisted":false},{"type":"link","label":"Pulsar CLI tools","href":"/docs/2.2.1/reference-cli-tools","docId":"reference-cli-tools","unlisted":false},{"type":"link","label":"Pulsar Admin CLI","href":"/docs/2.2.1/pulsar-admin","docId":"pulsar-admin","unlisted":false},{"type":"link","label":"Pulsar configuration","href":"/docs/2.2.1/reference-configuration","docId":"reference-configuration","unlisted":false},{"type":"link","label":"Pulsar REST APIs","href":"/docs/2.2.1/reference-rest-api-overview","docId":"reference-rest-api-overview","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"about":{"id":"about","title":"Welcome to the doc portal!","description":"*","sidebar":"docsSidebar"},"adaptors-kafka":{"id":"adaptors-kafka","title":"Pulsar adaptor for Apache Kafka","description":"Pulsar provides an easy option for applications that are currently written using the Apache Kafka Java client API.","sidebar":"docsSidebar"},"adaptors-spark":{"id":"adaptors-spark","title":"Pulsar adaptor for Apache Spark","description":"Spark Streaming receiver","sidebar":"docsSidebar"},"adaptors-storm":{"id":"adaptors-storm","title":"Pulsar adaptor for Apache Storm","description":"Pulsar Storm is an adaptor for integrating with Apache Storm topologies. It provides core Storm implementations for sending and receiving data.","sidebar":"docsSidebar"},"admin-api-brokers":{"id":"admin-api-brokers","title":"Managing Brokers","description":"Important","sidebar":"docsSidebar"},"admin-api-clusters":{"id":"admin-api-clusters","title":"Managing Clusters","description":"Important","sidebar":"docsSidebar"},"admin-api-namespaces":{"id":"admin-api-namespaces","title":"Managing Namespaces","description":"Important","sidebar":"docsSidebar"},"admin-api-non-persistent-topics":{"id":"admin-api-non-persistent-topics","title":"Managing non-persistent topics","description":"For details of the content, refer to manage topics.","sidebar":"docsSidebar"},"admin-api-overview":{"id":"admin-api-overview","title":"Pulsar admin interface","description":"The Pulsar admin interface enables you to manage all important entities in a Pulsar instance, such as tenants, topics, and namespaces.","sidebar":"docsSidebar"},"admin-api-partitioned-topics":{"id":"admin-api-partitioned-topics","title":"Managing partitioned topics","description":"For details of the content, refer to manage topics.","sidebar":"docsSidebar"},"admin-api-permissions":{"id":"admin-api-permissions","title":"Managing permissions","description":"Important","sidebar":"docsSidebar"},"admin-api-persistent-topics":{"id":"admin-api-persistent-topics","title":"Managing persistent topics","description":"Persistent helps to access topic which is a logical endpoint for publishing and consuming messages. Producers publish messages to the topic and consumers subscribe to the topic, to consume messages published to the topic.","sidebar":"docsSidebar"},"admin-api-schemas":{"id":"admin-api-schemas","title":"Managing Schemas","description":"","sidebar":"docsSidebar"},"admin-api-tenants":{"id":"admin-api-tenants","title":"Managing Tenants","description":"Important","sidebar":"docsSidebar"},"admin-api-topics":{"id":"admin-api-topics","title":"Manage topics","description":"Pulsar has persistent and non-persistent topics. Persistent topic is a logical endpoint for publishing and consuming messages. The topic name structure for persistent topics is:"},"administration-dashboard":{"id":"administration-dashboard","title":"Pulsar dashboard","description":"Pulsar dashboard is deprecated. We recommend you use Pulsar Manager to manage and monitor the stats of your topics.","sidebar":"docsSidebar"},"administration-geo":{"id":"administration-geo","title":"Pulsar geo-replication","description":"Enable geo-replication for a namespace","sidebar":"docsSidebar"},"administration-load-distribution":{"id":"administration-load-distribution","title":"Pulsar load distribution","description":"Load distribution across Pulsar brokers","sidebar":"docsSidebar"},"administration-proxy":{"id":"administration-proxy","title":"Pulsar proxy","description":"Pulsar proxy is an optional gateway. Pulsar proxy is used when direct connections between clients and Pulsar brokers are either infeasible or undesirable. For example, when you run Pulsar in a cloud environment or on Kubernetes or an analogous platform, you can run Pulsar proxy.","sidebar":"docsSidebar"},"administration-stats":{"id":"administration-stats","title":"Pulsar stats","description":"Partitioned topics","sidebar":"docsSidebar"},"administration-zk-bk":{"id":"administration-zk-bk","title":"ZooKeeper and BookKeeper administration","description":"Pulsar relies on two external systems for essential tasks:","sidebar":"docsSidebar"},"client-libraries":{"id":"client-libraries","title":"Pulsar client libraries","description":"Pulsar supports the following client libraries:","sidebar":"docsSidebar"},"client-libraries-cpp":{"id":"client-libraries-cpp","title":"Pulsar C++ client","description":"You can use Pulsar C++ client to create Pulsar producers and consumers in C++.","sidebar":"docsSidebar"},"client-libraries-dotnet":{"id":"client-libraries-dotnet","title":"Pulsar C# client","description":"You can use the Pulsar C# client (DotPulsar) to create Pulsar producers and consumers in C#. All the methods in the producer, consumer, and reader of a C# client are thread-safe. The official documentation for DotPulsar is available here."},"client-libraries-go":{"id":"client-libraries-go","title":"The Pulsar Go client","description":"The Pulsar Go client can be used to create Pulsar producers, consumers, and readers in Go (aka Golang).","sidebar":"docsSidebar"},"client-libraries-java":{"id":"client-libraries-java","title":"The Pulsar Java client","description":"The Pulsar Java client can be used both to create Java producers, consumers, and readers of messages and to perform administrative tasks. The current version of the Java client is 2.2.1.","sidebar":"docsSidebar"},"client-libraries-node":{"id":"client-libraries-node","title":"The Pulsar Node.js client","description":"The Pulsar Node.js client can be used to create Pulsar producers, consumers, and readers in Node.js."},"client-libraries-python":{"id":"client-libraries-python","title":"The Pulsar Python client","description":"The Pulsar Python client library is a wrapper over the existing C++ client library and exposes all of the same features. You can find the code in the python GitHub Repository of the C++ client code.","sidebar":"docsSidebar"},"client-libraries-websocket":{"id":"client-libraries-websocket","title":"Pulsar\'s WebSocket API","description":"Pulsar\'s WebSocket API is meant to provide a simple way to interact with Pulsar using languages that do not have an official client library. Through WebSockets you can publish and consume messages and use all the features available in the Java, Go, Python and C++ client libraries.","sidebar":"docsSidebar"},"concepts-architecture-overview":{"id":"concepts-architecture-overview","title":"Architecture Overview","description":"At the highest level, a Pulsar instance is composed of one or more Pulsar clusters. Clusters within an instance can replicate data amongst themselves.","sidebar":"docsSidebar"},"concepts-authentication":{"id":"concepts-authentication","title":"Authentication and Authorization","description":"Pulsar supports a pluggable authentication mechanism which can be configured at the proxy and/or the broker. Pulsar also supports a pluggable authorization mechanism. These mechanisms work together to identify the client and its access rights on topics, namespaces and tenants.","sidebar":"docsSidebar"},"concepts-clients":{"id":"concepts-clients","title":"Pulsar Clients","description":"Pulsar exposes a client API with language bindings for Java,  Go, Python and C++. The client API optimizes and encapsulates Pulsar\'s client-broker communication protocol and exposes a simple and intuitive API for use by applications.","sidebar":"docsSidebar"},"concepts-messaging":{"id":"concepts-messaging","title":"Messaging","description":"Pulsar is built on the publish-subscribe pattern (often abbreviated to pub-sub). In this pattern, producers publish messages to topics; consumers subscribe to those topics, process incoming messages, and send acknowledgements to the broker when processing is finished.","sidebar":"docsSidebar"},"concepts-multi-tenancy":{"id":"concepts-multi-tenancy","title":"Multi Tenancy","description":"Pulsar was created from the ground up as a multi-tenant system. To support multi-tenancy, Pulsar has a concept of tenants. Tenants can be spread across clusters and can each have their own authentication and authorization scheme applied to them. They are also the administrative unit at which storage quotas, message TTL, and isolation policies can be managed.","sidebar":"docsSidebar"},"concepts-overview":{"id":"concepts-overview","title":"Pulsar Overview","description":"Pulsar is a multi-tenant, high-performance solution for server-to-server messaging originally developed by Yahoo and now under the stewardship of the Apache Software Foundation.","sidebar":"docsSidebar"},"concepts-replication":{"id":"concepts-replication","title":"Geo Replication","description":"Regardless of industries, when an unforeseen event occurs and brings day-to-day operations to a halt, an organization needs a well-prepared disaster recovery plan to quickly restore service to clients. However, a disaster recovery plan usually requires a multi-datacenter deployment with geographically dispersed data centers. Such a multi-datacenter deployment requires a geo-replication mechanism to provide additional redundancy in case a data center fails.","sidebar":"docsSidebar"},"concepts-schema-registry":{"id":"concepts-schema-registry","title":"Schema Registry","description":"","sidebar":"docsSidebar"},"concepts-tiered-storage":{"id":"concepts-tiered-storage","title":"Tiered Storage","description":"Pulsar\'s segment oriented architecture allows for topic backlogs to grow very large, effectively without limit. However, this can become expensive over time.","sidebar":"docsSidebar"},"concepts-topic-compaction":{"id":"concepts-topic-compaction","title":"Topic Compaction","description":"Pulsar was built with highly scalable persistent storage of message data as a primary objective. Pulsar topics enable you to persistently store as many unacknowledged messages as you need while preserving message ordering. By default, Pulsar stores all unacknowledged/unprocessed messages produced on a topic. Accumulating many unacknowledged messages on a topic is necessary for many Pulsar use cases but it can also be very time intensive for Pulsar consumers to \\"rewind\\" through the entire log of messages.","sidebar":"docsSidebar"},"cookbooks-compaction":{"id":"cookbooks-compaction","title":"Topic compaction","description":"Pulsar\'s topic compaction feature enables you to create compacted topics in which older, \\"obscured\\" entries are pruned from the topic, allowing for faster reads through the topic\'s history (which messages are deemed obscured/outdated/irrelevant will depend on your use case).","sidebar":"docsSidebar"},"cookbooks-deduplication":{"id":"cookbooks-deduplication","title":"Message deduplication","description":"When Message deduplication is enabled, it ensures that each message produced on Pulsar topics is persisted to disk only once, even if the message is produced more than once. Message deduplication is handled automatically on the server side.","sidebar":"docsSidebar"},"cookbooks-encryption":{"id":"cookbooks-encryption","title":"Pulsar Encryption","description":"Pulsar encryption allows applications to encrypt messages at the producer and decrypt at the consumer. Encryption is performed using the public/private key pair configured by the application. Encrypted messages can only be decrypted by consumers with a valid key.","sidebar":"docsSidebar"},"cookbooks-message-queue":{"id":"cookbooks-message-queue","title":"Using Pulsar as a message queue","description":"Message queues are essential components of many large-scale data architectures. If every single work object that passes through your system absolutely must be processed in spite of the slowness or downright failure of this or that system component, there\'s a good chance that you\'ll need a message queue to step in and ensure that unprocessed data is retained---with correct ordering---until the required actions are taken.","sidebar":"docsSidebar"},"cookbooks-non-persistent":{"id":"cookbooks-non-persistent","title":"Non-persistent messaging","description":"Non-persistent topics are Pulsar topics in which message data is never persistently stored and kept only in memory. This cookbook provides:","sidebar":"docsSidebar"},"cookbooks-partitioned":{"id":"cookbooks-partitioned","title":"Partitioned topics","description":"For details of the content, refer to manage topics.","sidebar":"docsSidebar"},"cookbooks-retention-expiry":{"id":"cookbooks-retention-expiry","title":"Message retention and expiry","description":"Pulsar brokers are responsible for handling messages that pass through Pulsar, including persistent storage of messages. By default, for each topic, brokers only retain messages that are in at least one backlog. A backlog is the set of unacknowledged messages for a particular subscription. As a topic can have multiple subscriptions, a topic can have multiple backlogs.","sidebar":"docsSidebar"},"cookbooks-tiered-storage":{"id":"cookbooks-tiered-storage","title":"Tiered Storage","description":"Pulsar\'s Tiered Storage feature allows older backlog data to be offloaded to long term storage, thereby freeing up space in BookKeeper and reducing storage costs. This cookbook walks you through using tiered storage in your Pulsar cluster.","sidebar":"docsSidebar"},"deploy-aws":{"id":"deploy-aws","title":"Deploying a Pulsar cluster on AWS using Terraform and Ansible","description":"For instructions on deploying a single Pulsar cluster manually rather than using Terraform and Ansible, see Deploying a Pulsar cluster on bare metal. For instructions on manually deploying a multi-cluster Pulsar instance, see Deploying a Pulsar instance on bare metal.","sidebar":"docsSidebar"},"deploy-bare-metal":{"id":"deploy-bare-metal","title":"Deploying a cluster on bare metal","description":"1. Single-cluster Pulsar installations should be sufficient for all but the most ambitious use cases. If you\'re interested in experimenting with","sidebar":"docsSidebar"},"deploy-bare-metal-multi-cluster":{"id":"deploy-bare-metal-multi-cluster","title":"Deploying a multi-cluster on bare metal","description":"1. You can use single-cluster Pulsar installation in most use cases, such as experimenting with Pulsar or using Pulsar in a startup or in a single team. If you need to run a multi-cluster Pulsar instance, see the guide.","sidebar":"docsSidebar"},"deploy-kubernetes":{"id":"deploy-kubernetes","title":"Deploy Pulsar on Kubernetes","description":"To get up and running with these charts as fast as possible, in a non-production use case, we provide","sidebar":"docsSidebar"},"deploy-monitoring":{"id":"deploy-monitoring","title":"Monitor","description":"You can use different ways to monitor a Pulsar cluster, exposing both metrics related to the usage of topics and the overall health of the individual components of the cluster.","sidebar":"docsSidebar"},"develop-cpp":{"id":"develop-cpp","title":"Building Pulsar C++ client","description":"Supported platforms","sidebar":"docsSidebar"},"develop-load-manager":{"id":"develop-load-manager","title":"Modular load manager","description":"The modular load manager, implemented in  ModularLoadManagerImpl, is a flexible alternative to the previously implemented load manager, SimpleLoadManagerImpl, which attempts to simplify how load is managed while also providing abstractions so that complex load management strategies may be implemented.","sidebar":"docsSidebar"},"develop-schema":{"id":"develop-schema","title":"Custom schema storage","description":"By default, Pulsar stores data type schemas in Apache BookKeeper (which is deployed alongside Pulsar). You can, however, use another storage system if you wish. This doc walks you through creating your own schema storage implementation.","sidebar":"docsSidebar"},"develop-tools":{"id":"develop-tools","title":"Simulation tools","description":"It is sometimes necessary create an test environment and incur artificial load to observe how well load managers","sidebar":"docsSidebar"},"developing-binary-protocol":{"id":"developing-binary-protocol","title":"Pulsar binary protocol specification","description":"Pulsar uses a custom binary protocol for communications between producers/consumers and brokers. This protocol is designed to support required features, such as acknowledgements and flow control, while ensuring maximum transport and implementation efficiency.","sidebar":"docsSidebar"},"functions-api":{"id":"functions-api","title":"The Pulsar Functions API","description":"","sidebar":"docsSidebar"},"functions-deploying":{"id":"functions-deploying","title":"Deploying and managing Pulsar Functions","description":"","sidebar":"docsSidebar"},"functions-guarantees":{"id":"functions-guarantees","title":"Processing guarantees","description":"","sidebar":"docsSidebar"},"functions-metrics":{"id":"functions-metrics","title":"Metrics for Pulsar Functions","description":"","sidebar":"docsSidebar"},"functions-overview":{"id":"functions-overview","title":"Pulsar Functions overview","description":"Pulsar Functions are lightweight compute processes that","sidebar":"docsSidebar"},"functions-quickstart":{"id":"functions-quickstart","title":"Getting started with Pulsar Functions","description":"","sidebar":"docsSidebar"},"functions-state":{"id":"functions-state","title":"Pulsar Functions State Storage (Developer Preview)","description":"","sidebar":"docsSidebar"},"getting-started-docker":{"id":"getting-started-docker","title":"Start a standalone cluster with Docker","description":"For the purposes of local development and testing, you can run Pulsar in standalone","sidebar":"docsSidebar"},"getting-started-helm":{"id":"getting-started-helm","title":"Get started in Kubernetes","description":"This section guides you through every step of installing and running"},"getting-started-standalone":{"id":"getting-started-standalone","title":"Setting up a local standalone cluster","description":"For the purposes of local development and testing, you can run Pulsar in standalone mode on your own machine. Standalone mode includes a Pulsar broker as well as the necessary ZooKeeper and BookKeeper components running inside of a single Java Virtual Machine (JVM) process.","sidebar":"docsSidebar"},"helm-deploy":{"id":"helm-deploy","title":"Deploying a Pulsar cluster using Helm","description":"Before running helm install, you need to make some decisions about how you will run Pulsar."},"helm-install":{"id":"helm-install","title":"Install Apache Pulsar using Helm","description":"Install Apache Pulsar on Kubernetes with the official Pulsar Helm chart."},"helm-overview":{"id":"helm-overview","title":"Apache Pulsar Helm Chart","description":"This is the official supported Helm chart to install Apache Pulsar on a cloud-native environment. It was enhanced based on StreamNative\'s Helm Chart."},"helm-prepare":{"id":"helm-prepare","title":"Preparing Kubernetes resources","description":"For a fully functional Pulsar cluster, you will need a few resources before deploying the Apache Pulsar Helm chart. The following provides instructions to prepare the Kubernetes cluster before deploying the Pulsar Helm chart."},"helm-tools":{"id":"helm-tools","title":"Required tools for deploying Pulsar Helm Chart","description":"Before deploying Pulsar to your Kubernetes cluster, there are some tools you must have installed locally."},"helm-upgrade":{"id":"helm-upgrade","title":"Upgrade a Pulsar Helm release","description":"Before upgrading your Pulsar installation, you need to check the changelog corresponding to the specific release you want to upgrade"},"io-aerospike":{"id":"io-aerospike","title":"Aerospike Sink Connector","description":"The Aerospike Sink connector is used to write messages to an Aerospike Cluster."},"io-cassandra":{"id":"io-cassandra","title":"Cassandra Sink Connector","description":"The Cassandra Sink connector is used to write messages to a Cassandra Cluster."},"io-cdc":{"id":"io-cdc","title":"CDC Connector","description":"Source"},"io-cli":{"id":"io-cli","title":"Connector Admin CLI","description":"The pulsar-admin tool helps you manage Pulsar connectors."},"io-connectors":{"id":"io-connectors","title":"Builtin Connectors","description":"Pulsar distribution includes a set of common connectors that have been packaged and tested with the rest of Apache Pulsar.","sidebar":"docsSidebar"},"io-develop":{"id":"io-develop","title":"How to develop Pulsar connectors","description":"This guide describes how to develop Pulsar connectors to move data","sidebar":"docsSidebar"},"io-kafka":{"id":"io-kafka","title":"Kafka Connector","description":"Source"},"io-kinesis":{"id":"io-kinesis","title":"AWS Kinesis Connector","description":"Sink"},"io-managing":{"id":"io-managing","title":"Managing Connectors","description":"This section describes how to manage Pulsar IO connectors in a Pulsar cluster. You will learn how to:","sidebar":"docsSidebar"},"io-overview":{"id":"io-overview","title":"Pulsar IO Overview","description":"Messaging systems are most powerful when you can easily use them in conjunction with external systems like databases and other messaging systems. Pulsar IO is a feature of Pulsar that enables you to easily create, deploy, and manage Pulsar connectors that interact with external systems, such as Apache Cassandra, Aerospike, and many others.","sidebar":"docsSidebar"},"io-quickstart":{"id":"io-quickstart","title":"Tutorial: Connecting Pulsar with Apache Cassandra","description":"This tutorial provides a hands-on look at how you can move data out of Pulsar without writing a single line of code.","sidebar":"docsSidebar"},"io-rabbitmq":{"id":"io-rabbitmq","title":"RabbitMQ Connector","description":"Source"},"io-tcp":{"id":"io-tcp","title":"Netty Tcp Connector","description":"Source"},"io-twitter":{"id":"io-twitter","title":"Twitter Firehose Connector","description":"The Twitter Firehose connector is used for receiving tweets from Twitter Firehose and writing"},"io-use":{"id":"io-use","title":"How to use Pulsar connectors","description":"This guide describes how to use Pulsar connectors."},"pulsar-2.0":{"id":"pulsar-2.0","title":"Pulsar 2.0","description":"Pulsar 2.0 is a major new release for Pulsar that brings some bold changes to the platform, including simplified topic names, the addition of the Pulsar Functions feature, some terminology changes, and more.","sidebar":"docsSidebar"},"pulsar-admin":{"id":"pulsar-admin","title":"Pulsar admin CLI","description":"Important","sidebar":"docsSidebar"},"reference-cli-tools":{"id":"reference-cli-tools","title":"Pulsar command-line tools","description":"Pulsar offers several command-line tools that you can use for managing Pulsar installations, performance testing, using command-line producers and consumers, and more.","sidebar":"docsSidebar"},"reference-configuration":{"id":"reference-configuration","title":"Pulsar configuration","description":"Pulsar configuration can be managed either via a series of configuration files contained in the conf directory of a Pulsar installation","sidebar":"docsSidebar"},"reference-pulsar-admin":{"id":"reference-pulsar-admin","title":"Pulsar admin CLI","description":"The pulsar-admin tool enables you to manage Pulsar installations, including clusters, brokers, namespaces, tenants, and more."},"reference-rest-api-overview":{"id":"reference-rest-api-overview","title":"Pulsar REST APIs","description":"A REST API (also known as RESTful API, REpresentational State Transfer Application Programming Interface) is a set of definitions and protocols for building and integrating application software, using HTTP requests to GET, PUT, POST, and DELETE data following the REST standards. In essence, REST API is a set of remote calls using standard methods to request and return data in a specific format between two systems.","sidebar":"docsSidebar"},"reference-terminology":{"id":"reference-terminology","title":"Pulsar Terminology","description":"Here is a glossary of terms related to Apache Pulsar:","sidebar":"docsSidebar"},"schema-get-started":{"id":"schema-get-started","title":"Get started","description":"This chapter introduces Pulsar schemas and explains why they are important."},"schema-manage":{"id":"schema-manage","title":"Manage schema","description":"This guide demonstrates the ways to manage schemas:"},"schema-understand":{"id":"schema-understand","title":"Understand schema","description":"This chapter explains the basic concepts of Pulsar schema, focuses on the topics of particular importance, and provides additional background."},"security-athenz":{"id":"security-athenz","title":"Authentication using Athenz","description":"Athenz is a role-based authentication/authorization system. In Pulsar, you can use Athenz role tokens (also known as z-tokens) to establish the identify of the client.","sidebar":"docsSidebar"},"security-authorization":{"id":"security-authorization","title":"Authentication and authorization in Pulsar","description":"In Pulsar, the authentication provider is responsible for properly identifying clients and associating the clients with role tokens. If you only enable authentication, an authenticated role token has the ability to access all resources in the cluster. Authorization is the process that determines what clients are able to do.","sidebar":"docsSidebar"},"security-encryption":{"id":"security-encryption","title":"Pulsar Encryption","description":"Applications can use Pulsar encryption to encrypt messages on the producer side and decrypt messages on the consumer side. You can use the public and private key pair that the application configures to perform encryption. Only the consumers with a valid key can decrypt the encrypted messages.","sidebar":"docsSidebar"},"security-extending":{"id":"security-extending","title":"Extend Authentication and Authorization in Pulsar","description":"Pulsar provides a way to use custom authentication and authorization mechanisms.","sidebar":"docsSidebar"},"security-overview":{"id":"security-overview","title":"Pulsar security overview","description":"As the central message bus for a business, Apache Pulsar is frequently used for storing mission-critical data. Therefore, enabling security features in Pulsar is crucial.","sidebar":"docsSidebar"},"security-tls-authentication":{"id":"security-tls-authentication","title":"Authentication using TLS","description":"TLS Authentication Overview","sidebar":"docsSidebar"},"security-tls-transport":{"id":"security-tls-transport","title":"Transport Encryption using TLS","description":"TLS Overview","sidebar":"docsSidebar"},"security-token-admin":{"id":"security-token-admin","title":"Token authentication admin","description":"Token Authentication Overview"},"security-token-client":{"id":"security-token-client","title":"Client Authentication using tokens","description":"Token Authentication Overview"},"sql-deployment-configurations":{"id":"sql-deployment-configurations","title":"Pulsar SQL configuration and deployment","description":"You can configure Presto Pulsar connector and deploy a cluster with the following instruction.","sidebar":"docsSidebar"},"sql-getting-started":{"id":"sql-getting-started","title":"Query data with Pulsar SQL","description":"Before querying data in Pulsar, you need to install Pulsar and built-in connectors.","sidebar":"docsSidebar"},"sql-overview":{"id":"sql-overview","title":"Pulsar SQL Overview","description":"Apache Pulsar is used to store streams of event data, and the event data is structured with predefined fields. With the implementation of the Schema Registry, you can store structured data in Pulsar and query the data by using Trino (formerly Presto SQL.md).","sidebar":"docsSidebar"},"standalone":{"id":"standalone","title":"Setting up a local standalone cluster","description":"For the purposes of local development and testing, you can run Pulsar in standalone mode on your own machine. Standalone mode includes a Pulsar broker as well as the necessary ZooKeeper and BookKeeper components running inside of a single Java Virtual Machine (JVM) process."},"standalone-docker":{"id":"standalone-docker","title":"Set up a standalone Pulsar in Docker","description":"For local development and testing, you can run Pulsar in standalone mode on your own machine within a Docker container."}}}}')}}]);