"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[85176],{50702:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"client-libraries-python-use","title":"Use Python client","description":"Learn how to use Python client in Pulsar.","source":"@site/versioned_docs/version-4.0.x/client-libraries-python-use.md","sourceDirName":".","slug":"/client-libraries-python-use","permalink":"/docs/4.0.x/client-libraries-python-use","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-4.0.x/client-libraries-python-use.md","tags":[],"version":"4.0.x","frontMatter":{"id":"client-libraries-python-use","title":"Use Python client","sidebar_label":"Use","description":"Learn how to use Python client in Pulsar."},"sidebar":"docsSidebar","previous":{"title":"Initialize","permalink":"/docs/4.0.x/client-libraries-python-initialize"},"next":{"title":"Node.js client","permalink":"/docs/4.0.x/client-libraries-node"}}');var i=s(74848),c=s(28453);const t={id:"client-libraries-python-use",title:"Use Python client",sidebar_label:"Use",description:"Learn how to use Python client in Pulsar."},d=void 0,a={},l=[{value:"Create a producer",id:"create-a-producer",level:2},{value:"Create a consumer",id:"create-a-consumer",level:2},{value:"Create a reader",id:"create-a-reader",level:2},{value:"Work with schema",id:"work-with-schema",level:2},{value:"Supported schema types",id:"supported-schema-types",level:3},{value:"Schema definition reference",id:"schema-definition-reference",level:3},{value:"Fields parameters",id:"fields-parameters",level:4},{value:"Schema definition examples",id:"schema-definition-examples",level:4},{value:"Simple definition",id:"simple-definition",level:5},{value:"Using enums",id:"using-enums",level:5},{value:"Complex types",id:"complex-types",level:5},{value:"Set namespace for Avro schema",id:"set-namespace-for-avro-schema",level:5},{value:"Declare and validate schema",id:"declare-and-validate-schema",level:3}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"create-a-producer",children:"Create a producer"}),"\n",(0,i.jsxs)(n.p,{children:["The following example creates a Python producer for the ",(0,i.jsx)(n.code,{children:"my-topic"})," topic and sends 10 messages on that topic:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import pulsar\n\nclient = pulsar.Client('pulsar://localhost:6650')\n\nproducer = client.create_producer('my-topic')\n\nfor i in range(10):\n    producer.send(('Hello-%d' % i).encode('utf-8'))\n\nclient.close()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-consumer",children:"Create a consumer"}),"\n",(0,i.jsxs)(n.p,{children:["The following example creates a consumer with the ",(0,i.jsx)(n.code,{children:"my-subscription"})," subscription name on the ",(0,i.jsx)(n.code,{children:"my-topic"})," topic, receives incoming messages, prints the content and ID of messages that arrive, and acknowledges each message to the Pulsar broker."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import pulsar\n\nclient = pulsar.Client('pulsar://localhost:6650')\n\nconsumer = client.subscribe('my-topic', 'my-subscription')\n\nwhile True:\n    msg = consumer.receive()\n    try:\n        print(\"Received message '{}' id='{}'\".format(msg.data(), msg.message_id()))\n        # Acknowledge successful processing of the message\n        consumer.acknowledge(msg)\n    except Exception:\n        # Message failed to be processed\n        consumer.negative_acknowledge(msg)\n\nclient.close()\n"})}),"\n",(0,i.jsx)(n.p,{children:"This example shows how to configure negative acknowledgment."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pulsar import Client, schema\nclient = Client('pulsar://localhost:6650')\nconsumer = client.subscribe('negative_acks','test',schema=schema.StringSchema())\nproducer = client.create_producer('negative_acks',schema=schema.StringSchema())\nfor i in range(10):\n    print('send msg \"hello-%d\"' % i)\n    producer.send_async('hello-%d' % i, callback=None)\nproducer.flush()\nfor i in range(10):\n    msg = consumer.receive()\n    consumer.negative_acknowledge(msg)\n    print('receive and nack msg \"%s\"' % msg.data())\nfor i in range(10):\n    msg = consumer.receive()\n    consumer.acknowledge(msg)\n    print('receive and ack msg \"%s\"' % msg.data())\ntry:\n    # No more messages expected\n    msg = consumer.receive(100)\nexcept:\n    print(\"no more msg\")\n    pass\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-reader",children:"Create a reader"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the Pulsar Python API to use the Pulsar ",(0,i.jsx)(n.a,{href:"/docs/4.0.x/concepts-clients#reader-interface",children:"reader interface"}),". Here's an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# MessageId taken from a previously fetched message\nmsg_id = msg.message_id()\n\nreader = client.create_reader('my-topic', msg_id)\n\nwhile True:\n    msg = reader.read_next()\n    print(\"Received message '{}' id='{}'\".format(msg.data(), msg.message_id()))\n    # No acknowledgment\n"})}),"\n",(0,i.jsx)(n.h2,{id:"work-with-schema",children:"Work with schema"}),"\n",(0,i.jsx)(n.h3,{id:"supported-schema-types",children:"Supported schema types"}),"\n",(0,i.jsxs)(n.p,{children:["You can use different built-in schema types in Pulsar. All the definitions are in the ",(0,i.jsx)(n.code,{children:"pulsar.schema"})," package."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Schema"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"BytesSchema"})}),(0,i.jsxs)(n.td,{children:["Get the raw payload as a ",(0,i.jsx)(n.code,{children:"bytes"})," object. No serialization/deserialization are performed. This is the default schema mode"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"StringSchema"})}),(0,i.jsxs)(n.td,{children:["Encode/decode payload as a UTF-8 string. Uses ",(0,i.jsx)(n.code,{children:"str"})," objects"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"JsonSchema"})}),(0,i.jsx)(n.td,{children:"Require record definition. Serializes the record into standard JSON payload"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"AvroSchema"})}),(0,i.jsx)(n.td,{children:"Require record definition. Serializes in AVRO format"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"schema-definition-reference",children:"Schema definition reference"}),"\n",(0,i.jsxs)(n.p,{children:["The schema definition is done through a class that inherits from ",(0,i.jsx)(n.code,{children:"pulsar.schema.Record"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This class has a number of fields that can be of either ",(0,i.jsx)(n.code,{children:"pulsar.schema.Field"})," type or another nested ",(0,i.jsx)(n.code,{children:"Record"}),". All the fields are specified in the ",(0,i.jsx)(n.code,{children:"pulsar.schema"})," package. The fields are matching the AVRO field types."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field Type"}),(0,i.jsx)(n.th,{children:"Python Type"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Boolean"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bool"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Integer"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Long"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Float"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"float"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Double"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"float"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Bytes"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bytes"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"str"})}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Array"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"list"})}),(0,i.jsx)(n.td,{children:"Need to specify record type for items."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Map"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"dict"})}),(0,i.jsxs)(n.td,{children:["Key is always ",(0,i.jsx)(n.code,{children:"String"}),". Need to specify value type."]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, any Python ",(0,i.jsx)(n.code,{children:"Enum"})," type can be used as a valid field type."]}),"\n",(0,i.jsx)(n.h4,{id:"fields-parameters",children:"Fields parameters"}),"\n",(0,i.jsx)(n.p,{children:"When adding a field, you can use these parameters in the constructor."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Argument"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"default"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"None"})}),(0,i.jsxs)(n.td,{children:["Set a default value for the field, such as ",(0,i.jsx)(n.code,{children:"a = Integer(default=5)"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"required"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"False"})}),(0,i.jsx)(n.td,{children:'Mark the field as "required". It is set in the schema accordingly.'})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"schema-definition-examples",children:"Schema definition examples"}),"\n",(0,i.jsx)(n.h5,{id:"simple-definition",children:"Simple definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Example(Record):\n    a = String()\n    b = Integer()\n    c = Array(String())\n    i = Map(String())\n"})}),"\n",(0,i.jsx)(n.h5,{id:"using-enums",children:"Using enums"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from enum import Enum\n\nclass Color(Enum):\n    red = 1\n    green = 2\n    blue = 3\n\nclass Example(Record):\n    name = String()\n    color = Color\n"})}),"\n",(0,i.jsx)(n.h5,{id:"complex-types",children:"Complex types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class MySubRecord(Record):\n    x = Integer()\n    y = Long()\n    z = String()\n\nclass Example(Record):\n    a = String()\n    sub = MySubRecord()\n"})}),"\n",(0,i.jsx)(n.h5,{id:"set-namespace-for-avro-schema",children:"Set namespace for Avro schema"}),"\n",(0,i.jsxs)(n.p,{children:["Set the namespace for the Avro Record schema using the special field ",(0,i.jsx)(n.code,{children:"_avro_namespace"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class NamespaceDemo(Record):\n   _avro_namespace = 'xxx.xxx.xxx'\n   x = String()\n   y = Integer()\n"})}),"\n",(0,i.jsx)(n.p,{children:"The schema definition is like this."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "NamespaceDemo", "namespace": "xxx.xxx.xxx", "type": "record", "fields": [\n    {"name": "x", "type": ["null", "string"]},\n    {"name": "y", "type": ["null", "int"]}\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"declare-and-validate-schema",children:"Declare and validate schema"}),"\n",(0,i.jsx)(n.p,{children:"Before the producer is created, the Pulsar broker validates that the existing topic schema is the correct type and that the format is compatible with the schema definition of a class. If the format of the topic schema is incompatible with the schema definition, an exception occurs in the producer creation."}),"\n",(0,i.jsx)(n.p,{children:"Once a producer is created with a certain schema definition, it only accepts objects that are instances of the declared schema class."}),"\n",(0,i.jsx)(n.p,{children:"Similarly, for a consumer or reader, the consumer returns an object (which is an instance of the schema record class) rather than raw bytes."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"consumer = client.subscribe(\n                  topic='my-topic',\n                  subscription_name='my-subscription',\n                  schema=AvroSchema(Example) )\n\nwhile True:\n    msg = consumer.receive()\n    ex = msg.value()\n    try:\n        print(\"Received message a={} b={} c={}\".format(ex.a, ex.b, ex.c))\n        # Acknowledge successful processing of the message\n        consumer.acknowledge(msg)\n    except Exception:\n        # Message failed to be processed\n        consumer.negative_acknowledge(msg)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more code examples, see ",(0,i.jsx)(n.a,{href:"/docs/4.0.x/schema-get-started",children:"Schema - Get started"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(96540);const i={},c=r.createContext(i);function t(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);