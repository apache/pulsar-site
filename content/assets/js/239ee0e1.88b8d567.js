"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[2789],{70322:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"client-libraries-java","title":"Pulsar Java client","description":"You can use Pulsar Java client to create Java producer, consumer, and readers of messages and to perform administrative tasks. The current version of the Java client is 2.6.1.","source":"@site/versioned_docs/version-2.6.1/client-libraries-java.md","sourceDirName":".","slug":"/client-libraries-java","permalink":"/docs/2.6.1/client-libraries-java","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.6.1/client-libraries-java.md","tags":[],"version":"2.6.1","frontMatter":{"id":"client-libraries-java","title":"Pulsar Java client","sidebar_label":"Java","original_id":"client-libraries-java"},"sidebar":"docsSidebar","previous":{"title":"Pulsar Perf","permalink":"/docs/2.6.1/performance-pulsar-perf"},"next":{"title":"Go","permalink":"/docs/2.6.1/client-libraries-go"}}');var i=n(74848),t=n(28453);const c={id:"client-libraries-java",title:"Pulsar Java client",sidebar_label:"Java",original_id:"client-libraries-java"},a=void 0,o={},l=[{value:"Installation",id:"installation",level:2},{value:"Maven",id:"maven",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Connection URLs",id:"connection-urls",level:2},{value:"Client",id:"client",level:2},{value:"Default broker URLs for standalone clusters",id:"default-broker-urls-for-standalone-clusters",level:3},{value:"Producer",id:"producer",level:2},{value:"Configure producer",id:"configure-producer",level:3},{value:"Message routing",id:"message-routing",level:3},{value:"Async send",id:"async-send",level:3},{value:"Configure messages",id:"configure-messages",level:3},{value:"Consumer",id:"consumer",level:2},{value:"Configure consumer",id:"configure-consumer",level:3},{value:"Async receive",id:"async-receive",level:3},{value:"Batch receive",id:"batch-receive",level:3},{value:"Multi-topic subscriptions",id:"multi-topic-subscriptions",level:3},{value:"Subscription types",id:"subscription-types",level:3},{value:"Exclusive",id:"exclusive",level:4},{value:"Failover",id:"failover",level:4},{value:"Shared",id:"shared",level:4},{value:"Key_shared",id:"key_shared",level:4},{value:"Reader",id:"reader",level:2},{value:"Sticky key range reader",id:"sticky-key-range-reader",level:3},{value:"Schema",id:"schema",level:2},{value:"Schema example",id:"schema-example",level:3},{value:"Authentication",id:"authentication",level:2},{value:"TLS Authentication",id:"tls-authentication",level:3},{value:"Athenz",id:"athenz",level:3},{value:"Supported pattern formats",id:"supported-pattern-formats",level:4}];function d(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["You can use Pulsar Java client to create Java ",(0,i.jsx)(s.a,{href:"#producer",children:"producer"}),", ",(0,i.jsx)(s.a,{href:"#consumer",children:"consumer"}),", and ",(0,i.jsx)(s.a,{href:"#reader-interface",children:"readers"})," of messages and to perform ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/admin-api-overview",children:"administrative tasks"}),". The current version of the Java client is ",(0,i.jsx)(s.strong,{children:"2.6.1"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["All the methods in ",(0,i.jsx)(s.a,{href:"#producer",children:"producer"}),", ",(0,i.jsx)(s.a,{href:"#consumer",children:"consumer"}),", and ",(0,i.jsx)(s.a,{href:"#reader",children:"reader"})," of a Java client are thread-safe."]}),"\n",(0,i.jsx)(s.p,{children:"Javadoc for the Pulsar client is divided into two domains by package as follows."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{style:{textAlign:"left"},children:"Package"}),(0,i.jsx)(s.th,{style:{textAlign:"left"},children:"Description"}),(0,i.jsx)(s.th,{style:{textAlign:"left"},children:"Maven Artifact"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/2.6.1",children:(0,i.jsx)(s.code,{children:"org.apache.pulsar.client.api"})})}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:"The producer and consumer API"}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.a,{href:"http://search.maven.org/#artifactdetails%7Corg.apache.pulsar%7Cpulsar-client%7C2.6.1%7Cjar",children:"org.apache.pulsar:pulsar-client:2.6.1"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/admin/2.6.1",children:(0,i.jsx)(s.code,{children:"org.apache.pulsar.client.admin"})})}),(0,i.jsxs)(s.td,{style:{textAlign:"left"},children:["The Java ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/admin-api-overview",children:"admin API"})]}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.a,{href:"http://search.maven.org/#artifactdetails%7Corg.apache.pulsar%7Cpulsar-client-admin%7C2.6.1%7Cjar",children:"org.apache.pulsar:pulsar-client-admin:2.6.1"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.code,{children:"org.apache.pulsar.client.all"})}),(0,i.jsxs)(s.td,{style:{textAlign:"left"},children:["Includes both ",(0,i.jsx)(s.code,{children:"pulsar-client"})," and ",(0,i.jsx)(s.code,{children:"pulsar-client-admin"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," Both ",(0,i.jsx)(s.code,{children:"pulsar-client"})," and ",(0,i.jsx)(s.code,{children:"pulsar-client-admin"})," are shaded packages and they shade dependencies independently. Consequently, the applications using both ",(0,i.jsx)(s.code,{children:"pulsar-client"})," and ",(0,i.jsx)(s.code,{children:"pulsar-client-admin"})," have redundant shaded classes. It would be troublesome if you introduce new dependencies but forget to update shading rules. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," In this case, you can use ",(0,i.jsx)(s.code,{children:"pulsar-client-all"}),", which shades dependencies only one time and reduces the size of dependencies."]}),(0,i.jsx)(s.td,{style:{textAlign:"left"},children:(0,i.jsx)(s.a,{href:"http://search.maven.org/#artifactdetails%7Corg.apache.pulsar%7Cpulsar-client-all%7C2.6.1%7Cjar",children:"org.apache.pulsar:pulsar-client-all:2.6.1"})})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["This document focuses only on the client API for producing and consuming messages on Pulsar topics. For how to use the Java admin client, see ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/admin-api-overview",children:"Pulsar admin interface"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(s.p,{children:["The latest version of the Pulsar Java client library is available via ",(0,i.jsx)(s.a,{href:"http://search.maven.org/#artifactdetails%7Corg.apache.pulsar%7Cpulsar-client%7C2.6.1%7Cjar",children:"Maven Central"}),". To use the latest version, add the ",(0,i.jsx)(s.code,{children:"pulsar-client"})," library to your build configuration."]}),"\n",(0,i.jsx)(s.h3,{id:"maven",children:"Maven"}),"\n",(0,i.jsxs)(s.p,{children:["If you use Maven, add the following information to the ",(0,i.jsx)(s.code,{children:"pom.xml"})," file."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-xml",children:"\n\x3c!-- in your <properties> block --\x3e\n<pulsar.version>2.6.1</pulsar.version>\n\n\x3c!-- in your <dependencies> block --\x3e\n<dependency>\n  <groupId>org.apache.pulsar</groupId>\n  <artifactId>pulsar-client</artifactId>\n  <version>${pulsar.version}</version>\n</dependency>\n\n"})}),"\n",(0,i.jsx)(s.h3,{id:"gradle",children:"Gradle"}),"\n",(0,i.jsxs)(s.p,{children:["If you use Gradle, add the following information to the ",(0,i.jsx)(s.code,{children:"build.gradle"})," file."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-groovy",children:"\ndef pulsarVersion = '2.6.1'\n\ndependencies {\n    compile group: 'org.apache.pulsar', name: 'pulsar-client', version: pulsarVersion\n}\n\n"})}),"\n",(0,i.jsx)(s.h2,{id:"connection-urls",children:"Connection URLs"}),"\n",(0,i.jsxs)(s.p,{children:["To connect to Pulsar using client libraries, you need to specify a ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/developing-binary-protocol",children:"Pulsar protocol"})," URL."]}),"\n",(0,i.jsxs)(s.p,{children:["You can assign Pulsar protocol URLs to specific clusters and use the ",(0,i.jsx)(s.code,{children:"pulsar"})," scheme. The default port is ",(0,i.jsx)(s.code,{children:"6650"}),". The following is an example of ",(0,i.jsx)(s.code,{children:"localhost"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-http",children:"\npulsar://localhost:6650\n\n"})}),"\n",(0,i.jsx)(s.p,{children:"If you have multiple brokers, the URL is as follows."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-http",children:"\npulsar://localhost:6550,localhost:6651,localhost:6652\n\n"})}),"\n",(0,i.jsx)(s.p,{children:"A URL for a production Pulsar cluster is as follows."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-http",children:"\npulsar://pulsar.us-west.example.com:6650\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["If you use ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-tls-authentication",children:"TLS"})," authentication, the URL is as follows."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-http",children:"\npulsar+ssl://pulsar.us-west.example.com:6651\n\n"})}),"\n",(0,i.jsx)(s.h2,{id:"client",children:"Client"}),"\n",(0,i.jsxs)(s.p,{children:["You can instantiate a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object using just a URL for the target Pulsar ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#cluster",children:"cluster"})," like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nPulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar://localhost:6650")\n        .build();\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"If you have multiple brokers, you can initiate a PulsarClient like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nPulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar://localhost:6650,localhost:6651,localhost:6652")\n        .build();\n\n'})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.h3,{id:"default-broker-urls-for-standalone-clusters",children:"Default broker URLs for standalone clusters"}),"\n",(0,i.jsxs)(s.p,{children:["If you run a cluster in ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/getting-started-standalone",children:"standalone mode"}),", the broker is available at the ",(0,i.jsx)(s.code,{children:"pulsar://localhost:6650"})," URL by default."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["If you create a client, you can use the ",(0,i.jsx)(s.code,{children:"loadConf"})," configuration. The following parameters are available in ",(0,i.jsx)(s.code,{children:"loadConf"}),"."]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Name"}),(0,i.jsx)(s.th,{children:(0,i.jsx)("div",{children:"Description"})}),(0,i.jsx)(s.th,{children:"Default"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"serviceUrl"})}),(0,i.jsx)(s.td,{children:"Service URL provider for Pulsar service"}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"authPluginClassName"})}),(0,i.jsx)(s.td,{children:"Name of the authentication plugin"}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"authParams"})}),(0,i.jsxs)(s.td,{children:["String represents parameters for the authentication plugin ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.strong,{children:"Example"}),(0,i.jsx)("br",{})," key1",":val1",",key2",":val2"]}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"operationTimeoutMs"})}),(0,i.jsx)(s.td,{children:"Operation timeout"}),(0,i.jsx)(s.td,{children:"30000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"statsIntervalSeconds"})}),(0,i.jsxs)(s.td,{children:["Interval between each stats info",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Stats is activated with positive ",(0,i.jsx)(s.code,{children:"statsInterval"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Set ",(0,i.jsx)(s.code,{children:"statsIntervalSeconds"})," to 1 second at least"]}),(0,i.jsx)(s.td,{children:"60"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"numIoThreads"})}),(0,i.jsx)(s.td,{children:"The number of threads used for handling connections to brokers"}),(0,i.jsx)(s.td,{children:"1"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"numListenerThreads"})}),(0,i.jsx)(s.td,{children:"The number of threads used for handling message listeners"}),(0,i.jsx)(s.td,{children:"1"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"useTcpNoDelay"})}),(0,i.jsx)(s.td,{children:"Whether to use TCP no-delay flag on the connection to disable Nagle algorithm"}),(0,i.jsx)(s.td,{children:"true"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"useTls"})}),(0,i.jsx)(s.td,{children:"Whether to use TLS encryption on the connection"}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"tlsTrustCertsFilePath"})}),(0,i.jsx)(s.td,{children:"Path to the trusted TLS certificate file"}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"tlsAllowInsecureConnection"})}),(0,i.jsx)(s.td,{children:"Whether the Pulsar client accepts untrusted TLS certificate from broker"}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"tlsHostnameVerificationEnable"})}),(0,i.jsx)(s.td,{children:"Whether to enable TLS hostname verification"}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"concurrentLookupRequest"})}),(0,i.jsx)(s.td,{children:"The number of concurrent lookup requests allowed to send on each broker connection to prevent overload on broker"}),(0,i.jsx)(s.td,{children:"5000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxLookupRequest"})}),(0,i.jsx)(s.td,{children:"The maximum number of lookup requests allowed on each broker connection to prevent overload on broker"}),(0,i.jsx)(s.td,{children:"50000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxNumberOfRejectedRequestPerConnection"})}),(0,i.jsx)(s.td,{children:"The maximum number of rejected requests of a broker in a certain time frame (30 seconds) after the current connection is closed and the client creates a new connection to connect to a different broker"}),(0,i.jsx)(s.td,{children:"50"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"keepAliveIntervalSeconds"})}),(0,i.jsx)(s.td,{children:"Seconds of keeping alive interval for each client broker connection"}),(0,i.jsx)(s.td,{children:"30"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"connectionTimeoutMs"})}),(0,i.jsxs)(s.td,{children:["Duration of waiting for a connection to a broker to be established ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If the duration passes without a response from a broker, the connection attempt is dropped"]}),(0,i.jsx)(s.td,{children:"10000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"requestTimeoutMs"})}),(0,i.jsx)(s.td,{children:"Maximum duration for completing a request"}),(0,i.jsx)(s.td,{children:"60000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"defaultBackoffIntervalNanos"})}),(0,i.jsx)(s.td,{children:"Default duration for a backoff interval"}),(0,i.jsx)(s.td,{children:"TimeUnit.MILLISECONDS.toNanos(100);"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxBackoffIntervalNanos"})}),(0,i.jsx)(s.td,{children:"Maximum duration for a backoff interval"}),(0,i.jsx)(s.td,{children:"TimeUnit.SECONDS.toNanos(30)"})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["Check out the Javadoc for the ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," class for a full list of configurable parameters."]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:["In addition to client-level configuration, you can also apply ",(0,i.jsx)(s.a,{href:"#configuring-producers",children:"producer"})," and ",(0,i.jsx)(s.a,{href:"#configuring-consumers",children:"consumer"})," specific configuration as described in sections below."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"producer",children:"Producer"}),"\n",(0,i.jsxs)(s.p,{children:["In Pulsar, producers write messages to topics. Once you've instantiated a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object (as in the section ",(0,i.jsx)(s.a,{href:"#client-configuration",children:"above"}),"), you can create a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/Producer",children:"Producer"})," for a specific Pulsar ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#topic",children:"topic"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<byte[]> producer = client.newProducer()\n        .topic("my-topic")\n        .create();\n\n// You can then send messages to the broker and topic you specified:\nproducer.send("My message".getBytes());\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["By default, producers produce messages that consist of byte arrays. You can produce different types by specifying a message ",(0,i.jsx)(s.a,{href:"#schemas",children:"schema"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<String> stringProducer = client.newProducer(Schema.STRING)\n        .topic("my-topic")\n        .create();\nstringProducer.send("My message");\n\n'})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Make sure that you close your producers, consumers, and clients when you do not need them."}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nproducer.close();\nconsumer.close();\nclient.close();\n\n\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Close operations can also be asynchronous:"}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nproducer.closeAsync()\n   .thenRun(() -> System.out.println("Producer closed"))\n   .exceptionally((ex) -> {\n       System.err.println("Failed to close producer: " + ex);\n       return null;\n   });\n\n\n'})}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"configure-producer",children:"Configure producer"}),"\n",(0,i.jsxs)(s.p,{children:["If you instantiate a ",(0,i.jsx)(s.code,{children:"Producer"})," object by specifying only a topic name as the example above, use the default configuration for producer."]}),"\n",(0,i.jsxs)(s.p,{children:["If you create a producer, you can use the ",(0,i.jsx)(s.code,{children:"loadConf"})," configuration. The following parameters are available in ",(0,i.jsx)(s.code,{children:"loadConf"}),"."]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Name"}),(0,i.jsx)(s.th,{children:(0,i.jsx)("div",{children:"Description"})}),(0,i.jsx)(s.th,{children:"Default"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"topicName"})}),(0,i.jsx)(s.td,{children:"Topic name"}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"producerName"})}),(0,i.jsx)(s.td,{children:"Producer name"}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sendTimeoutMs"})}),(0,i.jsxs)(s.td,{children:["Message send timeout in ms.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If a message is not acknowledged by a server before the ",(0,i.jsx)(s.code,{children:"sendTimeout"})," expires, an error occurs."]}),(0,i.jsx)(s.td,{children:"30000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"blockIfQueueFull"})}),(0,i.jsxs)(s.td,{children:["If it is set to ",(0,i.jsx)(s.code,{children:"true"}),", when the outgoing message queue is full, the ",(0,i.jsx)(s.code,{children:"Send"})," and ",(0,i.jsx)(s.code,{children:"SendAsync"})," methods of producer block, rather than failing and throwing errors. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If it is set to ",(0,i.jsx)(s.code,{children:"false"}),", when the outgoing message queue is full, the ",(0,i.jsx)(s.code,{children:"Send"})," and ",(0,i.jsx)(s.code,{children:"SendAsync"})," methods of producer fail and ",(0,i.jsx)(s.code,{children:"ProducerQueueIsFullError"})," exceptions occur.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The ",(0,i.jsx)(s.code,{children:"MaxPendingMessages"})," parameter determines the size of the outgoing message queue."]}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxPendingMessages"})}),(0,i.jsxs)(s.td,{children:["The maximum size of a queue holding pending messages.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"For example, a message waiting to receive an acknowledgment from a ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#broker",children:"broker"}),". ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"By default, when the queue is full, all calls to the ",(0,i.jsx)(s.code,{children:"Send"})," and ",(0,i.jsx)(s.code,{children:"SendAsync"})," methods fail ",(0,i.jsx)(s.strong,{children:"unless"})," you set ",(0,i.jsx)(s.code,{children:"BlockIfQueueFull"})," to ",(0,i.jsx)(s.code,{children:"true"}),"."]}),(0,i.jsx)(s.td,{children:"1000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxPendingMessagesAcrossPartitions"})}),(0,i.jsxs)(s.td,{children:["The maximum number of pending messages across partitions. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Use the setting to lower the max pending messages for each partition (",(0,i.jsx)(s.code,{children:"#setMaxPendingMessages(int)"}),") if the total number exceeds the configured value."]}),(0,i.jsx)(s.td,{children:"50000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"MessageRoutingMode"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"messageRoutingMode"})}),(0,i.jsxs)(s.td,{children:["Message routing logic for producers on ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-architecture-overview#partitioned-topics",children:"partitioned topics"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," Apply the logic only when setting no key on messages. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Available options are as follows: ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.code,{children:"pulsar.RoundRobinDistribution"}),": round robin",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," "]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.code,{children:"pulsar.UseSinglePartition"}),": publish all messages to a single partition",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.code,{children:"pulsar.CustomPartition"}),": a custom partitioning scheme"]})]}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"pulsar.RoundRobinDistribution"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"HashingScheme"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"hashingScheme"})}),(0,i.jsxs)(s.td,{children:["Hashing function determining the partition where you publish a particular message (",(0,i.jsx)(s.strong,{children:"partitioned topics only"}),").",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Available options are as follows:",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[" ",(0,i.jsx)(s.code,{children:"pulsar.JavaStringHash"}),": the equivalent of ",(0,i.jsx)(s.code,{children:"String.hashCode()"})," in Java",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("li",{children:[" ",(0,i.jsx)(s.code,{children:"pulsar.Murmur3_32Hash"}),": applies the ",(0,i.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/MurmurHash",children:"Murmur3"})," hashing function",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.code,{children:"pulsar.BoostHash"}),": applies the hashing function from C++'s ",(0,i.jsx)(s.a,{href:"https://www.boost.org/doc/libs/1_62_0/doc/html/hash.html",children:"Boost"})," library "]})]}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"HashingScheme.JavaStringHash"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"ProducerCryptoFailureAction"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"cryptoFailureAction"})}),(0,i.jsxs)(s.td,{children:["Producer should take action when encryption fails.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"FAIL"}),": if encryption fails, unencrypted messages fail to send."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[" ",(0,i.jsx)(s.strong,{children:"SEND"}),": if encryption fails, unencrypted messages are sent. "]})]}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"ProducerCryptoFailureAction.FAIL"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"batchingMaxPublishDelayMicros"})}),(0,i.jsx)(s.td,{children:"Batching time period of sending messages."}),(0,i.jsx)(s.td,{children:"TimeUnit.MILLISECONDS.toMicros(1)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:"batchingMaxMessages"}),(0,i.jsx)(s.td,{children:"The maximum number of messages permitted in a batch."}),(0,i.jsx)(s.td,{children:"1000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"batchingEnabled"})}),(0,i.jsx)(s.td,{children:"Enable batching of messages."}),(0,i.jsx)(s.td,{children:"true"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"CompressionType"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"compressionType"})}),(0,i.jsxs)(s.td,{children:["Message data compression type used by a producer. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Available options:",(0,i.jsxs)("li",{children:[(0,i.jsx)(s.a,{href:"https://github.com/lz4/lz4",children:(0,i.jsx)(s.code,{children:"LZ4"})}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.a,{href:"https://zlib.net/",children:(0,i.jsx)(s.code,{children:"ZLIB"})}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.a,{href:"https://facebook.github.io/zstd/",children:(0,i.jsx)(s.code,{children:"ZSTD"})}),(0,i.jsx)("br",{})]}),(0,i.jsx)("li",{children:(0,i.jsx)(s.a,{href:"https://google.github.io/snappy/",children:(0,i.jsx)(s.code,{children:"SNAPPY"})})})]}),(0,i.jsx)(s.td,{children:"No compression"})]})]})]}),"\n",(0,i.jsx)(s.p,{children:"You can configure parameters if you do not want to use the default configuration."}),"\n",(0,i.jsxs)(s.p,{children:["For a full list, see the Javadoc for the ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/ProducerBuilder",children:"ProducerBuilder"})," class. The following is an example."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<byte[]> producer = client.newProducer()\n    .topic("my-topic")\n    .batchingMaxPublishDelay(10, TimeUnit.MILLISECONDS)\n    .sendTimeout(10, TimeUnit.SECONDS)\n    .blockIfQueueFull(true)\n    .create();\n\n'})}),"\n",(0,i.jsx)(s.h3,{id:"message-routing",children:"Message routing"}),"\n",(0,i.jsxs)(s.p,{children:["When using partitioned topics, you can specify the routing mode whenever you publish messages using a producer. For more information on specifying a routing mode using the Java client, see the ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/cookbooks-partitioned",children:"Partitioned Topics"})," cookbook."]}),"\n",(0,i.jsx)(s.h3,{id:"async-send",children:"Async send"}),"\n",(0,i.jsxs)(s.p,{children:["You can publish messages ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-messaging#send-modes",children:"asynchronously"})," using the Java client. With async send, the producer puts the message in a blocking queue and returns it immediately. Then the client library sends the message to the broker in the background. If the queue is full (max size configurable), the producer is blocked or fails immediately when calling the API, depending on arguments passed to the producer."]}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nproducer.sendAsync("my-async-message".getBytes()).thenAccept(msgId -> {\n    System.out.printf("Message with ID %s successfully sent", msgId);\n});\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["As you can see from the example above, async send operations return a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/MessageId",children:"MessageId"})," wrapped in a ",(0,i.jsx)(s.a,{href:"http://www.baeldung.com/java-completablefuture",children:(0,i.jsx)(s.code,{children:"CompletableFuture"})}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"configure-messages",children:"Configure messages"}),"\n",(0,i.jsx)(s.p,{children:"In addition to a value, you can set additional items on a given message:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nproducer.newMessage()\n    .key("my-message-key")\n    .value("my-async-message".getBytes())\n    .property("my-key", "my-value")\n    .property("my-other-key", "my-other-value")\n    .send();\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["You can terminate the builder chain with ",(0,i.jsx)(s.code,{children:"sendAsync()"})," and get a future return."]}),"\n",(0,i.jsx)(s.h2,{id:"consumer",children:"Consumer"}),"\n",(0,i.jsxs)(s.p,{children:["In Pulsar, consumers subscribe to topics and handle messages that producers publish to those topics. You can instantiate a new ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#consumer",children:"consumer"})," by first instantiating a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object and passing it a URL for a Pulsar broker (as ",(0,i.jsx)(s.a,{href:"#client-configuration",children:"above"}),")."]}),"\n",(0,i.jsxs)(s.p,{children:["Once you've instantiated a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object, you can create a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/Consumer",children:"Consumer"})," by specifying a ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#topic",children:"topic"})," and a ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-messaging#subscription-modes",children:"subscription"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscribe();\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"subscribe"})," method will auto subscribe the consumer to the specified topic and subscription. One way to make the consumer listen on the topic is to set up a ",(0,i.jsx)(s.code,{children:"while"})," loop. In this example loop, the consumer listens for messages, prints the contents of any received message, and then ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#acknowledgment-ack",children:"acknowledges"})," that the message has been processed. If the processing logic fails, you can use ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#acknowledgment-ack",children:"negative acknowledgement"})," to redeliver the message later."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nwhile (true) {\n  // Wait for a message\n  Message msg = consumer.receive();\n\n  try {\n      // Do something with the message\n      System.out.printf("Message received: %s", new String(msg.getData()));\n\n      // Acknowledge the message\n      consumer.acknowledge(msg);\n  } catch (Exception e) {\n      // Message failed to process, redeliver later\n      consumer.negativeAcknowledge(msg);\n  }\n}\n\n'})}),"\n",(0,i.jsx)(s.h3,{id:"configure-consumer",children:"Configure consumer"}),"\n",(0,i.jsxs)(s.p,{children:["If you instantiate a ",(0,i.jsx)(s.code,{children:"Consumer"})," object by specifying only a topic and subscription name as in the example above, the consumer uses the default configuration."]}),"\n",(0,i.jsxs)(s.p,{children:["When you create a consumer, you can use the ",(0,i.jsx)(s.code,{children:"loadConf"})," configuration. The following parameters are available in ",(0,i.jsx)(s.code,{children:"loadConf"}),"."]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Name"}),(0,i.jsx)(s.th,{children:(0,i.jsx)("div",{children:"Description"})}),(0,i.jsx)(s.th,{children:"Default"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Set<String>"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"topicNames"})}),(0,i.jsx)(s.td,{children:"Topic name"}),(0,i.jsx)(s.td,{children:"Sets.newTreeSet()"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Pattern"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"topicsPattern"})}),(0,i.jsx)(s.td,{children:"Topic pattern"}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"subscriptionName"})}),(0,i.jsx)(s.td,{children:"Subscription name"}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"SubscriptionType"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"subscriptionType"})}),(0,i.jsxs)(s.td,{children:["Subscription type ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Four subscription types are available:",(0,i.jsx)("li",{children:"Exclusive"}),(0,i.jsx)("li",{children:"Failover"}),(0,i.jsx)("li",{children:"Shared"}),(0,i.jsx)("li",{children:"Key_Shared"})]}),(0,i.jsx)(s.td,{children:"SubscriptionType.Exclusive"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"receiverQueueSize"})}),(0,i.jsxs)(s.td,{children:["Size of a consumer's receiver queue. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"For example, the number of messages accumulated by a consumer before an application calls ",(0,i.jsx)(s.code,{children:"Receive"}),". ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"A value higher than the default value increases consumer throughput, though at the expense of more memory utilization."]}),(0,i.jsx)(s.td,{children:"1000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"acknowledgementsGroupTimeMicros"})}),(0,i.jsxs)(s.td,{children:["Group a consumer acknowledgment for a specified time.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"By default, a consumer uses 100ms grouping time to send out acknowledgments to a broker.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Setting a group time of 0 sends out acknowledgments immediately. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"A longer ack group time is more efficient at the expense of a slight increase in message re-deliveries after a failure."]}),(0,i.jsx)(s.td,{children:"TimeUnit.MILLISECONDS.toMicros(100)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"negativeAckRedeliveryDelayMicros"})}),(0,i.jsxs)(s.td,{children:["Delay to wait before redelivering messages that failed to be processed.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," When an application uses ",(0,i.jsx)(s.code,{children:"Consumer#negativeAcknowledge(Message)"}),", failed messages are redelivered after a fixed timeout."]}),(0,i.jsx)(s.td,{children:"TimeUnit.MINUTES.toMicros(1)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"maxTotalReceiverQueueSizeAcrossPartitions"})}),(0,i.jsxs)(s.td,{children:["The max total receiver queue size across partitions.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"This setting reduces the receiver queue size for individual partitions if the total receiver queue size exceeds this value."]}),(0,i.jsx)(s.td,{children:"50000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"consumerName"})}),(0,i.jsx)(s.td,{children:"Consumer name"}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"ackTimeoutMillis"})}),(0,i.jsx)(s.td,{children:"Timeout of unacked messages"}),(0,i.jsx)(s.td,{children:"0"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"long"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"tickDurationMillis"})}),(0,i.jsxs)(s.td,{children:["Granularity of the ack-timeout redelivery.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Using an higher ",(0,i.jsx)(s.code,{children:"tickDurationMillis"})," reduces the memory overhead to track messages when setting ack-timeout to a bigger value (for example, 1 hour)."]}),(0,i.jsx)(s.td,{children:"1000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"priorityLevel"})}),(0,i.jsxs)(s.td,{children:["Priority level for a consumer to which a broker gives more priority while dispatching messages in Shared subscription type. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The broker follows descending priorities. For example, 0=max-priority, 1, 2,...",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"In shared subscription type, the broker ",(0,i.jsx)(s.strong,{children:"first dispatches messages to the max priority level consumers if they have permits"}),". Otherwise, the broker considers next priority level consumers.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," ",(0,i.jsx)(s.strong,{children:"Example 1"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If a subscription has consumerA with ",(0,i.jsx)(s.code,{children:"priorityLevel"})," 0 and consumerB with ",(0,i.jsx)(s.code,{children:"priorityLevel"})," 1, then the broker ",(0,i.jsx)(s.strong,{children:"only dispatches messages to consumerA until it runs out permits"})," and then starts dispatching messages to consumerB.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.strong,{children:"Example 2"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Consumer Priority, Level, Permits",(0,i.jsx)("br",{}),"C1, 0, 2",(0,i.jsx)("br",{}),"C2, 0, 1",(0,i.jsx)("br",{}),"C3, 0, 1",(0,i.jsx)("br",{}),"C4, 1, 2",(0,i.jsx)("br",{}),"C5, 1, 1",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Order in which a broker dispatches messages to consumers is: C1, C2, C3, C1, C4, C5, C4."]}),(0,i.jsx)(s.td,{children:"0"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"ConsumerCryptoFailureAction"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"cryptoFailureAction"})}),(0,i.jsxs)(s.td,{children:["Consumer should take action when it receives a message that can not be decrypted.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"FAIL"}),": this is the default option to fail messages until crypto succeeds."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[" ",(0,i.jsx)(s.strong,{children:"DISCARD"}),":silently"," acknowledge and not deliver message to an application."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"CONSUME"}),": deliver encrypted messages to applications. It is the application's responsibility to decrypt the message.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The decompression of message fails. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If messages contain batch messages, a client is not be able to retrieve individual messages in batch.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Delivered encrypted message contains ",(0,i.jsx)(s.code,{children:"EncryptionContext"})," which contains encryption and compression information in it using which application can decrypt consumed message payload."]})]}),(0,i.jsx)(s.td,{children:(0,i.jsx)("li",{children:"ConsumerCryptoFailureAction.FAIL"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"SortedMap<String, String>"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"properties"})}),(0,i.jsxs)(s.td,{children:["A name or value property of this consumer.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.code,{children:"properties"})," is application defined metadata attached to a consumer. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"When getting a topic stats, associate this metadata with the consumer stats for easier identification."]}),(0,i.jsx)(s.td,{children:"new TreeMap()"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"readCompacted"})}),(0,i.jsxs)(s.td,{children:["If enabling ",(0,i.jsx)(s.code,{children:"readCompacted"}),", a consumer reads messages from a compacted topic rather than reading a full message backlog of a topic.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," A consumer only sees the latest value for each key in the compacted topic, up until reaching the point in the topic message when compacting backlog. Beyond that point, send messages as normal.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Only enabling ",(0,i.jsx)(s.code,{children:"readCompacted"})," on subscriptions to persistent topics, which have a single active consumer (like failure or exclusive subscriptions). ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Attempting to enable it on subscriptions to non-persistent topics or on shared subscriptions leads to a subscription call throwing a ",(0,i.jsx)(s.code,{children:"PulsarClientException"}),"."]}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"SubscriptionInitialPosition"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"subscriptionInitialPosition"})}),(0,i.jsx)(s.td,{children:"Initial position at which to set cursor when subscribing to a topic at first time."}),(0,i.jsx)(s.td,{children:"SubscriptionInitialPosition.Latest"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"patternAutoDiscoveryPeriod"})}),(0,i.jsxs)(s.td,{children:["Topic auto discovery period when using a pattern for topic's consumer.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The default and minimum value is 1 minute."]}),(0,i.jsx)(s.td,{children:"1"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"RegexSubscriptionMode"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"regexSubscriptionMode"})}),(0,i.jsxs)(s.td,{children:["When subscribing to a topic using a regular expression, you can pick a certain type of topics.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"PersistentOnly"}),": only subscribe to persistent topics."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"NonPersistentOnly"}),": only subscribe to non-persistent topics."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"AllTopics"}),": subscribe to both persistent and non-persistent topics."]})]}),(0,i.jsx)(s.td,{children:"RegexSubscriptionMode.PersistentOnly"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"DeadLetterPolicy"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"deadLetterPolicy"})}),(0,i.jsxs)(s.td,{children:["Dead letter policy for consumers.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"By default, some messages are probably redelivered many times, even to the extent that it never stops.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"By using the dead letter mechanism, messages have the max redelivery count. ",(0,i.jsx)(s.strong,{children:"When exceeding the maximum number of redeliveries, messages are sent to the Dead Letter Topic and acknowledged automatically"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"You can enable the dead letter mechanism by setting ",(0,i.jsx)(s.code,{children:"deadLetterPolicy"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.strong,{children:"Example"}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("code",{children:["client.newConsumer()",(0,i.jsx)("br",{}),".deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(10).build())",(0,i.jsx)("br",{}),".subscribe();"]}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Default dead letter topic name is ",(0,i.jsx)(s.code,{children:"\\{TopicName\\}-\\{Subscription\\}-DLQ"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"To set a custom dead letter topic name:",(0,i.jsx)("br",{}),(0,i.jsxs)("code",{children:["client.newConsumer()",(0,i.jsx)("br",{}),".deadLetterPolicy(DeadLetterPolicy.builder().maxRedeliverCount(10)",(0,i.jsx)("br",{}),'.deadLetterTopic("your-topic-name").build())',(0,i.jsx)("br",{}),".subscribe();"]}),(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"When specifying the dead letter policy while not specifying ",(0,i.jsx)(s.code,{children:"ackTimeoutMillis"}),", you can set the ack timeout to 30000 millisecond."]}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"autoUpdatePartitions"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"autoUpdatePartitions"})," is enabled, a consumer subscribes to partition increasement automatically.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.strong,{children:"Note"}),": this is only for partitioned consumers."]}),(0,i.jsx)(s.td,{children:"true"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"replicateSubscriptionState"})}),(0,i.jsxs)(s.td,{children:["If ",(0,i.jsx)(s.code,{children:"replicateSubscriptionState"})," is\xa0enabled, a subscription state is replicated to geo-replicated clusters."]}),(0,i.jsx)(s.td,{children:"false"})]})]})]}),"\n",(0,i.jsxs)(s.p,{children:["You can configure parameters if you do not want to use the default configuration. For a full list, see the Javadoc for the ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/ConsumerBuilder",children:"ConsumerBuilder"})," class."]}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .ackTimeout(10, TimeUnit.SECONDS)\n        .subscriptionType(SubscriptionType.Exclusive)\n        .subscribe();\n\n'})}),"\n",(0,i.jsx)(s.h3,{id:"async-receive",children:"Async receive"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"receive"})," method receives messages synchronously (the consumer process is blocked until a message is available). You can also use ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-messaging#receive-modes",children:"async receive"}),", which returns a ",(0,i.jsx)(s.a,{href:"http://www.baeldung.com/java-completablefuture",children:(0,i.jsx)(s.code,{children:"CompletableFuture"})})," object immediately once a new message is available."]}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nCompletableFuture<Message> asyncMessage = consumer.receiveAsync();\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Async receive operations return a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/Message",children:"Message"})," wrapped inside of a ",(0,i.jsx)(s.a,{href:"http://www.baeldung.com/java-completablefuture",children:(0,i.jsx)(s.code,{children:"CompletableFuture"})}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"batch-receive",children:"Batch receive"}),"\n",(0,i.jsxs)(s.p,{children:["Use ",(0,i.jsx)(s.code,{children:"batchReceive"})," to receive multiple messages for each call."]}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nMessages messages = consumer.batchReceive();\nfor (Object message : messages) {\n  // do something\n}\nconsumer.acknowledge(messages)\n\n"})}),"\n",(0,i.jsxs)(s.admonition,{type:"note",children:[(0,i.jsx)(s.p,{children:"Batch receive policy limits the number and bytes of messages in a single batch. You can specify a timeout to wait for enough messages.\nThe batch receive is completed if any of the following condition is met: enough number of messages, bytes of messages, wait timeout."}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer = client.newConsumer()\n.topic("my-topic")\n.subscriptionName("my-subscription")\n.batchReceivePolicy(BatchReceivePolicy.builder()\n.maxNumMessages(100)\n.maxNumBytes(1024 * 1024)\n.timeout(200, TimeUnit.MILLISECONDS)\n.build())\n.subscribe();\n\n'})}),(0,i.jsx)(s.p,{children:"The default batch receive policy is:"}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nBatchReceivePolicy.builder()\n.maxNumMessage(-1)\n.maxNumBytes(10 * 1024 * 1024)\n.timeout(100, TimeUnit.MILLISECONDS)\n.build();\n\n"})})]}),"\n",(0,i.jsx)(s.h3,{id:"multi-topic-subscriptions",children:"Multi-topic subscriptions"}),"\n",(0,i.jsxs)(s.p,{children:["In addition to subscribing a consumer to a single Pulsar topic, you can also subscribe to multiple topics simultaneously using ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-messaging#multi-topic-subscriptions",children:"multi-topic subscriptions"}),". To use multi-topic subscriptions you can supply either a regular expression (regex) or a ",(0,i.jsx)(s.code,{children:"List"})," of topics. If you select topics via regex, all topics must be within the same Pulsar namespace."]}),"\n",(0,i.jsx)(s.p,{children:"The followings are some examples."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nimport org.apache.pulsar.client.api.Consumer;\nimport org.apache.pulsar.client.api.PulsarClient;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nConsumerBuilder consumerBuilder = pulsarClient.newConsumer()\n        .subscriptionName(subscription);\n\n// Subscribe to all topics in a namespace\nPattern allTopicsInNamespace = Pattern.compile("persistent://public/default/.*");\nConsumer allTopicsConsumer = consumerBuilder\n        .topicsPattern(allTopicsInNamespace)\n        .subscribe();\n\n// Subscribe to a subsets of topics in a namespace, based on regex\nPattern someTopicsInNamespace = Pattern.compile("persistent://public/default/foo.*");\nConsumer allTopicsConsumer = consumerBuilder\n        .topicsPattern(someTopicsInNamespace)\n        .subscribe();\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"You can also subscribe to an explicit list of topics (across namespaces if you wish):"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nList<String> topics = Arrays.asList(\n        "topic-1",\n        "topic-2",\n        "topic-3"\n);\n\nConsumer multiTopicConsumer = consumerBuilder\n        .topics(topics)\n        .subscribe();\n\n// Alternatively:\nConsumer multiTopicConsumer = consumerBuilder\n        .topic(\n            "topic-1",\n            "topic-2",\n            "topic-3"\n        )\n        .subscribe();\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["You can also subscribe to multiple topics asynchronously using the ",(0,i.jsx)(s.code,{children:"subscribeAsync"})," method rather than the synchronous ",(0,i.jsx)(s.code,{children:"subscribe"})," method. The following is an example."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nPattern allTopicsInNamespace = Pattern.compile("persistent://public/default.*");\nconsumerBuilder\n        .topics(topics)\n        .subscribeAsync()\n        .thenAccept(this::receiveMessageFromConsumer);\n\nprivate void receiveMessageFromConsumer(Object consumer) {\n    ((Consumer)consumer).receiveAsync().thenAccept(message -> {\n                // Do something with the received message\n                receiveMessageFromConsumer(consumer);\n            });\n}\n\n'})}),"\n",(0,i.jsx)(s.h3,{id:"subscription-types",children:"Subscription types"}),"\n",(0,i.jsxs)(s.p,{children:["Pulsar has various ",(0,i.jsx)(s.a,{href:"concepts-messaging#subscription-types",children:"subscription types"})," to match different scenarios. A topic can have multiple subscriptions with different subscription types. However, a subscription can only have one subscription type at a time."]}),"\n",(0,i.jsx)(s.p,{children:"A subscription is identical with the subscription name; a subscription name can specify only one subscription type at a time. To change the subscription type, you should first stop all consumers of this subscription."}),"\n",(0,i.jsx)(s.p,{children:"Different subscription types have different message distribution modes. This section describes the differences of subscription types and how to use them."}),"\n",(0,i.jsx)(s.p,{children:'In order to better describe their differences, assuming you have a topic named "my-topic", and the producer has published 10 messages.'}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<String> producer = client.newProducer(Schema.STRING)\n        .topic("my-topic")\n        .enableBatching(false)\n        .create();\n// 3 messages with "key-1", 3 messages with "key-2", 2 messages with "key-3" and 2 messages with "key-4"\nproducer.newMessage().key("key-1").value("message-1-1").send();\nproducer.newMessage().key("key-1").value("message-1-2").send();\nproducer.newMessage().key("key-1").value("message-1-3").send();\nproducer.newMessage().key("key-2").value("message-2-1").send();\nproducer.newMessage().key("key-2").value("message-2-2").send();\nproducer.newMessage().key("key-2").value("message-2-3").send();\nproducer.newMessage().key("key-3").value("message-3-1").send();\nproducer.newMessage().key("key-3").value("message-3-2").send();\nproducer.newMessage().key("key-4").value("message-4-1").send();\nproducer.newMessage().key("key-4").value("message-4-2").send();\n\n'})}),"\n",(0,i.jsx)(s.h4,{id:"exclusive",children:"Exclusive"}),"\n",(0,i.jsxs)(s.p,{children:["Create a new consumer and subscribe with the ",(0,i.jsx)(s.code,{children:"Exclusive"})," subscription type."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Exclusive)\n        .subscribe()\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"Only the first consumer is allowed to the subscription, other consumers receive an error. The first consumer receives all 10 messages, and the consuming order is the same as the producing order."}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"If topic is a partitioned topic, the first consumer subscribes to all partitioned topics, other consumers are not assigned with partitions and receive an error."})}),"\n",(0,i.jsx)(s.h4,{id:"failover",children:"Failover"}),"\n",(0,i.jsxs)(s.p,{children:["Create new consumers and subscribe with the",(0,i.jsx)(s.code,{children:"Failover"})," subscription type."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Failover)\n        .subscribe()\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Failover)\n        .subscribe()\n//conumser1 is the active consumer, consumer2 is the standby consumer.\n//consumer1 receives 5 messages and then crashes, consumer2 takes over as an  active consumer.\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"Multiple consumers can attach to the same subscription, yet only the first consumer is active, and others are standby. When the active consumer is disconnected, messages will be dispatched to one of standby consumers, and the standby consumer then becomes active consumer."}),"\n",(0,i.jsx)(s.p,{children:"If the first active consumer is disconnected after receiving 5 messages, the standby consumer becomes active consumer. Consumer1 will receive:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-1", "message-1-1")\n("key-1", "message-1-2")\n("key-1", "message-1-3")\n("key-2", "message-2-1")\n("key-2", "message-2-2")\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"consumer2 will receive:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-2", "message-2-3")\n("key-3", "message-3-1")\n("key-3", "message-3-2")\n("key-4", "message-4-1")\n("key-4", "message-4-2")\n\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"If a topic is a partitioned topic, each partition has only one active consumer, messages of one partition are distributed to only one consumer, and messages of multiple partitions are distributed to multiple consumers."})}),"\n",(0,i.jsx)(s.h4,{id:"shared",children:"Shared"}),"\n",(0,i.jsxs)(s.p,{children:["Create new consumers and subscribe with ",(0,i.jsx)(s.code,{children:"Shared"})," subscription type."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Shared)\n        .subscribe()\n\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Shared)\n        .subscribe()\n//Both consumer1 and consumer2 are active consumers.\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"In shared subscription type, multiple consumers can attach to the same subscription and messages are delivered in a round robin distribution across consumers."}),"\n",(0,i.jsx)(s.p,{children:"If a broker dispatches only one message at a time, consumer1 receives the following information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-1", "message-1-1")\n("key-1", "message-1-3")\n("key-2", "message-2-2")\n("key-3", "message-3-1")\n("key-4", "message-4-1")\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"consumer2 receives the following information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-1", "message-1-2")\n("key-2", "message-2-1")\n("key-2", "message-2-3")\n("key-3", "message-3-2")\n("key-4", "message-4-2")\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Shared"})," subscription is different from ",(0,i.jsx)(s.code,{children:"Exclusive"})," and ",(0,i.jsx)(s.code,{children:"Failover"})," subscription types. ",(0,i.jsx)(s.code,{children:"Shared"})," subscription has better flexibility, but cannot provide order guarantee."]}),"\n",(0,i.jsx)(s.h4,{id:"key_shared",children:"Key_shared"}),"\n",(0,i.jsxs)(s.p,{children:["This is a new subscription type since 2.4.0 release. Create new consumers and subscribe with ",(0,i.jsx)(s.code,{children:"Key_Shared"})," subscription type."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nConsumer consumer1 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Key_Shared)\n        .subscribe()\n\nConsumer consumer2 = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscriptionType(SubscriptionType.Key_Shared)\n        .subscribe()\n//Both consumer1 and consumer2 are active consumers.\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Key_Shared"})," subscription is like ",(0,i.jsx)(s.code,{children:"Shared"})," subscription, all consumers can attach to the same subscription. But it is different from ",(0,i.jsx)(s.code,{children:"Key_Shared"})," subscription, messages with the same key are delivered to only one consumer in order. The possible distribution of messages between different consumers (by default we do not know in advance which keys will be assigned to a consumer, but a key will only be assigned to a consumer at the same time)."]}),"\n",(0,i.jsx)(s.p,{children:"consumer1 receives the following information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-1", "message-1-1")\n("key-1", "message-1-2")\n("key-1", "message-1-3")\n("key-3", "message-3-1")\n("key-3", "message-3-2")\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"consumer2 receives the following information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'\n("key-2", "message-2-1")\n("key-2", "message-2-2")\n("key-2", "message-2-3")\n("key-4", "message-4-1")\n("key-4", "message-4-2")\n\n'})}),"\n",(0,i.jsxs)(s.p,{children:["If batching is enabled at the producer side, messages with different keys are added to a batch by default. The broker will dispatch the batch to the consumer, so the default batch mechanism may break the Key_Shared subscription guaranteed message distribution semantics. The producer needs to use the ",(0,i.jsx)(s.code,{children:"KeyBasedBatcher"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer producer = client.newProducer()\n        .topic("my-topic")\n        .batcherBuilder(BatcherBuilder.KEY_BASED)\n        .create();\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"Or the producer can disable batching."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer producer = client.newProducer()\n        .topic("my-topic")\n        .enableBatching(false)\n        .create();\n\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"If the message key is not specified, messages without key are dispatched to one consumer in order by default."})}),"\n",(0,i.jsx)(s.h2,{id:"reader",children:"Reader"}),"\n",(0,i.jsxs)(s.p,{children:["With the ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/concepts-clients#reader-interface",children:"reader interface"}),', Pulsar clients can "manually position" themselves within a topic and reading all messages from a specified message onward. The Pulsar API for Java enables you to create ',(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/Reader",children:"Reader"})," objects by specifying a topic, a ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/MessageId",children:"MessageId"}),", and ",(0,i.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/org/apache/pulsar/client/api/ReaderConfiguration",children:"ReaderConfiguration"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nbyte[] msgIdBytes = // Some message ID byte array\nMessageId id = MessageId.fromByteArray(msgIdBytes);\nReader reader = pulsarClient.newReader()\n        .topic(topic)\n        .startMessageId(id)\n        .create();\n\nwhile (true) {\n    Message message = reader.readNext();\n    // Process message\n}\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In the example above, a ",(0,i.jsx)(s.code,{children:"Reader"})," object is instantiated for a specific topic and message (by ID); the reader iterates over each message in the topic after the message is identified by ",(0,i.jsx)(s.code,{children:"msgIdBytes"})," (how that value is obtained depends on the application)."]}),"\n",(0,i.jsxs)(s.p,{children:["The code sample above shows pointing the ",(0,i.jsx)(s.code,{children:"Reader"})," object to a specific message (by ID), but you can also use ",(0,i.jsx)(s.code,{children:"MessageId.earliest"})," to point to the earliest available message on the topic of ",(0,i.jsx)(s.code,{children:"MessageId.latest"})," to point to the most recent available message."]}),"\n",(0,i.jsxs)(s.p,{children:["When you create a reader, you can use the ",(0,i.jsx)(s.code,{children:"loadConf"})," configuration. The following parameters are available in ",(0,i.jsx)(s.code,{children:"loadConf"}),"."]}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Name"}),(0,i.jsx)(s.th,{children:(0,i.jsx)("div",{children:"Description"})}),(0,i.jsx)(s.th,{children:"Default"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"topicName"})}),(0,i.jsx)(s.td,{children:"Topic name."}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"int"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"receiverQueueSize"})}),(0,i.jsxs)(s.td,{children:["Size of a consumer's receiver queue.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"For example, the number of messages that can be accumulated by a consumer before an application calls ",(0,i.jsx)(s.code,{children:"Receive"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"A value higher than the default value increases consumer throughput, though at the expense of more memory utilization."]}),(0,i.jsx)(s.td,{children:"1000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"ReaderListener<T>"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"readerListener"})}),(0,i.jsx)(s.td,{children:"A listener that is called for message received."}),(0,i.jsx)(s.td,{children:"None"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"readerName"})}),(0,i.jsx)(s.td,{children:"Reader name."}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"subscriptionRolePrefix"})}),(0,i.jsx)(s.td,{children:"Prefix of subscription role."}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"CryptoKeyReader"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"cryptoKeyReader"})}),(0,i.jsx)(s.td,{children:"Interface that abstracts the access to a key store."}),(0,i.jsx)(s.td,{children:"null"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"ConsumerCryptoFailureAction"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"cryptoFailureAction"})}),(0,i.jsxs)(s.td,{children:["Consumer should take action when it receives a message that can not be decrypted.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"FAIL"}),": this is the default option to fail messages until crypto succeeds."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[" ",(0,i.jsx)(s.strong,{children:"DISCARD"}),": silently acknowledge and not deliver message to an application."]}),(0,i.jsx)("br",{}),(0,i.jsxs)("li",{children:[(0,i.jsx)(s.strong,{children:"CONSUME"}),": deliver encrypted messages to applications. It is the application's responsibility to decrypt the message.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"The message decompression fails. ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If messages contain batch messages, a client is not be able to retrieve individual messages in batch.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Delivered encrypted message contains ",(0,i.jsx)(s.code,{children:"EncryptionContext"})," which contains encryption and compression information in it using which application can decrypt consumed message payload."]})]}),(0,i.jsx)(s.td,{children:(0,i.jsx)("li",{children:"ConsumerCryptoFailureAction.FAIL"})})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"readCompacted"})}),(0,i.jsxs)(s.td,{children:["If enabling ",(0,i.jsx)(s.code,{children:"readCompacted"}),", a consumer reads messages from a compacted topic rather than a full message backlog of a topic.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," A consumer only sees the latest value for each key in the compacted topic, up until reaching the point in the topic message when compacting backlog. Beyond that point, send messages as normal.",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),(0,i.jsx)(s.code,{children:"readCompacted"})," can only be enabled on subscriptions to persistent topics, which have a single active consumer (for example, failure or exclusive subscriptions). ",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"Attempting to enable it on subscriptions to non-persistent topics or on shared subscriptions leads to a subscription call throwing a ",(0,i.jsx)(s.code,{children:"PulsarClientException"}),"."]}),(0,i.jsx)(s.td,{children:"false"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"resetIncludeHead"})}),(0,i.jsxs)(s.td,{children:["If set to true, the first message to be returned is the one specified by ",(0,i.jsx)(s.code,{children:"messageId"}),".",(0,i.jsx)("br",{}),(0,i.jsx)("br",{}),"If set to false, the first message to be returned is the one next to the message specified by ",(0,i.jsx)(s.code,{children:"messageId"}),"."]}),(0,i.jsx)(s.td,{children:"false"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"sticky-key-range-reader",children:"Sticky key range reader"}),"\n",(0,i.jsx)(s.p,{children:"In sticky key range reader, broker will only dispatch messages which hash of the message key contains by the specified key hash range. Multiple key hash ranges can be specified on a reader."}),"\n",(0,i.jsx)(s.p,{children:"The following is an example to create a sticky key range reader."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\npulsarClient.newReader()\n        .topic(topic)\n        .startMessageId(MessageId.earliest)\n        .keyHashRange(Range.of(0, 10000), Range.of(20001, 30000))\n        .create();\n\n"})}),"\n",(0,i.jsx)(s.p,{children:"Total hash range size is 65536, so the max end of the range should be less than or equal to 65535."}),"\n",(0,i.jsx)(s.h2,{id:"schema",children:"Schema"}),"\n",(0,i.jsxs)(s.p,{children:['In Pulsar, all message data consists of byte arrays "under the hood." ',(0,i.jsx)(s.a,{href:"/docs/2.6.1/schema-get-started",children:"Message schemas"})," enable you to use other types of data when constructing and handling messages (from simple types like strings to more complex, application-specific types). If you construct, say, a ",(0,i.jsx)(s.a,{href:"#producers",children:"producer"})," without specifying a schema, then the producer can only produce messages of type ",(0,i.jsx)(s.code,{children:"byte[]"}),". The following is an example."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\nProducer<byte[]> producer = client.newProducer()\n        .topic(topic)\n        .create();\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The producer above is equivalent to a ",(0,i.jsx)(s.code,{children:"Producer<byte[]>"})," (in fact, you should ",(0,i.jsx)(s.em,{children:"always"})," explicitly specify the type). If you'd like to use a producer for a different type of data, you'll need to specify a ",(0,i.jsx)(s.strong,{children:"schema"})," that informs Pulsar which data type will be transmitted over the ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/reference-terminology#topic",children:"topic"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"schema-example",children:"Schema example"}),"\n",(0,i.jsxs)(s.p,{children:["Let's say that you have a ",(0,i.jsx)(s.code,{children:"SensorReading"})," class that you'd like to transmit over a Pulsar topic:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:"\npublic class SensorReading {\n    public float temperature;\n\n    public SensorReading(float temperature) {\n        this.temperature = temperature;\n    }\n\n    // A no-arg constructor is required\n    public SensorReading() {\n    }\n\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public void setTemperature(float temperature) {\n        this.temperature = temperature;\n    }\n}\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["You could then create a ",(0,i.jsx)(s.code,{children:"Producer<SensorReading>"})," (or ",(0,i.jsx)(s.code,{children:"Consumer<SensorReading>"}),") like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<SensorReading> producer = client.newProducer(JSONSchema.of(SensorReading.class))\n        .topic("sensor-readings")\n        .create();\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"The following schema formats are currently available for Java:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["No schema or the byte array schema (which can be applied using ",(0,i.jsx)(s.code,{children:"Schema.BYTES"}),"):"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<byte[]> bytesProducer = client.newProducer(Schema.BYTES)\n    .topic("some-raw-bytes-topic")\n    .create();\n\n'})}),"\n",(0,i.jsx)(s.p,{children:"Or, equivalently:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<byte[]> bytesProducer = client.newProducer()\n    .topic("some-raw-bytes-topic")\n    .create();\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"String"})," for normal UTF-8-encoded string data. Apply the schema using ",(0,i.jsx)(s.code,{children:"Schema.STRING"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<String> stringProducer = client.newProducer(Schema.STRING)\n    .topic("some-string-topic")\n    .create();\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Create JSON schemas for POJOs using ",(0,i.jsx)(s.code,{children:"Schema.JSON"}),". The following is an example."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<MyPojo> pojoProducer = client.newProducer(Schema.JSON(MyPojo.class))\n    .topic("some-pojo-topic")\n    .create();\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Generate Protobuf schemas using ",(0,i.jsx)(s.code,{children:"Schema.PROTOBUF"}),". The following example shows how to create the Protobuf schema and use it to instantiate a new producer:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<MyProtobuf> protobufProducer = client.newProducer(Schema.PROTOBUF(MyProtobuf.class))\n    .topic("some-protobuf-topic")\n    .create();\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Define Avro schemas with ",(0,i.jsx)(s.code,{children:"Schema.AVRO"}),". The following code snippet demonstrates how to create and use Avro schema."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nProducer<MyAvro> avroProducer = client.newProducer(Schema.AVRO(MyAvro.class))\n    .topic("some-avro-topic")\n    .create();\n\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(s.p,{children:["Pulsar currently supports multiple authentication schemes: ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-tls-authentication",children:"TLS"}),", ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-athenz",children:"Athenz"}),", ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-kerberos",children:"Kerberos"}),", and ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-jwt",children:"JSON Web Token (JWT)"}),". You can use the Pulsar Java client with all of them."]}),"\n",(0,i.jsx)(s.h3,{id:"tls-authentication",children:"TLS Authentication"}),"\n",(0,i.jsxs)(s.p,{children:["To use ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-tls-authentication",children:"TLS"}),", ",(0,i.jsx)(s.code,{children:"enableTls"}),' method is deprecated and you need to use "pulsar+ssl://" in serviceUrl to enable, point your Pulsar client to a TLS cert path, and provide paths to cert and key files.']}),"\n",(0,i.jsx)(s.p,{children:"The following is an example."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nMap<String, String> authParams = new HashMap();\nauthParams.put("tlsCertFile", "/path/to/client-cert.pem");\nauthParams.put("tlsKeyFile", "/path/to/client-key.pem");\n\nAuthentication tlsAuth = AuthenticationFactory\n        .create(AuthenticationTls.class.getName(), authParams);\n\nPulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar+ssl://my-broker.com:6651")\n        .tlsTrustCertsFilePath("/path/to/cacert.pem")\n        .authentication(tlsAuth)\n        .build();\n\n'})}),"\n",(0,i.jsx)(s.h3,{id:"athenz",children:"Athenz"}),"\n",(0,i.jsxs)(s.p,{children:["To use ",(0,i.jsx)(s.a,{href:"/docs/2.6.1/security-athenz",children:"Athenz"})," as an authentication provider, you need to ",(0,i.jsx)(s.a,{href:"#tls-authentication",children:"use TLS"})," and provide values for four parameters in a hash:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"tenantDomain"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"tenantService"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"providerDomain"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"privateKey"})}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["You can also set an optional ",(0,i.jsx)(s.code,{children:"keyId"}),". The following is an example."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'\nMap<String, String> authParams = new HashMap();\nauthParams.put("tenantDomain", "shopping"); // Tenant domain name\nauthParams.put("tenantService", "some_app"); // Tenant service name\nauthParams.put("providerDomain", "pulsar"); // Provider domain name\nauthParams.put("privateKey", "file:///path/to/private.pem"); // Tenant private key path\nauthParams.put("keyId", "v1"); // Key id for the tenant private key (optional, default: "0")\n\nAuthentication athenzAuth = AuthenticationFactory\n        .create(AuthenticationAthenz.class.getName(), authParams);\n\nPulsarClient client = PulsarClient.builder()\n        .serviceUrl("pulsar+ssl://my-broker.com:6651")\n        .tlsTrustCertsFilePath("/path/to/cacert.pem")\n        .authentication(athenzAuth)\n        .build();\n\n'})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.h4,{id:"supported-pattern-formats",children:"Supported pattern formats"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"privateKey"})," parameter supports the following three pattern formats:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"file:///path/to/file"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"file:/path/to/file"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"data:application/x-pem-file;base64,<base64-encoded value>"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var r=n(96540);const i={},t=r.createContext(i);function c(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);