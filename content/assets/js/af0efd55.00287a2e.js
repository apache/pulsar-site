"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[82835],{35293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"functions-develop-serde","title":"Use SerDe","description":"Learn to develop functions using Serialization and Deserialization in Pulsar.","source":"@site/versioned_docs/version-3.2.x/functions-develop-serde.md","sourceDirName":".","slug":"/functions-develop-serde","permalink":"/docs/3.2.x/functions-develop-serde","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.2.x/functions-develop-serde.md","tags":[],"version":"3.2.x","frontMatter":{"id":"functions-develop-serde","title":"Use SerDe","sidebar_label":"Use SerDe","description":"Learn to develop functions using Serialization and Deserialization in Pulsar."},"sidebar":"docsSidebar","previous":{"title":"Use schema registry","permalink":"/docs/3.2.x/functions-develop-schema-registry"},"next":{"title":"Tutorials","permalink":"/docs/3.2.x/functions-develop-tutorial"}}');var i=t(74848),r=t(28453);const o={id:"functions-develop-serde",title:"Use SerDe",sidebar_label:"Use SerDe",description:"Learn to develop functions using Serialization and Deserialization in Pulsar."},c=void 0,a={},l=[{value:"Use SerDe for Java functions",id:"use-serde-for-java-functions",level:2},{value:"Use SerDe for Python functions",id:"use-serde-for-python-functions",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Pulsar Functions use SerDe (",(0,i.jsx)(n.strong,{children:"Ser"}),"ialization and ",(0,i.jsx)(n.strong,{children:"De"}),"serialization) when publishing data to or consuming data from Pulsar topics. How SerDe works by default depends on the language you use (Java or Python) for a particular function. In both languages, however, you can write custom SerDe logic for more complex, application-specific types."]}),"\n",(0,i.jsx)(n.h2,{id:"use-serde-for-java-functions",children:"Use SerDe for Java functions"}),"\n",(0,i.jsxs)(n.p,{children:["The following basic Java types are built-in and supported by default for Java functions: ",(0,i.jsx)(n.code,{children:"string"}),", ",(0,i.jsx)(n.code,{children:"double"}),", ",(0,i.jsx)(n.code,{children:"integer"}),", ",(0,i.jsx)(n.code,{children:"float"}),", ",(0,i.jsx)(n.code,{children:"long"}),", ",(0,i.jsx)(n.code,{children:"short"}),", and ",(0,i.jsx)(n.code,{children:"byte"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"To customize Java types, you need to implement the following interface."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface SerDe<T> {\n    T deserialize(byte[] input);\n    byte[] serialize(T input);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"SerDe works in the following ways for Java functions."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the input and output topics have a schema, Pulsar Functions use the schema for SerDe."}),"\n",(0,i.jsxs)(n.li,{children:["If the input or output topics do not exist, Pulsar Functions adopt the following rules to determine SerDe:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the schema type is specified, Pulsar Functions use the specified schema type."}),"\n",(0,i.jsxs)(n.li,{children:["If SerDe is specified, Pulsar Functions use the specified SerDe, and the schema type for input and output topics is ",(0,i.jsx)(n.code,{children:"byte"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If neither the schema type nor SerDe is specified, Pulsar Functions use the built-in SerDe. For non-primitive schema types, the built-in SerDe serializes and deserializes objects in the ",(0,i.jsx)(n.code,{children:"JSON"})," format."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, imagine that you're writing a function that processes tweet objects. You can refer to the following example of the ",(0,i.jsx)(n.code,{children:"Tweet"})," class in Java."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Tweet {\n    private String username;\n    private String tweetContent;\n\n    public Tweet(String username, String tweetContent) {\n        this.username = username;\n        this.tweetContent = tweetContent;\n    }\n\n    // Standard setters and getters\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To pass ",(0,i.jsx)(n.code,{children:"Tweet"})," objects directly between functions, you need to provide a custom SerDe class. In the example below, ",(0,i.jsx)(n.code,{children:"Tweet"})," objects are basically strings, and username and tweet content are separated by ",(0,i.jsx)(n.code,{children:"|"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.example.serde;\n\nimport org.apache.pulsar.functions.api.SerDe;\n\nimport java.util.regex.Pattern;\n\npublic class TweetSerde implements SerDe<Tweet> {\n    public Tweet deserialize(byte[] input) {\n        String s = new String(input);\n        String[] fields = s.split(Pattern.quote("|"));\n        return new Tweet(fields[0], fields[1]);\n    }\n\n    public byte[] serialize(Tweet input) {\n        return "%s|%s".format(input.getUsername(), input.getTweetContent()).getBytes();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To apply a customized SerDe to a particular function, you need to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Package the ",(0,i.jsx)(n.code,{children:"Tweet"})," and ",(0,i.jsx)(n.code,{children:"TweetSerde"})," classes into a JAR."]}),"\n",(0,i.jsx)(n.li,{children:"Specify a path to the JAR and SerDe class names when deploying the function."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The following is an example of using the ",(0,i.jsx)(n.code,{children:"create"})," command to deploy a function by applying a customized SerDe."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:" bin/pulsar-admin functions create \\\n  --jar /path/to/your.jar \\\n  --output-serde-classname com.example.serde.TweetSerde \\\n  # Other function attributes\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Custom SerDe classes must be packaged with your function JARs."})}),"\n",(0,i.jsx)(n.h2,{id:"use-serde-for-python-functions",children:"Use SerDe for Python functions"}),"\n",(0,i.jsx)(n.p,{children:"In Python, the default SerDe is an identity, meaning that the type is serialized as whatever type the function returns."}),"\n",(0,i.jsxs)(n.p,{children:["For example, you can specify the SerDe as follows when deploying a function in ",(0,i.jsx)(n.a,{href:"/docs/3.2.x/functions-deploy-cluster",children:"cluster mode"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-admin functions create \\\n  --tenant public \\\n  --namespace default \\\n  --name my_function \\\n  --py my_function.py \\\n  --classname my_function.MyFunction \\\n  --custom-serde-inputs \'{"input-topic-1":"Serde1","input-topic-2":"Serde2"}\' \\\n  --output-serde-classname Serde3 \\\n  --output output-topic-1\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This case contains two input topics: ",(0,i.jsx)(n.code,{children:"input-topic-1"})," and ",(0,i.jsx)(n.code,{children:"input-topic-2"}),", each of which is mapped to a different SerDe class (the mapping must be specified as a JSON string). The output topic ",(0,i.jsx)(n.code,{children:"output-topic-1"})," uses the ",(0,i.jsx)(n.code,{children:"Serde3"})," class for SerDe."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"All function-related logic, including processing and SerDe classes, must be contained within a single Python file."})}),"\n",(0,i.jsx)(n.p,{children:"The table outlines three SerDe options for Python functions."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"SerDe option"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Use case"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"IdentitySerde"})," (default)"]}),(0,i.jsxs)(n.td,{children:["Use the ",(0,i.jsx)(n.code,{children:"IdentitySerde"}),", which leaves the data unchanged. Creating or running a function without explicitly specifying SerDe means that this option is used."]}),(0,i.jsx)(n.td,{children:"When you work with simple types like strings, booleans, integers."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PickleSerDe"})}),(0,i.jsxs)(n.td,{children:["Use the ",(0,i.jsx)(n.code,{children:"PickleSerDe"}),", which uses Python ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/pickle.html",children:(0,i.jsx)(n.code,{children:"pickle"})})," for SerDe."]}),(0,i.jsxs)(n.td,{children:['When you work with complex, application-specific types and are comfortable with the "best-effort" approach of ',(0,i.jsx)(n.code,{children:"pickle"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Custom SerDe"})}),(0,i.jsxs)(n.td,{children:["Create a custom SerDe class by implementing the baseline ",(0,i.jsx)(n.code,{children:"SerDe"})," class, which has just two methods:",(0,i.jsx)("br",{}),"* ",(0,i.jsx)(n.code,{children:"serialize"})," for converting the object into bytes.",(0,i.jsx)("br",{}),"* ",(0,i.jsx)(n.code,{children:"deserialize"})," for converting bytes into an object of the required application-specific type."]}),(0,i.jsx)(n.td,{children:"When you require explicit control over SerDe, potentially for performance or data compatibility purposes."})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["For example, imagine that you are writing a function that processes tweet objects. You can refer to the following example of the ",(0,i.jsx)(n.code,{children:"Tweet"})," class in Python."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Tweet(object):\n    def __init__(self, username, tweet_content):\n        self.username = username\n        self.tweet_content = tweet_content\n"})}),"\n",(0,i.jsx)(n.p,{children:"To use this class in Pulsar Functions, you have two options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Specify ",(0,i.jsx)(n.code,{children:"PickleSerDe"}),", which applies the ",(0,i.jsx)(n.code,{children:"pickle"})," library for SerDe."]}),"\n",(0,i.jsx)(n.li,{children:"Create your own SerDe class. The following is an example."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pulsar import SerDe\n\nclass TweetSerDe(SerDe):\n\n    def serialize(self, input):\n        return bytes(\"{0}|{1}\".format(input.username, input.tweet_content))\n\n    def deserialize(self, input_bytes):\n        tweet_components = str(input_bytes).split('|')\n        return Tweet(tweet_components[0], tweet_componentsp[1])\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more details, see ",(0,i.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-functions/python-examples/custom_object_function.py",children:"code example"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);