"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[49453],{73555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"io-alluxio","title":"Alluxio sink connector","description":"You can download all the Pulsar connectors on download page.","source":"@site/docs/io-alluxio.md","sourceDirName":".","slug":"/io-alluxio","permalink":"/docs/next/io-alluxio","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/docs/io-alluxio.md","tags":[],"version":"current","frontMatter":{"id":"io-alluxio","title":"Alluxio sink connector","sidebar_label":"Alluxio sink connector"}}');var r=t(74848),l=t(28453);const s={id:"io-alluxio",title:"Alluxio sink connector",sidebar_label:"Alluxio sink connector"},o=void 0,d={},c=[{value:"Sink",id:"sink",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Property",id:"property",level:3},{value:"Example",id:"example",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can download all the Pulsar connectors on ",(0,r.jsx)(n.a,{href:"pathname:///download",children:"download page"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"sink",children:"Sink"}),"\n",(0,r.jsx)(n.p,{children:"The Alluxio sink connector pulls messages from Pulsar topics and persists the messages to an Alluxio directory."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The configuration of the Alluxio sink connector has the following properties."}),"\n",(0,r.jsx)(n.h3,{id:"property",children:"Property"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"alluxioMasterHost"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsx)(n.td,{children:"The hostname of Alluxio master."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"alluxioMasterPort"})}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"19998"}),(0,r.jsx)(n.td,{children:"The port that Alluxio master node runs on."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"alluxioDir"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsx)(n.td,{children:"The Alluxio directory from which files should be read from or written to."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"securityLoginUser"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsxs)(n.td,{children:["When ",(0,r.jsx)(n.code,{children:"alluxio.security.authentication.type"})," is set to ",(0,r.jsx)(n.code,{children:"SIMPLE"})," or ",(0,r.jsx)(n.code,{children:"CUSTOM"}),", user application uses this property to indicate the user requesting Alluxio service. If it is not set explicitly, the OS login user is used."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"filePrefix"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsx)(n.td,{children:"The prefix of the files to create in the Alluxio directory (e.g. a value of 'TopicA' results in files named topicA-, topicA-, etc being produced)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fileExtension"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsx)(n.td,{children:"The extension to add to the files written to Alluxio (e.g. '.txt')."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lineSeparator"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:'"" (empty string)'}),(0,r.jsx)(n.td,{children:"The character used to separate records in a text file. If no value is provided, then the content from all of the records is concatenated together in one continuous byte array."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rotationRecords"})}),(0,r.jsx)(n.td,{children:"long"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"10000"}),(0,r.jsx)(n.td,{children:"The number records of Alluxio file rotation."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rotationInterval"})}),(0,r.jsx)(n.td,{children:"long"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"-1"}),(0,r.jsx)(n.td,{children:"The interval to rotate a Alluxio file (in milliseconds)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"schemaEnable"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"Sets whether the Sink has to take into account the Schema or if it should simply copy the raw message to Alluxio."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"writeType"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MUST_CACHE"})}),(0,r.jsxs)(n.td,{children:["Default write type when creating Alluxio files. Valid options are ",(0,r.jsx)(n.code,{children:"MUST_CACHE"})," (write only goes to Alluxio and must be stored in Alluxio), ",(0,r.jsx)(n.code,{children:"CACHE_THROUGH"})," (try to cache, write to UnderFS synchronously), ",(0,r.jsx)(n.code,{children:"THROUGH"})," (no cache, write to UnderFS synchronously)."]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Before using the Alluxio sink connector, you need to create a configuration file in the path you will start Pulsar service (i.e. ",(0,r.jsx)(n.code,{children:"PULSAR_HOME"}),") through one of the following methods."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "alluxioMasterHost": "localhost",\n    "alluxioMasterPort": "19998",\n    "alluxioDir": "pulsar",\n    "filePrefix": "TopicA",\n    "fileExtension": ".txt",\n    "lineSeparator": "\\n",\n    "rotationRecords": "100",\n    "rotationInterval": "-1"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"YAML"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'configs:\n    alluxioMasterHost: "localhost"\n    alluxioMasterPort: "19998"\n    alluxioDir: "pulsar"\n    filePrefix: "TopicA"\n    fileExtension: ".txt"\n    lineSeparator: "\\n"\n    rotationRecords: 100\n    rotationInterval: "-1"\n'})}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);