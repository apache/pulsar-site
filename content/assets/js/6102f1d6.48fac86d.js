"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[54035],{54270:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"deploy-monitoring","title":"Monitor","description":"You can use different ways to monitor a Pulsar cluster, exposing both metrics related to the usage of topics and the overall health of the individual components of the cluster.","source":"@site/docs/deploy-monitoring.md","sourceDirName":".","slug":"/deploy-monitoring","permalink":"/docs/next/deploy-monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/docs/deploy-monitoring.md","tags":[],"version":"current","frontMatter":{"id":"deploy-monitoring","title":"Monitor","sidebar_label":"Monitoring"},"sidebar":"docsSidebar","previous":{"title":"Metrics","permalink":"/docs/next/reference-metrics"},"next":{"title":"OpenTelemetry Metrics","permalink":"/docs/next/reference-metrics-opentelemetry"}}');var s=r(74848),o=r(28453);const i={id:"deploy-monitoring",title:"Monitor",sidebar_label:"Monitoring"},a=void 0,l={},c=[{value:"Collect metrics",id:"collect-metrics",level:2},{value:"Broker stats",id:"broker-stats",level:3},{value:"ZooKeeper stats",id:"zookeeper-stats",level:3},{value:"BookKeeper stats",id:"bookkeeper-stats",level:3},{value:"Managed cursor acknowledgment state",id:"managed-cursor-acknowledgment-state",level:3},{value:"Function and connector stats",id:"function-and-connector-stats",level:3},{value:"Configure Prometheus",id:"configure-prometheus",level:2},{value:"Dashboards",id:"dashboards",level:2},{value:"Pulsar per-topic dashboard",id:"pulsar-per-topic-dashboard",level:3},{value:"Grafana",id:"grafana",level:3},{value:"Alerting rules",id:"alerting-rules",level:2},{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"Status",id:"status",level:3},{value:"Scope",id:"scope",level:3},{value:"OpenTelemetry Configuration",id:"opentelemetry-configuration",level:3},{value:"Telemetry Enablement",id:"telemetry-enablement",level:4},{value:"Exporter Configuration",id:"exporter-configuration",level:4},{value:"OTLP",id:"otlp",level:5},{value:"Remote Collector Considerations",id:"remote-collector-considerations",level:6},{value:"Prometheus",id:"prometheus",level:5},{value:"Resource Attributes Configuration",id:"resource-attributes-configuration",level:4},{value:"Attribute Cardinality Configuration",id:"attribute-cardinality-configuration",level:4},{value:"Memory Reuse Configuration",id:"memory-reuse-configuration",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"You can use different ways to monitor a Pulsar cluster, exposing both metrics related to the usage of topics and the overall health of the individual components of the cluster."}),"\n",(0,s.jsx)(t.h2,{id:"collect-metrics",children:"Collect metrics"}),"\n",(0,s.jsx)(t.p,{children:"You can collect broker stats, ZooKeeper stats, and BookKeeper stats."}),"\n",(0,s.jsx)(t.h3,{id:"broker-stats",children:"Broker stats"}),"\n",(0,s.jsx)(t.p,{children:"You can collect Pulsar broker metrics from brokers and export the metrics in JSON format. The Pulsar broker metrics mainly have two types:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Destination dumps"}),", which contain stats for each topic. You can fetch the destination dumps using the command below:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"bin/pulsar-admin broker-stats destinations\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Broker metrics, which contain the broker information and topics stats aggregated at the namespace level. You can fetch the broker metrics by using the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"bin/pulsar-admin broker-stats monitoring-metrics\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"All the message rates are updated every minute."}),"\n",(0,s.jsxs)(t.p,{children:["The aggregated broker metrics are also exposed in the ",(0,s.jsx)(t.a,{href:"https://prometheus.io",children:"Prometheus"})," format at:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"http://$BROKER_ADDRESS:8080/metrics/\n"})}),"\n",(0,s.jsx)(t.h3,{id:"zookeeper-stats",children:"ZooKeeper stats"}),"\n",(0,s.jsx)(t.p,{children:"The local ZooKeeper, configuration store server and clients that are shipped with Pulsar can expose detailed stats through Prometheus."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"http://$LOCAL_ZK_SERVER:8000/metrics\nhttp://$GLOBAL_ZK_SERVER:8001/metrics\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The default port of local ZooKeeper is ",(0,s.jsx)(t.code,{children:"8000"})," and the default port of the configuration store is ",(0,s.jsx)(t.code,{children:"8001"}),". You can use a different stats port by configuring ",(0,s.jsx)(t.code,{children:"metricsProvider.httpPort"})," in the ",(0,s.jsx)(t.code,{children:"conf/zookeeper.conf"})," file."]}),"\n",(0,s.jsx)(t.h3,{id:"bookkeeper-stats",children:"BookKeeper stats"}),"\n",(0,s.jsxs)(t.p,{children:["You can configure the stats frameworks for BookKeeper by modifying the ",(0,s.jsx)(t.code,{children:"statsProviderClass"})," in the ",(0,s.jsx)(t.code,{children:"conf/bookkeeper.conf"})," file."]}),"\n",(0,s.jsx)(t.p,{children:"The default BookKeeper configuration enables the Prometheus exporter. The configuration is included with Pulsar distribution."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"http://$BOOKIE_ADDRESS:8000/metrics\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The default port for bookie is ",(0,s.jsx)(t.code,{children:"8000"}),". You can change the port by configuring ",(0,s.jsx)(t.code,{children:"prometheusStatsHttpPort"})," in the ",(0,s.jsx)(t.code,{children:"conf/bookkeeper.conf"})," file."]}),"\n",(0,s.jsx)(t.h3,{id:"managed-cursor-acknowledgment-state",children:"Managed cursor acknowledgment state"}),"\n",(0,s.jsx)(t.p,{children:"The acknowledgment state is persistent to the ledger first. When the acknowledgment state fails to be persistent to the ledger, they are persistent to ZooKeeper. To track the stats of acknowledgment, you can configure the metrics for the managed cursor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'pulsar_ml_cursor_persistLedgerSucceed(namespace=", ledger_name="", cursor_name:")\npulsar_ml_cursor_persistLedgerErrors(namespace="", ledger_name="", cursor_name:"")\npulsar_ml_cursor_persistZookeeperSucceed(namespace="", ledger_name="", cursor_name:"")\npulsar_ml_cursor_persistZookeeperErrors(namespace="", ledger_name="", cursor_name:"")\npulsar_ml_cursor_nonContiguousDeletedMessagesRange(namespace="", ledger_name="", cursor_name:"")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Those metrics are added in the Prometheus interface, you can monitor and check the metrics stats in Grafana."}),"\n",(0,s.jsx)(t.h3,{id:"function-and-connector-stats",children:"Function and connector stats"}),"\n",(0,s.jsxs)(t.p,{children:["You can collect functions worker stats from ",(0,s.jsx)(t.code,{children:"functions-worker"})," and export the metrics in JSON formats, which contain functions worker JVM metrics."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"pulsar-admin functions-worker monitoring-metrics\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can collect functions and connectors metrics from ",(0,s.jsx)(t.code,{children:"functions-worker"})," and export the metrics in JSON formats."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"pulsar-admin functions-worker function-stats\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The aggregated functions and connectors metrics can be exposed in Prometheus formats as below. You can get ",(0,s.jsx)(t.a,{href:"/docs/next/functions-worker",children:(0,s.jsx)(t.code,{children:"FUNCTIONS_WORKER_ADDRESS"})})," and ",(0,s.jsx)(t.code,{children:"WORKER_PORT"})," from the ",(0,s.jsx)(t.code,{children:"functions_worker.yml"})," file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"http://$FUNCTIONS_WORKER_ADDRESS:$WORKER_PORT/metrics:\n"})}),"\n",(0,s.jsx)(t.h2,{id:"configure-prometheus",children:"Configure Prometheus"}),"\n",(0,s.jsxs)(t.p,{children:["You can use Prometheus to collect all the metrics exposed for Pulsar components and set up ",(0,s.jsx)(t.a,{href:"https://grafana.com/",children:"Grafana"})," dashboards to display the metrics and monitor your Pulsar cluster. For details, refer to ",(0,s.jsx)(t.a,{href:"https://prometheus.io/docs/introduction/getting_started/",children:"Prometheus guide"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["When you run Pulsar on bare metal, you can provide the list of nodes to be probed. When you deploy Pulsar in a Kubernetes cluster, the monitoring is set up automatically. For details, refer to ",(0,s.jsx)(t.a,{href:"/docs/next/helm-deploy",children:"Kubernetes instructions"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"dashboards",children:"Dashboards"}),"\n",(0,s.jsx)(t.p,{children:"When you collect time-series statistics, the major problem is to make sure the number of dimensions attached to the data does not explode. Thus you only need to collect time series of metrics aggregated at the namespace level."}),"\n",(0,s.jsx)(t.h3,{id:"pulsar-per-topic-dashboard",children:"Pulsar per-topic dashboard"}),"\n",(0,s.jsxs)(t.p,{children:["The per-topic dashboard instructions are available at ",(0,s.jsx)(t.a,{href:"/docs/next/administration-pulsar-manager",children:"Pulsar manager"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"grafana",children:"Grafana"}),"\n",(0,s.jsx)(t.p,{children:"You can use Grafana to create a dashboard driven by the data that is stored in Prometheus."}),"\n",(0,s.jsxs)(t.p,{children:["When you deploy Pulsar on Kubernetes with the Pulsar Helm Chart, a ",(0,s.jsx)(t.code,{children:"pulsar-grafana"})," Docker image is enabled by default. You can use the docker image with the principal dashboards."]}),"\n",(0,s.jsx)(t.p,{children:"The following are some Grafana dashboards examples:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/next/deploy-monitoring#grafana",children:"pulsar-grafana"}),": a Grafana dashboard that displays metrics collected in Prometheus for Pulsar clusters running on Kubernetes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/streamnative/apache-pulsar-grafana-dashboard",children:"apache-pulsar-grafana-dashboard"}),": a collection of Grafana dashboard templates for different Pulsar components running on both Kubernetes and on-premise machines."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"alerting-rules",children:"Alerting rules"}),"\n",(0,s.jsxs)(t.p,{children:["You can set alerting rules according to your Pulsar environment. To configure alerting rules for Apache Pulsar, refer to ",(0,s.jsx)(t.a,{href:"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/",children:"alerting rules"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,s.jsx)(t.h3,{id:"status",children:"Status"}),"\n",(0,s.jsxs)(t.p,{children:["Pulsar emits OpenTelemetry metrics starting from version 3.3.0. OpenTelemetry log and trace signals are not exposed by\nPulsar. OpenTelemetry support is currently ",(0,s.jsx)(t.strong,{children:"experimental"})," and complements the pre-existing Prometheus metric system,\nwith the goal of eventually replacing it. The metrics it exposes are semantically equivalent to the Prometheus metrics."]}),"\n",(0,s.jsxs)(t.p,{children:["For a detailed list of OpenTelemetry metrics exposed by Pulsar, refer to ",(0,s.jsx)(t.a,{href:"/docs/next/reference-metrics-opentelemetry",children:"OpenTelemetry Metrics"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"scope",children:"Scope"}),"\n",(0,s.jsx)(t.p,{children:"Pulsar OpenTelemetry metrics are gradually being added for the broker only. Support for the proxy and function worker is\nplanned for a future release."}),"\n",(0,s.jsx)(t.h3,{id:"opentelemetry-configuration",children:"OpenTelemetry Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["Pulsar natively supports OpenTelemetry via manual instrumentation, instead of relying on the OpenTelemetry automatic\ninstrumentation agent. Pulsar uses the auto-configuration ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md",children:"extension"}),"\nof OpenTelemetry to manage the SDK configuration. The extension allows parameter input from environment variables and\nJava system properties. The instructions below rely on environment variables, but can be adapted to use system\nproperties too. These variables must be exposed to the Pulsar process via the respective deployment method."]}),"\n",(0,s.jsxs)(t.p,{children:["Note that the experimental ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#file-configuration",children:"file based configuration"}),"\nis not currently supported by Pulsar."]}),"\n",(0,s.jsx)(t.h4,{id:"telemetry-enablement",children:"Telemetry Enablement"}),"\n",(0,s.jsxs)(t.p,{children:["The experimental OpenTelemetry feature is explicitly disabled by default in Pulsar. Set environment variable\n",(0,s.jsx)(t.code,{children:"OTEL_SDK_DISABLED=false"})," to enable the SDK. When disabled, metrics will not be collected nor exported."]}),"\n",(0,s.jsx)(t.h4,{id:"exporter-configuration",children:"Exporter Configuration"}),"\n",(0,s.jsx)(t.p,{children:"Exporters using the native OpenTelemetry Protocol and Prometheus are included in the Pulsar distribution assembly by\ndefault and can be used out-of-the-box. Other exporters are not currently supported."}),"\n",(0,s.jsx)(t.h5,{id:"otlp",children:"OTLP"}),"\n",(0,s.jsxs)(t.p,{children:["The native OTLP exporter is the recommended way to obtain metrics out of Pulsar as the Apache Pulsar community is\nworking on modifying it (and not Prometheus) to be highly performant. Pulsar defaults to using the OTLP exporter unless\notherwise overridden by environment variable ",(0,s.jsx)(t.code,{children:"OTEL_METRICS_EXPORTER"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["To use the exporter, set environment variable ",(0,s.jsx)(t.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})," to the respective URL endpoint. This should\nrepresent the location of the OpenTelemetry ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/collector/",children:"Collector"}),". Pulsar supports both\ngRPC and HTTP endpoints."]}),"\n",(0,s.jsxs)(t.p,{children:["The exporter periodically collects and sends metrics. This process occurs every 60 seconds by default, and can be\ncontrolled by changing environment variable ",(0,s.jsx)(t.code,{children:"OTEL_METRIC_EXPORT_INTERVAL"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Additional parameters that can be configured, such as authentication, compression, and timeout, are described in the\nexporter ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#otlp-exporter-span-metric-and-log-exporters",children:"documentation"}),"."]}),"\n",(0,s.jsx)(t.h6,{id:"remote-collector-considerations",children:"Remote Collector Considerations"}),"\n",(0,s.jsxs)(t.p,{children:["If the remote OTLP collector sends data downstream to Prometheus or a Prometheus like-system, it is recommended to copy\nOpenTelemetry resource attribute ",(0,s.jsx)(t.code,{children:"pulsar.cluster"})," to Prometheus labels on each time-series (metric). This can be done\nusing ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/collector/transforming-telemetry/",children:"collector transformations"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The example below leverages the ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl",children:"OpenTelemetry Transformation Language"}),"\nand the ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor",children:"transform processor"}),"\nto achieve this."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'metrics:\n  set(attributes["pulsar_cluster"], resource.attributes["pulsar.cluster"])\n'})}),"\n",(0,s.jsx)(t.h5,{id:"prometheus",children:"Prometheus"}),"\n",(0,s.jsxs)(t.p,{children:["Pulsar supports exporting OpenTelemetry metrics in Prometheus format. This exporter is pull based and operates by\nopening up a server in the local Pulsar process. To use it, set ",(0,s.jsx)(t.code,{children:"OTEL_METRICS_EXPORTER=prometheus"})," and the Prometheus\nlistener details using the following environment variables:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"OTEL_EXPORTER_PROMETHEUS_HOST\nOTEL_EXPORTER_PROMETHEUS_PORT\n"})}),"\n",(0,s.jsx)(t.p,{children:"This endpoint must be accessible by the remote Prometheus scrape server. Note that the exporter is less resource\nefficient than the OTLP exporter."}),"\n",(0,s.jsx)(t.p,{children:"All OpenTelemetry resource attributes are automatically copied to Prometheus labels on each time series."}),"\n",(0,s.jsxs)(t.p,{children:["For further configuration details, refer to the exporter\n",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#prometheus-exporter",children:"documentation"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"resource-attributes-configuration",children:"Resource Attributes Configuration"}),"\n",(0,s.jsx)(t.p,{children:"Pulsar automatically sets the following resource attributes:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Attribute"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"pulsar.cluster"})}),(0,s.jsx)(t.td,{children:"The name of the Pulsar cluster."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"service.name"})}),(0,s.jsxs)(t.td,{children:["The name of the Pulsar service. For the broker, this defaults to ",(0,s.jsx)(t.code,{children:"pulsar-broker"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"service.version"})}),(0,s.jsx)(t.td,{children:"The version of the Pulsar service."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Any of these attributes can be overridden by means of environment variable ",(0,s.jsx)(t.code,{children:"OTEL_RESOURCE_ATTRIBUTES"}),". Additional\nattributes can be added too. For example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"OTEL_RESOURCE_ATTRIBUTES=pulsar.cluster=my-cluster,service.name=my-broker,service.version=1.0.0,custom.attr=custom-value\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For further details on configuring resource attributes, refer to the SDK ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure#opentelemetry-resource-attributes",children:"documentation"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Additional runtime resource attributes, such as hostname, process ID, or operating system, are automatically inferred by\nthe SDK using Resource Providers. For a description of these attributes, refer to the respective ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/resources/library",children:"documentation"}),".\nFurther details regarding the configuration of Resource Providers can be obtained via the ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure#resource-provider-spi",children:"documentation"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"attribute-cardinality-configuration",children:"Attribute Cardinality Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["OpenTelemetry provides an experimental mechanism to control the maximum cardinality of attributes. This is useful for\nlimiting the resource usage of the exporter. Pulsar sets the value to 10000 attributes by default. For brokers with a\nlarge number of topics, this can prove insufficient. The value is controlled by environment variable\n",(0,s.jsx)(t.code,{children:"OTEL_EXPERIMENTAL_METRICS_CARDINALITY_LIMIT"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"memory-reuse-configuration",children:"Memory Reuse Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["OpenTelemetry provides an experimental mechanism to control the reuse of metric attributes. This is particularly useful\nfor systems with high cardinality metrics, as it reduces the number of memory allocations caused by collector runs. The\nmechanism is enabled by default in Pulsar, and can be overridden by environment variable\n",(0,s.jsx)(t.code,{children:"OTEL_JAVA_EXPERIMENTAL_EXPORTER_MEMORY_MODE"}),". For further details and valid configuration values, refer to the\nexporter configuration ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/languages/java/configuration/#exporters",children:"documentation"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(96540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);