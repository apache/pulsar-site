"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[77988],{10559:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"client-libraries-producers","title":"Work with producer","description":"After setting up your clients, you can explore more to start working with producers.","source":"@site/versioned_docs/version-3.0.x/client-libraries-producers.md","sourceDirName":".","slug":"/client-libraries-producers","permalink":"/docs/3.0.x/client-libraries-producers","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.0.x/client-libraries-producers.md","tags":[],"version":"3.0.x","frontMatter":{"id":"client-libraries-producers","title":"Work with producer","sidebar_label":"Work with producer"},"sidebar":"docsSidebar","previous":{"title":"Work with clients","permalink":"/docs/3.0.x/client-libraries-clients"},"next":{"title":"Work with consumer","permalink":"/docs/3.0.x/client-libraries-consumers"}}');var r=s(74848),l=s(28453),a=s(11470),i=s(19365);const c={id:"client-libraries-producers",title:"Work with producer",sidebar_label:"Work with producer"},o=void 0,d={},u=[{value:"Create the producer",id:"create-the-producer",level:2},{value:"Send messages",id:"send-messages",level:2},{value:"Send messages with customized metadata",id:"send-messages-with-customized-metadata",level:2},{value:"Async send messages",id:"async-send-messages",level:2},{value:"Publish messages to partitioned topics",id:"publish-messages-to-partitioned-topics",level:2},{value:"Use built-in message router",id:"use-built-in-message-router",level:3},{value:"Customize message router",id:"customize-message-router",level:3},{value:"Choose partitions when using a key",id:"choose-partitions-when-using-a-key",level:3},{value:"Enable chunking",id:"enable-chunking",level:2},{value:"Configure delayed message delivery",id:"configure-delayed-message-delivery",level:2},{value:"Intercept messages",id:"intercept-messages",level:2},{value:"Configure encryption policies",id:"configure-encryption-policies",level:2},{value:"Configure access mode",id:"configure-access-mode",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["After setting up your clients, you can explore more to start working with ",(0,r.jsx)(n.a,{href:"/docs/3.0.x/concepts-clients#producers",children:"producers"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"create-the-producer",children:"Create the producer"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to create a producer."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<String> producer = pulsarClient.newProducer(Schema.STRING)\n              .topic("my-topic")\n              .create();\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Producer producer;\nResult result = client.createProducer("my-topic", producer);\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"send-messages",children:"Send messages"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to send messages using producers."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"},{label:"Node.js",value:"Node.js"},{label:"C#",value:"C#"}],children:[(0,r.jsxs)(i.A,{value:"Java",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'producer.newMessage()\n       .key("my-message-key")\n       .value("my-sync-message")\n       .send();\n'})}),(0,r.jsxs)(n.p,{children:["You can terminate the builder chain with ",(0,r.jsx)(n.code,{children:"sendAsync()"})," and get a future return."]})]}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Message msg = MessageBuilder()\n                    .setContent("content")\n                    .setPartitionKey("my-message-key")\n                    .build();\nResult res = producer.send(msg);\n'})})}),(0,r.jsxs)(i.A,{value:"Go",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:' msg := pulsar.ProducerMessage{\n     Payload: []byte("Here is some message data"),\n     Key: "message-key",\n     Properties: map[string]string{\n         "foo": "bar",\n     },\n     EventTime: time.Now(),\n     ReplicationClusters: []string{"cluster1", "cluster3"},\n }\n\n if _, err := producer.send(msg); err != nil {\n   log.Fatalf("Could not publish message due to: %v", err)\n }\n'})}),(0,r.jsxs)(n.p,{children:["For all methods of the ",(0,r.jsx)(n.code,{children:"ProducerMessage"})," object, see ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/apache/pulsar-client-go/pulsar#ProducerMessage",children:"here"}),"."]})]}),(0,r.jsxs)(i.A,{value:"Node.js",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const msg = {\ndata: Buffer.from('Hello, Pulsar'),\npartitionKey: 'key1',\nproperties: {\n    'foo': 'bar',\n},\neventTimestamp: Date.now(),\nreplicationClusters: [\n    'cluster1',\n    'cluster2',\n],\n}\n\nawait producer.send(msg);\n"})}),(0,r.jsx)(n.p,{children:"The following keys are available for producer message objects:"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"data"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The actual data payload of the message."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"properties"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"A Object for any application-specific metadata attached to the message."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"eventTimestamp"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The timestamp associated with the message."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"sequenceId"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The sequence ID of the message."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"partitionKey"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The optional key associated with the message (particularly useful for things like topic compaction)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"replicationClusters"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The clusters to which this message is replicated. Pulsar brokers handle message replication automatically; you should only change this setting if you want to override the broker default."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"deliverAt"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The absolute timestamp at or after which the message is delivered."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"deliverAfter"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The relative delay after which the message is delivered."})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Message object operations"})}),(0,r.jsx)(n.p,{children:"In Pulsar Node.js client, you can receive (or read) message objects as consumers (or readers)."}),(0,r.jsx)(n.p,{children:"The message object has the following methods available:"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Return type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getTopicName()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of topic name."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"String"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getProperties()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of properties."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Array<Object>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getData()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of message data."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Buffer"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getMessageId()"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Getter method of ",(0,r.jsx)(n.a,{href:"#message-id-object-operations",children:"message id object"}),"."]}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Object"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getPublishTimestamp()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of publish timestamp."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Number"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getEventTimestamp()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of event timestamp."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Number"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getRedeliveryCount()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of redelivery count."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Number"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"getPartitionKey()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Getter method of partition key."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"String"})})]})]})]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Message ID object operations"})}),(0,r.jsx)(n.p,{children:"In Pulsar Node.js client, you can get message id objects from message objects."}),(0,r.jsx)(n.p,{children:"The message id object has the following methods available:"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Return type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"serialize()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Serialize the message id into a Buffer for storing."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Buffer"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"toString()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Get message id as String."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"String"})})]})]})]}),(0,r.jsxs)(n.p,{children:["The client has a static method of message id object. You can access it as ",(0,r.jsx)(n.code,{children:"Pulsar.MessageId.someStaticMethod"}),"."]}),(0,r.jsx)(n.p,{children:"The following static methods are available for the message id object:"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Return type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"earliest()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"MessageId representing the earliest, or oldest available message stored in the topic."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Object"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"latest()"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"MessageId representing the latest, or last published message in the topic."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Object"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"deserialize(Buffer)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Deserialize a message id object from a Buffer."}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"Object"})})]})]})]})]}),(0,r.jsx)(i.A,{value:"C#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var data = Encoding.UTF8.GetBytes("Hello World");\nawait producer.Send(data);\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"send-messages-with-customized-metadata",children:"Send messages with customized metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Send messages with customized metadata by using the builder."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"C#",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"C#",value:"C#"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'producer.newMessage()\n        .value("my-sync-message")\n        .property("my-key", "my-value")\n        .property("my-other-key", "my-other-value")\n        .send();\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Message msg = MessageBuilder()\n                  .setContent("content")\n                  .setProperty("my-key", "my-value")\n                  .setProperty("my-other-key", "my-other-value")\n                  .build();\nResult res = producer.send(msg);\n'})})}),(0,r.jsx)(i.A,{value:"C#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'var messageId = await producer.NewMessage()\n                            .Property("SomeKey", "SomeValue")\n                            .Send(data);\n'})})})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"async-send-messages",children:"Async send messages"}),"\n",(0,r.jsxs)(n.p,{children:["You can publish messages ",(0,r.jsx)(n.a,{href:"/docs/3.0.x/concepts-clients#send-modes",children:"asynchronously"})," using the Java client. With async send, the producer puts the message in a blocking queue and returns it immediately. Then the client library sends the message to the broker in the background. If the queue is full (max size configurable), the producer is blocked or fails immediately when calling the API, depending on arguments passed to the producer."]}),"\n",(0,r.jsx)(n.p,{children:"The following is an example."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'producer.sendAsync("my-async-message".getBytes()).thenAccept(msgId -> {\n    System.out.println("Message with ID " + msgId + " successfully sent");\n});\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Message msg = MessageBuilder()\n                  .setContent("content")\n                  .build();\nproducer.sendAsync(msg, [](Result result, MessageId messageId) {\n    std::cout << "Result: " << result << "; Message ID:" << messageId;\n});\n'})})})]}),"\n",(0,r.jsxs)(n.p,{children:["As you can see from the example above, async send operations return a ",(0,r.jsx)(n.a,{href:"https://pulsar.apache.org/api/client/3.0.x/org/apache/pulsar/client/api/MessageId",children:"MessageId"})," wrapped in a ",(0,r.jsx)(n.a,{href:"http://www.baeldung.com/java-completablefuture",children:(0,r.jsx)(n.code,{children:"CompletableFuture"})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"publish-messages-to-partitioned-topics",children:"Publish messages to partitioned topics"}),"\n",(0,r.jsxs)(n.p,{children:["By default, Pulsar topics are served by a single broker, which limits the maximum throughput of a topic. ",(0,r.jsx)(n.em,{children:"Partitioned topics"})," can span multiple brokers and thus allow for higher throughput."]}),"\n",(0,r.jsx)(n.p,{children:"You can publish messages to partitioned topics using Pulsar client libraries. When publishing messages to partitioned topics, you must specify a routing mode. If you do not specify any routing mode when you create a new producer, the round-robin routing mode is used."}),"\n",(0,r.jsx)(n.h3,{id:"use-built-in-message-router",children:"Use built-in message router"}),"\n",(0,r.jsxs)(n.p,{children:["You can specify the ",(0,r.jsx)(n.a,{href:"/docs/3.0.x/concepts-messaging#routing-modes",children:"routing mode"})," in the ",(0,r.jsx)(n.code,{children:"ProducerConfiguration"})," object to configure your producer. The routing mode determines which partition (internal topic) each message should be published to."]}),"\n",(0,r.jsx)(n.p,{children:"The following is an example:"}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String pulsarBrokerRootUrl = "pulsar://localhost:6650";\nString topic = "persistent://my-tenant/my-namespace/my-topic";\n\nPulsarClient pulsarClient = PulsarClient.builder().serviceUrl(pulsarBrokerRootUrl).build();\nProducer<byte[]> producer = pulsarClient.newProducer()\n   .topic(topic)\n   .messageRoutingMode(MessageRoutingMode.SinglePartition)\n   .create();\nproducer.send("Partitioned topic message".getBytes());\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "lib/RoundRobinMessageRouter.h" // Make sure include this header file\n\n Producer producer;\n Result result = client.createProducer(\n     "persistent://public/default/my-topic",\n     ProducerConfiguration().setMessageRouter(std::make_shared<RoundRobinMessageRouter>(\n         ProducerConfiguration::BoostHash, true, 1000, 100000, boost::posix_time::seconds(1))),\n     producer);\n'})})}),(0,r.jsx)(i.A,{value:"Go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:' client, err := pulsar.NewClient(pulsar.ClientOptions{\n     URL: "pulsar://localhost:6650",\n })\n\n if err != nil {\n     log.Fatal(err)\n }\n defer client.Close()\n\n producer, err := client.CreateProducer(pulsar.ProducerOptions{\n     Topic: "my-partitioned-topic",\n     MessageRouter: func(msg *pulsar.ProducerMessage, tm pulsar.TopicMetadata) int {\n         fmt.Println("Topic has", tm.NumPartitions(), "partitions. Routing message ", msg, " to partition 2.")\n         // always push msg to partition 2\n         return 2\n     },\n })\n\n if err != nil {\n     log.Fatal(err)\n }\n defer producer.Close()\n\n for i := 0; i < 10; i++ {\n     if msgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n         Payload: []byte(fmt.Sprintf("message-%d", i)),\n     }); err != nil {\n         log.Fatal(err)\n     } else {\n         log.Println("Published message: ", msgId)\n     }\n }\n\n // subscribe a specific partition of a topic\n // for demos only, not recommend to subscribe a specific partition\n consumer, err := client.Subscribe(pulsar.ConsumerOptions{\n     // pulsar partition is a special topic has the suffix \'-partition-xx\'\n     Topic:            "my-partitioned-topic-partition-2",\n     SubscriptionName: "my-sub",\n     Type:             pulsar.Shared,\n })\n if err != nil {\n     log.Fatal(err)\n }\n defer consumer.Close()\n\n for i := 0; i < 10; i++ {\n     msg, err := consumer.Receive(context.Background())\n     if err != nil {\n         log.Fatal(err)\n     }\n     fmt.Printf("Received message msgId: %#v -- content: \'%s\'\\n", msg.ID(), string(msg.Payload()))\n     consumer.Ack(msg)\n }\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"customize-message-router",children:"Customize message router"}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsxs)(i.A,{value:"Java",children:[(0,r.jsxs)(n.p,{children:["To use a custom message router, you need to provide an implementation of the ",(0,r.jsx)(n.a,{href:"https://pulsar.apache.org/api/client/3.0.x/org/apache/pulsar/client/api/MessageRouter",children:"MessageRouter"})," interface, which has just one ",(0,r.jsx)(n.code,{children:"choosePartition"})," method:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface MessageRouter extends Serializable {\n    int choosePartition(Message msg);\n}\n"})})]}),(0,r.jsxs)(i.A,{value:"C++",children:[(0,r.jsxs)(n.p,{children:["To use a custom message router, you need to provide an implementation of the ``MessageRoutingPolicy interface, which has just one ",(0,r.jsx)(n.code,{children:"getPartition"})," method:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class MessageRouter : public MessageRoutingPolicy {\n   public:\n    MessageRouter() : {}\n\n    int getPartition(const Message& msg, const TopicMetadata& topicMetadata) {\n        // The implementation of getPartition\n    }\n\n};\n"})})]})]}),"\n",(0,r.jsx)(n.p,{children:"The following router routes every message to partition 10:"}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class AlwaysTenRouter implements MessageRouter {\n    public int choosePartition(Message msg) {\n        return 10;\n    }\n}\n"})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"class MessageRouter : public MessageRoutingPolicy {\n   public:\n    MessageRouter() {}\n\n    int getPartition(const Message& msg, const TopicMetadata& topicMetadata) {\n        return 10;\n    }\n};\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"With that implementation, you can send messages to partitioned topics as below."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String pulsarBrokerRootUrl = "pulsar://localhost:6650";\nString topic = "persistent://my-tenant/my-cluster-my-namespace/my-topic";\n\nPulsarClient pulsarClient = PulsarClient.builder().serviceUrl(pulsarBrokerRootUrl).build();\nProducer<byte[]> producer = pulsarClient.newProducer()\n        .topic(topic)\n        .messageRouter(new AlwaysTenRouter())\n        .create();\nproducer.send("Partitioned topic message".getBytes());\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Producer producer;\nResult result = client.createProducer(\n    "persistent://public/default/my-topic",\n    ProducerConfiguration().setMessageRouter(std::make_shared<MessageRouter>()),\n    producer);\nMessage msg = MessageBuilder().setContent("content").build();\nresult = producer.send(msg);\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"choose-partitions-when-using-a-key",children:"Choose partitions when using a key"}),"\n",(0,r.jsx)(n.p,{children:"If a message has a key, it supersedes the round robin routing policy. The following java example code illustrates how to choose the partition when using a key."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// If the message has a key, it supersedes the round robin routing policy\n        if (msg.hasKey()) {\n            return signSafeMod(hash.makeHash(msg.getKey()), topicMetadata.numPartitions());\n        }\n\n        if (isBatchingEnabled) { // if batching is enabled, choose partition on `partitionSwitchMs` boundary.\n            long currentMs = clock.millis();\n            return signSafeMod(currentMs / partitionSwitchMs + startPtnIdx, topicMetadata.numPartitions());\n        } else {\n            return signSafeMod(PARTITION_INDEX_UPDATER.getAndIncrement(this), topicMetadata.numPartitions());\n        }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enable-chunking",children:"Enable chunking"}),"\n",(0,r.jsxs)(n.p,{children:["Message ",(0,r.jsx)(n.a,{href:"/docs/3.0.x/concepts-messaging#chunking",children:"chunking"})," enables Pulsar to process large payload messages by splitting the message into chunks at the producer side and aggregating chunked messages on the consumer side."]}),"\n",(0,r.jsx)(n.p,{children:"The message chunking feature is OFF by default. The following is an example of how to enable message chunking when creating a producer."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"},{label:"Python",value:"Python"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"  Producer<byte[]> producer = client.newProducer()\n     .topic(topic)\n     .enableChunking(true)\n     .enableBatching(false)\n     .create();\n"})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'ProducerConfiguration conf;\nconf.setBatchingEnabled(false);\nconf.setChunkingEnabled(true);\nProducer producer;\nclient.createProducer("my-topic", conf, producer);\n'})})}),(0,r.jsx)(i.A,{value:"Go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'client, err := pulsar.NewClient(pulsar.ClientOptions{\n\tURL: serviceURL,\n})\n\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\n// The message chunking feature is OFF by default.\n// By default, a producer chunks the large message based on the max message size (`maxMessageSize`) configured at the broker side (for example, 5MB).\n// Client can also configure the max chunked size using the producer configuration `ChunkMaxMessageSize`.\n// Note: to enable chunking, you need to disable batching (`DisableBatching=true`) concurrently.\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n  Topic:               "my-topic",\n  DisableBatching:     true,\n  EnableChunking:      true,\n})\n\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer producer.Close()\n'})})}),(0,r.jsx)(i.A,{value:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"producer = client.create_producer(\n         topic,\n         chunking_enabled=True\n     )\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["By default, producer chunks the large message based on max message size (",(0,r.jsx)(n.code,{children:"maxMessageSize"}),") configured at broker (eg: 5MB). However, client can also configure max chunked size using producer configuration ",(0,r.jsx)(n.code,{children:"chunkMaxMessageSize"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To enable chunking, you need to disable batching (",(0,r.jsx)(n.code,{children:"enableBatching"}),"=",(0,r.jsx)(n.code,{children:"false"}),") concurrently."]})}),"\n",(0,r.jsx)(n.h2,{id:"configure-delayed-message-delivery",children:"Configure delayed message delivery"}),"\n",(0,r.jsx)(n.p,{children:"The following is an example of how to configure delayed message delivery for a producer."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// message to be delivered at the configured delay interval\nproducer.newMessage().deliverAfter(3L, TimeUnit.Minute).value("Hello Pulsar!").send();\n'})})}),(0,r.jsx)(i.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Message msg = MessageBuilder().setContent("content")\n                   .setDeliverAfter(std::chrono::minutes(3))\n                   .build();\nproducer.send(msg);\n'})})}),(0,r.jsx)(i.A,{value:"Go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'client, err := pulsar.NewClient(pulsar.ClientOptions{\n    URL: "pulsar://localhost:6650",\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Close()\n\ntopicName := "topic-1"\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:           topicName,\n    DisableBatching: true,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer producer.Close()\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            topicName,\n    SubscriptionName: "subName",\n    Type:             pulsar.Shared,\n})\nif err != nil {\n    log.Fatal(err)\n}\ndefer consumer.Close()\n\nID, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Payload:      []byte(fmt.Sprintf("test")),\n    DeliverAfter: 3 * time.Second,\n})\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(ID)\n\nctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\nmsg, err := consumer.Receive(ctx)\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(msg.Payload())\ncancel()\n\nctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)\nmsg, err = consumer.Receive(ctx)\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(msg.Payload())\ncancel()\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"intercept-messages",children:"Intercept messages"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ProducerInterceptor"})," intercepts and possibly mutates messages received by the producer before they are published to the brokers."]}),"\n",(0,r.jsx)(n.p,{children:"The interface has three main events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"eligible"})," checks if the interceptor can be applied to the message."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"beforeSend"})," is triggered before the producer sends the message to the broker. You can modify messages within this event."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onSendAcknowledgement"})," is triggered when the message is acknowledged by the broker or the sending failed."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To intercept messages, you can add a ",(0,r.jsx)(n.code,{children:"ProducerInterceptor"})," or multiple ones when creating a ",(0,r.jsx)(n.code,{children:"Producer"})," as follows."]}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(i.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Producer<byte[]> producer = client.newProducer()\n     .topic(topic)\n     .intercept(new ProducerInterceptor {\n \t\t@Override\n \t\tboolean eligible(Message message) {\n \t\t    return true;  // process all messages\n \t\t}\n\n \t\t@Override\n \t\tMessage beforeSend(Producer producer, Message message) {\n \t\t    // user-defined processing logic\n \t\t}\n\n \t\t@Override\n \t\tvoid onSendAcknowledgement(Producer producer, Message message, MessageId msgId, Throwable exception) {\n \t\t    // user-defined processing logic\n \t\t}\n     })\n     .create();\n"})})}),(0,r.jsxs)(i.A,{value:"C++",children:[(0,r.jsx)(n.p,{children:"Implement the custom interceptor:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:" class MyInterceptor : public ProducerInterceptor {\n   public:\n     MyInterceptor() {}\n\n     Message beforeSend(const Producer& producer, const Message& message) override {\n       // Your implementation code\n       return message;\n     }\n\n     void onSendAcknowledgement(const Producer& producer, Result result, const Message& message,\n                               const MessageId& messageID) override {\n       // Your implementation code\n     }\n\n     void close() override { \n       // Your implementation code\n     }\n };\n"})}),(0,r.jsx)(n.p,{children:"Configue the producer:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:" ProducerConfiguration conf;\n conf.intercept({std::make_shared<MyInterceptor>(),\n                 std::make_shared<MyInterceptor>()}); // You can add multiple interceptors to the same producer\n Producer producer;\n client.createProducer(topic, conf, producer);\n"})})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Multiple interceptors apply in the order they are passed to the ",(0,r.jsx)(n.code,{children:"intercept"})," method."]})}),"\n",(0,r.jsx)(n.h2,{id:"configure-encryption-policies",children:"Configure encryption policies"}),"\n",(0,r.jsx)(n.p,{children:"The Pulsar C# client supports four kinds of encryption policies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EnforceUnencrypted"}),": always use unencrypted connections."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EnforceEncrypted"}),": always use encrypted connections)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PreferUnencrypted"}),": use unencrypted connections, if possible."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PreferEncrypted"}),": use encrypted connections, if possible."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to set the ",(0,r.jsx)(n.code,{children:"EnforceUnencrypted"})," encryption policy."]}),"\n",(0,r.jsx)(a.A,{groupId:"lang-choice",defaultValue:"C#",values:[{label:"C#",value:"C#"}],children:(0,r.jsx)(i.A,{value:"C#",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using DotPulsar;\n\nvar client = PulsarClient.Builder()\n                      .ConnectionSecurity(EncryptionPolicy.EnforceEncrypted)\n                      .Build();\n"})})})}),"\n",(0,r.jsx)(n.h2,{id:"configure-access-mode",children:"Configure access mode"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/3.0.x/concepts-clients#access-mode",children:"Access mode"}),' allows applications to require exclusive producer access on a topic to achieve a "single-writer" situation.']}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to set producer access mode."}),"\n",(0,r.jsxs)(a.A,{groupId:"lang-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsxs)(i.A,{value:"Java",children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This feature is supported in Java client 2.8.0 or later versions."})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Producer<byte[]> producer = client.newProducer()\n     .topic(topic)\n     .accessMode(ProducerAccessMode.Exclusive)\n     .create();\n"})})]}),(0,r.jsxs)(i.A,{value:"C++",children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This feature is supported in C++ client 3.1.0 or later versions."})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:" Producer producer;\n ProducerConfiguration producerConfiguration;\n producerConfiguration.setAccessMode(ProducerConfiguration::Exclusive);\n client.createProducer(topicName, producerConfiguration, producer);\n"})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>a});s(96540);var t=s(34164);const r={tabItem:"tabItem_Ymn6"};var l=s(74848);function a(e){let{children:n,hidden:s,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,a),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>A});var t=s(96540),r=s(34164),l=s(23104),a=s(56347),i=s(205),c=s(57485),o=s(31682),d=s(70679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:r}}=e;return{value:n,label:s,attributes:t,default:r}}))}(s);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function p(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:s}=e;const r=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(l),(0,t.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,l=h(e),[a,c]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[o,u]=g({queryString:s,groupId:r}),[x,m]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,l]=(0,d.Dv)(s);return[r,(0,t.useCallback)((e=>{s&&l.set(e)}),[s,l])]}({groupId:r}),j=(()=>{const e=o??x;return p({value:e,tabValues:l})?e:null})();(0,i.A)((()=>{j&&c(j)}),[j]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),m(e)}),[u,m,l]),tabValues:l}}var m=s(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=s(74848);function y(e){let{className:n,block:s,selectedValue:t,selectValue:a,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),d=e=>{const n=e.currentTarget,s=c.indexOf(n),r=i[s].value;r!==t&&(o(n),a(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:i.map((e=>{let{value:n,label:s,attributes:l}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>c.push(e),onKeyDown:u,onClick:d,...l,className:(0,r.A)("tabs__item",j.tabItem,l?.className,{"tabs__item--active":t===n}),children:s??n},n)}))})}function b(e){let{lazy:n,children:s,selectedValue:l}=e;const a=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function v(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function A(e){const n=(0,m.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(n))}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);