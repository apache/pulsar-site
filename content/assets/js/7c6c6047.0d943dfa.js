"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[88993],{90534:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"client-libraries-java-use","title":"Use a Java client","description":"Learn how to use Java client in Pulsar.","source":"@site/versioned_docs/version-3.2.x/client-libraries-java-use.md","sourceDirName":".","slug":"/client-libraries-java-use","permalink":"/docs/3.2.x/client-libraries-java-use","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.2.x/client-libraries-java-use.md","tags":[],"version":"3.2.x","frontMatter":{"id":"client-libraries-java-use","title":"Use a Java client","sidebar_label":"Use","description":"Learn how to use Java client in Pulsar."},"sidebar":"docsSidebar","previous":{"title":"Initialize","permalink":"/docs/3.2.x/client-libraries-java-initialize"},"next":{"title":"C++ client","permalink":"/docs/3.2.x/client-libraries-cpp"}}');var r=n(74848),t=n(28453);const i={id:"client-libraries-java-use",title:"Use a Java client",sidebar_label:"Use",description:"Learn how to use Java client in Pulsar."},c=void 0,o={},l=[{value:"Create a producer",id:"create-a-producer",level:2},{value:"Create a consumer",id:"create-a-consumer",level:2},{value:"Create a reader",id:"create-a-reader",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"create-a-producer",children:"Create a producer"}),"\n",(0,r.jsxs)(s.p,{children:["Once you've instantiated a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object, you can create a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/Producer",children:"Producer"})," for a specific Pulsar ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/reference-terminology#topic",children:"topic"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'Producer<byte[]> producer = client.newProducer()\n        .topic("my-topic")\n        .create();\n\n// You can then send messages to the broker and topic you specified:\nproducer.send("My message".getBytes());\n'})}),"\n",(0,r.jsxs)(s.p,{children:["By default, producers produce messages that consist of byte arrays. You can produce different types by specifying a message ",(0,r.jsx)(s.a,{href:"#schema",children:"schema"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'Producer<String> stringProducer = client.newProducer(Schema.STRING)\n        .topic("my-topic")\n        .create();\nstringProducer.send("My message");\n'})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"Make sure that you close your producers, consumers, and clients when you do not need them."}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"producer.close();\nconsumer.close();\nclient.close();\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"Close operations can also be asynchronous:"}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'producer.closeAsync()\n   .thenRun(() -> System.out.println("Producer closed"))\n   .exceptionally((ex) -> {\n       System.err.println("Failed to close producer: " + ex);\n       return null;\n   });\n'})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"create-a-consumer",children:"Create a consumer"}),"\n",(0,r.jsxs)(s.p,{children:["In Pulsar, consumers subscribe to topics and handle messages that producers publish to those topics. You can instantiate a new ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/reference-terminology#consumer",children:"consumer"})," by first instantiating a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object and passing it a URL for a Pulsar broker (as ",(0,r.jsx)(s.a,{href:"#client-configuration",children:"above"}),")."]}),"\n",(0,r.jsxs)(s.p,{children:["Once you've instantiated a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/PulsarClient",children:"PulsarClient"})," object, you can create a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/Consumer",children:"Consumer"})," by specifying a ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/reference-terminology#topic",children:"topic"})," and a ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/concepts-messaging#subscription-types",children:"subscription"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'Consumer consumer = client.newConsumer()\n        .topic("my-topic")\n        .subscriptionName("my-subscription")\n        .subscribe();\n'})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"subscribe"})," method will auto-subscribe the consumer to the specified topic and subscription. One way to make the consumer listen to the topic is to set up a ",(0,r.jsx)(s.code,{children:"while"})," loop. In this example loop, the consumer listens for messages, prints the contents of any received message, and then ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/reference-terminology#acknowledgment-ack",children:"acknowledges"})," that the message has been processed. If the processing logic fails, you can use ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/reference-terminology#acknowledgment-ack",children:"negative acknowledgment"})," to redeliver the message later."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'while (true) {\n  // Wait for a message\n  Message msg = consumer.receive();\n\n  try {\n      // Do something with the message\n      System.out.println("Message received: " + new String(msg.getData()));\n\n      // Acknowledge the message\n      consumer.acknowledge(msg);\n  } catch (Exception e) {\n      // Message failed to process, redeliver later\n      consumer.negativeAcknowledge(msg);\n  }\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["If you don't want to block your main thread but constantly listen for new messages, consider using a ",(0,r.jsx)(s.code,{children:"MessageListener"}),". The ",(0,r.jsx)(s.code,{children:"MessageListener"})," uses a thread pool inside the client. You can set the number of threads for message listeners in the ClientBuilder. The ",(0,r.jsx)(s.code,{children:"MessageListener"})," will use a thread pool inside the PulsarClient. You can set the number of threads to use for message listeners in the ClientBuilder."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'MessageListener myMessageListener = (consumer, msg) -> {\n  try {\n      System.out.println("Message received: " + new String(msg.getData()));\n      consumer.acknowledge(msg);\n  } catch (Exception e) {\n      consumer.negativeAcknowledge(msg);\n  }\n}\n\nConsumer consumer = client.newConsumer()\n     .topic("my-topic")\n     .subscriptionName("my-subscription")\n     .messageListener(myMessageListener)\n     .subscribe();\n'})}),"\n",(0,r.jsx)(s.h2,{id:"create-a-reader",children:"Create a reader"}),"\n",(0,r.jsxs)(s.p,{children:["With the ",(0,r.jsx)(s.a,{href:"/docs/3.2.x/concepts-clients#reader-interface",children:"reader interface"}),', Pulsar clients can "manually position" themselves within a topic and read all messages from a specified message onward. The Pulsar API for Java enables you to create ',(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/Reader",children:"Reader"})," objects by specifying a topic and a ",(0,r.jsx)(s.a,{href:"https://pulsar.apache.org/api/client/3.2.x/org/apache/pulsar/client/api/MessageId",children:"MessageId"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"The following is an example."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"byte[] msgIdBytes = // Some message ID byte array\nMessageId id = MessageId.fromByteArray(msgIdBytes);\nReader reader = pulsarClient.newReader()\n        .topic(topic)\n        .startMessageId(id)\n        .create();\n\nwhile (true) {\n    Message message = reader.readNext();\n    // Process message\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["In the example above, a ",(0,r.jsx)(s.code,{children:"Reader"})," object is instantiated for a specific topic and message (by ID); the reader iterates over each message in the topic after the message is identified by ",(0,r.jsx)(s.code,{children:"msgIdBytes"})," (how that value is obtained depends on the application)."]}),"\n",(0,r.jsxs)(s.p,{children:["The code sample above shows pointing the ",(0,r.jsx)(s.code,{children:"Reader"})," object to a specific message (by ID), but you can also use ",(0,r.jsx)(s.code,{children:"MessageId.earliest"})," to point to the earliest available message on the topic of ",(0,r.jsx)(s.code,{children:"MessageId.latest"})," to point to the most recent available message."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var a=n(96540);const r={},t=a.createContext(r);function i(e){const s=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:s},e.children)}}}]);