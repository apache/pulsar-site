"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[89499],{16816:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"io-debezium-source","title":"Debezium source connector","description":"You can download all the Pulsar connectors on download page.","source":"@site/versioned_docs/version-3.0.x/io-debezium-source.md","sourceDirName":".","slug":"/io-debezium-source","permalink":"/docs/3.0.x/io-debezium-source","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.0.x/io-debezium-source.md","tags":[],"version":"3.0.x","frontMatter":{"id":"io-debezium-source","title":"Debezium source connector","sidebar_label":"Debezium source connector"}}');var r=s(74848),o=s(28453);const t={id:"io-debezium-source",title:"Debezium source connector",sidebar_label:"Debezium source connector"},i=void 0,c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Converter Options",id:"converter-options",level:3},{value:"MongoDB Configuration",id:"mongodb-configuration",level:3},{value:"Customize the Reader config for the metadata topics",id:"customize-the-reader-config-for-the-metadata-topics",level:3},{value:"Example of MySQL",id:"example-of-mysql",level:2},{value:"Configuration",id:"configuration-1",level:3},{value:"Usage",id:"usage",level:3},{value:"Example of PostgreSQL",id:"example-of-postgresql",level:2},{value:"Configuration",id:"configuration-2",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Example of MongoDB",id:"example-of-mongodb",level:2},{value:"Configuration",id:"configuration-3",level:3},{value:"Usage",id:"usage-2",level:3},{value:"Example of Oracle",id:"example-of-oracle",level:2},{value:"Packaging",id:"packaging",level:3},{value:"Configuration",id:"configuration-4",level:3},{value:"Example of Microsoft SQL",id:"example-of-microsoft-sql",level:2},{value:"Configuration",id:"configuration-5",level:3},{value:"FAQ",id:"faq",level:2},{value:"Debezium postgres connector will hang when creating snap",id:"debezium-postgres-connector-will-hang-when-creating-snap",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can download all the Pulsar connectors on ",(0,r.jsx)(n.a,{href:"pathname:///download",children:"download page"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"The Debezium source connector pulls messages from MySQL or PostgreSQL and persists the messages to Pulsar topics."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The configuration of the Debezium source connector has the following properties."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"task.class"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"A source task class that implemented in Debezium."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.hostname"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The address of a database server."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.port"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The port number of a database server."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.user"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The name of a database user that has the required privileges."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.password"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The password for a database user that has the required privileges."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.server.id"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The connector's identifier that must be unique within a database cluster and similar to the database's server-id configuration property."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.server.name"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The logical name of a database server/cluster, which forms a namespace and it is used in all the names of Kafka topics to which the connector writes, the Kafka Connect schema names, and the namespaces of the corresponding Avro schema when the Avro Connector is used."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.whitelist"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsxs)(n.td,{children:["A list of all databases hosted by this server which is monitored by the  connector.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{})," This is optional, and there are other properties for listing databases and tables to include or exclude from monitoring."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"key.converter"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The converter provided by Kafka Connect to convert record key."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"value.converter"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The converter provided by Kafka Connect to convert record value."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.history"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The name of the database history class."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.history.pulsar.topic"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsxs)(n.td,{children:["The name of the database history topic where the connector writes and recovers DDL statements. ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(n.strong,{children:"Note: this topic is for internal use only and should not be used by consumers."})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.history.pulsar.service.url"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsxs)(n.td,{children:["Pulsar cluster service URL for history topic. ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(n.strong,{children:"Note"}),": If ",(0,r.jsx)(n.code,{children:"database.history.pulsar.service.url"})," is not set, then the database history Pulsar client will use the same client settings as those of the source connector, such as ",(0,r.jsx)(n.code,{children:"client_auth_plugin"})," and ",(0,r.jsx)(n.code,{children:"client_auth_params"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"offset.storage.topic"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"Record the last committed offsets that the connector successfully completes."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"json-with-envelope"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"Present the message that only consists of payload."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"database.history.pulsar.reader.config"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The configs of the reader for the database schema history topic, in the form of a JSON string with key-value pairs."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"offset.storage.reader.config"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The configs of the reader for the kafka connector offsets topic, in the form of a JSON string with key-value pairs."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"converter-options",children:"Converter Options"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"org.apache.kafka.connect.json.JsonConverter"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This config ",(0,r.jsx)(n.code,{children:"json-with-envelope"})," is valid only for the JsonConverter. The default value is false, and the consumer uses the schema ",(0,r.jsx)(n.code,{children:"Schema.KeyValue(Schema.AUTO_CONSUME(), Schema.AUTO_CONSUME(), KeyValueEncodingType.SEPARATED)"}),", and the message only consist of payload."]}),"\n",(0,r.jsxs)(n.p,{children:["If the config ",(0,r.jsx)(n.code,{children:"json-with-envelope"})," value is true, the consumer uses the schema ",(0,r.jsx)(n.code,{children:"Schema.KeyValue(Schema.BYTES, Schema.BYTES"}),", the message consists of schema and payload."]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"org.apache.pulsar.kafka.shade.io.confluent.connect.avro.AvroConverter"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If users select the AvroConverter, then the pulsar consumer should use the schema ",(0,r.jsx)(n.code,{children:"Schema.KeyValue(Schema.AUTO_CONSUME(), Schema.AUTO_CONSUME(), KeyValueEncodingType.SEPARATED)"}),", and the message consist of payload."]}),"\n",(0,r.jsx)(n.h3,{id:"mongodb-configuration",children:"MongoDB Configuration"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mongodb.hosts"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsxs)(n.td,{children:["The comma-separated list of hostname and port pairs (in the form 'host' or 'host",":port","') of the MongoDB servers in the replica set. The list contains a single hostname and a port pair. If mongodb.members.auto.discover is set to false, the host and port pair are prefixed with the replica set name (e.g., rs0/localhost:27017)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mongodb.name"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"A unique name that identifies the connector and/or MongoDB replica set or shared cluster that this connector monitors. Each server should be monitored by at most one Debezium connector, since this server name prefixes all persisted Kafka topics emanating from the MongoDB replica set or cluster."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mongodb.user"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"Name of the database user to be used when connecting to MongoDB. This is required only when MongoDB is configured to use authentication."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mongodb.password"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"Password to be used when connecting to MongoDB. This is required only when MongoDB is configured to use authentication."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mongodb.task.id"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"The taskId of the MongoDB connector that attempts to use a separate task for each replica set."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"customize-the-reader-config-for-the-metadata-topics",children:"Customize the Reader config for the metadata topics"}),"\n",(0,r.jsxs)(n.p,{children:["The Debezium Connector exposes ",(0,r.jsx)(n.code,{children:"database.history.pulsar.reader.config"})," and ",(0,r.jsx)(n.code,{children:"offset.storage.reader.config"})," to configure the reader of database schema history topic and the Kafka connector offsets topic. For example, it can be used to configure the subscription name and other reader configurations. You can find the available configurations at ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-client/src/main/java/org/apache/pulsar/client/impl/conf/ReaderConfigurationData.java",children:"ReaderConfigurationData"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example, to configure the subscription name for both Readers, you can add the following configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "configs": {\n     "database.history.pulsar.reader.config": "{\\"subscriptionName\\":\\"history-reader\\"}",\n     "offset.storage.reader.config": "{\\"subscriptionName\\":\\"offset-reader\\"}",\n  }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"YAML"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'configs:\n   database.history.pulsar.reader.config: "{\\"subscriptionName\\":\\"history-reader\\"}"\n   offset.storage.reader.config: "{\\"subscriptionName\\":\\"offset-reader\\"}"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-of-mysql",children:"Example of MySQL"}),"\n",(0,r.jsx)(n.p,{children:"You need to create a configuration file before using the Pulsar Debezium connector."}),"\n",(0,r.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"You can use one of the following methods to create a configuration file."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n   "configs": {\n      "database.hostname": "localhost",\n      "database.port": "3306",\n      "database.user": "debezium",\n      "database.password": "dbz",\n      "database.server.id": "184054",\n      "database.server.name": "dbserver1",\n      "database.whitelist": "inventory",\n      "database.history": "org.apache.pulsar.io.debezium.PulsarDatabaseHistory",\n      "database.history.pulsar.topic": "history-topic",\n      "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650",\n      "key.converter": "org.apache.kafka.connect.json.JsonConverter",\n      "value.converter": "org.apache.kafka.connect.json.JsonConverter",\n      "offset.storage.topic": "offset-topic"\n   }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"YAML"}),"\n",(0,r.jsxs)(n.p,{children:["You can create a ",(0,r.jsx)(n.code,{children:"debezium-mysql-source-config.yaml"})," file and copy the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-io/debezium/mysql/src/main/resources/debezium-mysql-source-config.yaml",children:"contents"})," below to the ",(0,r.jsx)(n.code,{children:"debezium-mysql-source-config.yaml"})," file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tenant: "public"\nnamespace: "default"\nname: "debezium-mysql-source"\ntopicName: "debezium-mysql-topic"\narchive: "connectors/pulsar-io-debezium-mysql-3.0.8.nar"\nparallelism: 1\n\nconfigs:\n\n    ## config for mysql, docker image: debezium/example-mysql:0.8\n    database.hostname: "localhost"\n    database.port: "3306"\n    database.user: "debezium"\n    database.password: "dbz"\n    database.server.id: "184054"\n    database.server.name: "dbserver1"\n    database.whitelist: "inventory"\n    database.history: "org.apache.pulsar.io.debezium.PulsarDatabaseHistory"\n    database.history.pulsar.topic: "history-topic"\n    database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n\n    ## KEY_CONVERTER_CLASS_CONFIG, VALUE_CONVERTER_CLASS_CONFIG\n    key.converter: "org.apache.kafka.connect.json.JsonConverter"\n    value.converter: "org.apache.kafka.connect.json.JsonConverter"\n\n    ## OFFSET_STORAGE_TOPIC_CONFIG\n    offset.storage.topic: "offset-topic"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to change the data of a MySQL table using the Pulsar Debezium connector."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a MySQL server with a database from which Debezium can capture changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker run -it --rm \\\n--name mysql \\\n-p 3306:3306 \\\n-e MYSQL_ROOT_PASSWORD=debezium \\\n-e MYSQL_USER=mysqluser \\\n-e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:0.8\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a Pulsar service locally in standalone mode."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar standalone\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start the Pulsar Debezium connector in local run mode using one of the following methods."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"JSON"})," configuration file as shown previously."]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure the NAR file is available at ",(0,r.jsx)(n.code,{children:"connectors/pulsar-io-debezium-mysql-3.0.8.nar"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-admin source localrun \\\n    --archive $PWD/connectors/pulsar-io-debezium-mysql-3.0.8.nar \\\n    --name debezium-mysql-source \\\n    --tenant public \\\n    --namespace default \\\n    --source-config \'{"database.hostname": "localhost","database.port": "3306","database.user": "debezium","database.password": "dbz","database.server.id": "184054","database.server.name": "dbserver1","database.whitelist": "inventory","database.history": "org.apache.pulsar.io.debezium.PulsarDatabaseHistory","database.history.pulsar.topic": "history-topic","database.history.pulsar.service.url": "pulsar://127.0.0.1:6650","key.converter": "org.apache.kafka.connect.json.JsonConverter","value.converter": "org.apache.kafka.connect.json.JsonConverter","pulsar.service.url": "pulsar://127.0.0.1:6650","offset.storage.topic": "offset-topic"}\'\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"The Debezium connector saves data in the following 4 types of topics:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic named with the database server name (",(0,r.jsx)(n.code,{children:"database.server.name"}),") for storing the database metadata messages, such as ",(0,r.jsx)(n.code,{children:"public/default/database.server.name"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"database.history.pulsar.topic"}),") for storing the database history information. The connector writes and recovers DDL statements on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"offset.storage.topic"}),") for storing the offset metadata messages. The connector saves the last successfully-committed offsets on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"One per-table topic. The connector writes change events for all operations that occur in a table to a single Pulsar topic that is specific to that table."}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:"If the automatic topic creation is disabled on your broker, you need to manually create the above 4 types of topics."})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"YAML"})," configuration file as shown previously."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar-admin source localrun \\\n   --source-config-file $PWD/debezium-mysql-source-config.yaml\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Subscribe to the topic ",(0,r.jsx)(n.em,{children:"sub-products"})," for the table ",(0,r.jsx)(n.em,{children:"inventory.products"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-client consume -s "sub-products" public/default/dbserver1.inventory.products -n 0\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a MySQL client in docker."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'docker run -it --rm \\\n    --name mysqlterm \\\n    --link mysql \\\n    --rm mysql:5.7 sh \\\n    -c \'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"\'\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A MySQL client pops out."}),"\n",(0,r.jsxs)(n.p,{children:["Change the connection mode to ",(0,r.jsx)(n.code,{children:"mysql_native_password"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'mysql> show variables like "caching_sha2_password_auto_generate_rsa_keys";\n+----------------------------------------------+-------+\n| Variable_name                                | Value |\n+----------------------------------------------+-------+\n| caching_sha2_password_auto_generate_rsa_keys | ON    |\n+----------------------------------------------+-------+\n\n# If the value of "caching_sha2_password_auto_generate_rsa_keys" is ON, ensure the plugin of mysql.user is "mysql_native_password".\nmysql> SELECT Host, User, plugin from mysql.user where user={user};\n+-----------+------+-----------------------+\n| Host      | User | plugin                |\n+-----------+------+-----------------------+\n| localhost | root | caching_sha2_password |\n+-----------+------+-----------------------+\n\n# If the plugin of mysql.user is is "caching_sha2_password", set it to "mysql_native_password".\nalter user \'{user}\'@\'{host}\' identified with mysql_native_password by {password};\n\n# Check the plugin of mysql.user.\nmysql> SELECT Host, User, plugin from mysql.user where user={user};\n+-----------+------+-----------------------+\n| Host      | User | plugin                |\n+-----------+------+-----------------------+\n| localhost | root | mysql_native_password |\n+-----------+------+-----------------------+\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Use the following commands to change the data of the table ",(0,r.jsx)(n.em,{children:"products"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mysql> use inventory;\nmysql> show tables;\nmysql> SELECT * FROM  products;\nmysql> UPDATE products SET name='1111111111' WHERE id=101;\nmysql> UPDATE products SET name='1111111111' WHERE id=107;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the terminal window of subscribing topic, you can find the data changes have been kept in the ",(0,r.jsx)(n.em,{children:"sub-products"})," topic."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-of-postgresql",children:"Example of PostgreSQL"}),"\n",(0,r.jsx)(n.p,{children:"You need to create a configuration file before using the Pulsar Debezium connector."}),"\n",(0,r.jsx)(n.h3,{id:"configuration-2",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"You can use one of the following methods to create a configuration file."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "database.hostname": "localhost",\n    "database.port": "5432",\n    "database.user": "postgres",\n    "database.password": "changeme",\n    "database.dbname": "postgres",\n    "database.server.name": "dbserver1",\n    "plugin.name": "pgoutput",\n    "schema.whitelist": "public",\n    "table.whitelist": "public.users",\n    "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"YAML"}),"\n",(0,r.jsxs)(n.p,{children:["You can create a ",(0,r.jsx)(n.code,{children:"debezium-postgres-source-config.yaml"})," file and copy the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-io/debezium/postgres/src/main/resources/debezium-postgres-source-config.yaml",children:"contents"})," below to the ",(0,r.jsx)(n.code,{children:"debezium-postgres-source-config.yaml"})," file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tenant: "public"\nnamespace: "default"\nname: "debezium-postgres-source"\ntopicName: "debezium-postgres-topic"\narchive: "connectors/pulsar-io-debezium-postgres-3.0.8.nar"\nparallelism: 1\n\nconfigs:\n    ## config for postgres version 10+, official docker image: postgres:<10+>\n    database.hostname: "localhost"\n    database.port: "5432"\n    database.user: "postgres"\n    database.password: "changeme"\n    database.dbname: "postgres"\n    database.server.name: "dbserver1"\n    plugin.name: "pgoutput"\n    schema.whitelist: "public"\n    table.whitelist: "public.users"\n\n    ## PULSAR_SERVICE_URL_CONFIG\n    database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Notice that ",(0,r.jsx)(n.code,{children:"pgoutput"})," is a standard plugin of Postgres introduced in version 10 - see ",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/10/logical-replication-architecture.html",children:"Postgres architecture docu"}),". You don't need to install anything, just make sure the WAL level is set to ",(0,r.jsx)(n.code,{children:"logical"})," (see docker command below and ",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/runtime-config-wal.html",children:"Postgres docu"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to change the data of a PostgreSQL table using the Pulsar Debezium connector."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a PostgreSQL server with a database from which Debezium can capture changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker run -d -it --rm \\\n    --name pulsar-postgres \\\n    -p 5432:5432 \\\n    -e POSTGRES_PASSWORD=changeme \\\n    postgres:13.3 -c wal_level=logical\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a Pulsar service locally in standalone mode."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar standalone\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start the Pulsar Debezium connector in local run mode using one of the following methods."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"JSON"})," configuration file as shown previously."]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure the NAR file is available at ",(0,r.jsx)(n.code,{children:"connectors/pulsar-io-debezium-postgres-3.0.8.nar"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-admin source localrun \\\n    --archive $PWD/connectors/pulsar-io-debezium-postgres-3.0.8.nar \\\n    --name debezium-postgres-source \\\n    --tenant public \\\n    --namespace default \\\n    --source-config \'{"database.hostname": "localhost","database.port": "5432","database.user": "postgres","database.password": "changeme","database.dbname": "postgres","database.server.name": "dbserver1","plugin.name": "pgoutput","schema.whitelist": "public","table.whitelist": "public.users","pulsar.service.url": "pulsar://127.0.0.1:6650"}\'\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"The Debezium connector saves data in the following 4 types of topics:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic named with the database server name (",(0,r.jsx)(n.code,{children:"database.server.name"}),") for storing the database metadata messages, such as ",(0,r.jsx)(n.code,{children:"public/default/database.server.name"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"database.history.pulsar.topic"}),") for storing the database history information. The connector writes and recovers DDL statements on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"offset.storage.topic"}),") for storing the offset metadata messages. The connector saves the last successfully-committed offsets on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"One per-table topic. The connector writes change events for all operations that occur in a table to a single Pulsar topic that is specific to that table."}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:"If the automatic topic creation is disabled on your broker, you need to manually create the above 4 types of topics."})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"YAML"})," configuration file as shown previously."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar-admin source localrun  \\\n   --source-config-file $PWD/debezium-postgres-source-config.yaml\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Subscribe to the topic ",(0,r.jsx)(n.em,{children:"sub-users"})," for the ",(0,r.jsx)(n.em,{children:"public.users"})," table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-client consume -s "sub-users" public/default/dbserver1.public.users -n 0\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a PostgreSQL client in docker."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker exec -it pulsar-postgres /bin/bash\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A PostgreSQL client pops out."}),"\n",(0,r.jsxs)(n.p,{children:["Use the following commands to create sample data in the table ",(0,r.jsx)(n.em,{children:"users"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"psql -U postgres -h localhost -p 5432\nPassword for user postgres:\n\nCREATE TABLE users(\n  id BIGINT GENERATED ALWAYS AS IDENTITY, PRIMARY KEY(id),\n  hash_firstname TEXT NOT NULL,\n  hash_lastname TEXT NOT NULL,\n  gender VARCHAR(6) NOT NULL CHECK (gender IN ('male', 'female'))\n);\n\nINSERT INTO users(hash_firstname, hash_lastname, gender)\n  SELECT md5(RANDOM()::TEXT), md5(RANDOM()::TEXT), CASE WHEN RANDOM() < 0.5 THEN 'male' ELSE 'female' END FROM generate_series(1, 100);\n\npostgres=# select * from users;\n\n  id   |          hash_firstname          |          hash_lastname           | gender\n-------+----------------------------------+----------------------------------+--------\n     1 | 02bf7880eb489edc624ba637f5ab42bd | 3e742c2cc4217d8e3382cc251415b2fb | female\n     2 | dd07064326bb9119189032316158f064 | 9c0e938f9eddbd5200ba348965afbc61 | male\n     3 | 2c5316fdd9d6595c1cceb70eed12e80c | 8a93d7d8f9d76acfaaa625c82a03ea8b | female\n     4 | 3dfa3b4f70d8cd2155567210e5043d2b | 32c156bc28f7f03ab5d28e2588a3dc19 | female\n\n\npostgres=# UPDATE users SET hash_firstname='maxim' WHERE id=1;\nUPDATE 1\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the terminal window of subscribing topic, you can receive the following messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'----- got message -----\n{"before":null,"after":{"id":1,"hash_firstname":"maxim","hash_lastname":"292113d30a3ccee0e19733dd7f88b258","gender":"male"},"source:{"version":"1.0.0.Final","connector":"postgresql","name":"foobar","ts_ms":1624045862644,"snapshot":"false","db":"postgres","schema":"public","table":"users","txId":595,"lsn":24419784,"xmin":null},"op":"u","ts_ms":1624045862648}\n...many more\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-of-mongodb",children:"Example of MongoDB"}),"\n",(0,r.jsx)(n.p,{children:"You need to create a configuration file before using the Pulsar Debezium connector."}),"\n",(0,r.jsx)(n.h3,{id:"configuration-3",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"You can use one of the following methods to create a configuration file."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "mongodb.hosts": "rs0/mongodb:27017",\n    "mongodb.name": "dbserver1",\n    "mongodb.user": "debezium",\n    "mongodb.password": "dbz",\n    "mongodb.task.id": "1",\n    "database.whitelist": "inventory",\n    "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"YAML"}),"\n",(0,r.jsxs)(n.p,{children:["You can create a ",(0,r.jsx)(n.code,{children:"debezium-mongodb-source-config.yaml"})," file and copy the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-io/debezium/mongodb/src/main/resources/debezium-mongodb-source-config.yaml",children:"contents"})," below to the ",(0,r.jsx)(n.code,{children:"debezium-mongodb-source-config.yaml"})," file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tenant: "public"\nnamespace: "default"\nname: "debezium-mongodb-source"\ntopicName: "debezium-mongodb-topic"\narchive: "connectors/pulsar-io-debezium-mongodb-3.0.8.nar"\nparallelism: 1\n\nconfigs:\n\n    ## config for pg, docker image: debezium/example-mongodb:0.10\n    mongodb.hosts: "rs0/mongodb:27017"\n    mongodb.name: "dbserver1"\n    mongodb.user: "debezium"\n    mongodb.password: "dbz"\n    mongodb.task.id: "1"\n    database.whitelist: "inventory"\n    database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"usage-2",children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to change the data of a MongoDB table using the Pulsar Debezium connector."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a MongoDB server with a database from which Debezium can capture changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker pull debezium/example-mongodb:0.10\ndocker run -d -it --rm --name pulsar-mongodb -e MONGODB_USER=mongodb -e MONGODB_PASSWORD=mongodb -p 27017:27017  debezium/example-mongodb:0.10\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use the following commands to initialize the data."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./usr/local/bin/init-inventory.sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If the local host cannot access the container network, you can update the file ",(0,r.jsx)(n.code,{children:"/etc/hosts"})," and add a rule ",(0,r.jsx)(n.code,{children:"127.0.0.1 6 f114527a95f"}),". f114527a95f is container id, you can try to get by using",(0,r.jsx)(n.code,{children:"docker ps -a"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a Pulsar service locally in standalone mode."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar standalone\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start the Pulsar Debezium connector in local run mode using one of the following methods."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"JSON"})," configuration file as shown previously."]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure the NAR file is available at ",(0,r.jsx)(n.code,{children:"connectors/pulsar-io-mongodb-3.0.8.nar"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-admin source localrun \\\n    --archive $PWD/connectors/pulsar-io-debezium-mongodb-3.0.8.nar \\\n    --name debezium-mongodb-source \\\n    --tenant public \\\n    --namespace default \\\n    --source-config \'{"mongodb.hosts": "rs0/mongodb:27017","mongodb.name": "dbserver1","mongodb.user": "debezium","mongodb.password": "dbz","mongodb.task.id": "1","database.whitelist": "inventory","database.history.pulsar.service.url": "pulsar://127.0.0.1:6650"}\'\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"The Debezium connector saves data in the following 4 types of topics:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic named with the database server name ( ",(0,r.jsx)(n.code,{children:"database.server.name"}),") for storing the database metadata messages, such as ",(0,r.jsx)(n.code,{children:"public/default/database.server.name"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"database.history.pulsar.topic"}),") for storing the database history information. The connector writes and recovers DDL statements on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["One topic (",(0,r.jsx)(n.code,{children:"offset.storage.topic"}),") for storing the offset metadata messages. The connector saves the last successfully-committed offsets on this topic."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"One per-table topic. The connector writes change events for all operations that occur in a table to a single Pulsar topic that is specific to that table."}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:"If the automatic topic creation is disabled on your broker, you need to manually create the above 4 types of topics."})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.strong,{children:"YAML"})," configuration file as shown previously."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bin/pulsar-admin source localrun  \\\n--source-config-file $PWD/debezium-mongodb-source-config.yaml\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Subscribe to the topic ",(0,r.jsx)(n.em,{children:"sub-products"})," for the ",(0,r.jsx)(n.em,{children:"inventory.products"})," table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'bin/pulsar-client consume -s "sub-products" public/default/dbserver1.inventory.products -n 0\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start a MongoDB client in docker."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker exec -it pulsar-mongodb /bin/bash\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A MongoDB client pops out."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'mongo -u debezium -p dbz --authenticationDatabase admin localhost:27017/inventory\ndb.products.update({"_id":NumberLong(104)},{$set:{weight:1.25}})\n'})}),"\n",(0,r.jsx)(n.p,{children:"In the terminal window of subscribing topic, you can receive the following messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'----- got message -----\n{"schema":{"type":"struct","fields":[{"type":"string","optional":false,"field":"id"}],"optional":false,"name":"dbserver1.inventory.products.Key"},"payload":{"id":"104"}}, value = {"schema":{"type":"struct","fields":[{"type":"string","optional":true,"name":"io.debezium.data.Json","version":1,"field":"after"},{"type":"string","optional":true,"name":"io.debezium.data.Json","version":1,"field":"patch"},{"type":"struct","fields":[{"type":"string","optional":false,"field":"version"},{"type":"string","optional":false,"field":"connector"},{"type":"string","optional":false,"field":"name"},{"type":"int64","optional":false,"field":"ts_ms"},{"type":"string","optional":true,"name":"io.debezium.data.Enum","version":1,"parameters":{"allowed":"true,last,false"},"default":"false","field":"snapshot"},{"type":"string","optional":false,"field":"db"},{"type":"string","optional":false,"field":"rs"},{"type":"string","optional":false,"field":"collection"},{"type":"int32","optional":false,"field":"ord"},{"type":"int64","optional":true,"field":"h"}],"optional":false,"name":"io.debezium.connector.mongo.Source","field":"source"},{"type":"string","optional":true,"field":"op"},{"type":"int64","optional":true,"field":"ts_ms"}],"optional":false,"name":"dbserver1.inventory.products.Envelope"},"payload":{"after":"{\\"_id\\": {\\"$numberLong\\": \\"104\\"},\\"name\\": \\"hammer\\",\\"description\\": \\"12oz carpenter\'s hammer\\",\\"weight\\": 1.25,\\"quantity\\": 4}","patch":null,"source":{"version":"0.10.0.Final","connector":"mongodb","name":"dbserver1","ts_ms":1573541905000,"snapshot":"true","db":"inventory","rs":"rs0","collection":"products","ord":1,"h":4983083486544392763},"op":"r","ts_ms":1573541909761}}.\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-of-oracle",children:"Example of Oracle"}),"\n",(0,r.jsx)(n.h3,{id:"packaging",children:"Packaging"}),"\n",(0,r.jsxs)(n.p,{children:["Oracle connector does not include Oracle JDBC driver and you need to package it with the connector.\nMajor reasons for not including the drivers are the variety of versions and Oracle licensing. It is recommended to use the driver provided with your Oracle DB installation, or you can ",(0,r.jsx)(n.a,{href:"https://www.oracle.com/database/technologies/appdev/jdbc.html",children:"download"})," one.\nIntegration tests have an ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/e2bc52d40450fa00af258c4432a5b71d50a5c6e0/tests/docker-images/latest-version-image/Dockerfile#L110-L122",children:"example"})," of packaging the driver into the connector NAR file."]}),"\n",(0,r.jsx)(n.h3,{id:"configuration-4",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Debezium ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/oracle.html#oracle-overview",children:"requires"})," Oracle DB with LogMiner or XStream API enabled.\nSupported options and steps for enabling them vary from version to version of Oracle DB.\nThe steps outlined in the ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/oracle.html#oracle-overview",children:"documentation"})," and used in the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/sources/debezium/DebeziumOracleDbSourceTester.java",children:"integration test"})," may or may not work for the version and edition of Oracle DB you are using.\nPlease refer to the ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/en/database/oracle/oracle-database/",children:"documentation for Oracle DB"})," as needed."]}),"\n",(0,r.jsxs)(n.p,{children:["Similarly to other connectors, you can use JSON or YAML to configure the connector.\nUsing YAML as an example, you can create a ",(0,r.jsx)(n.code,{children:"debezium-oracle-source-config.yaml"})," file like:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JSON"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "database.hostname": "localhost",\n  "database.port": "1521",\n  "database.user": "dbzuser",\n  "database.password": "dbz",\n  "database.dbname": "XE",\n  "database.server.name": "XE",\n  "schema.exclude.list": "system,dbzuser",\n  "snapshot.mode": "initial",\n  "topic.namespace": "public/default",\n  "task.class": "io.debezium.connector.oracle.OracleConnectorTask",\n  "value.converter": "org.apache.kafka.connect.json.JsonConverter",\n  "key.converter": "org.apache.kafka.connect.json.JsonConverter",\n  "typeClassName": "org.apache.pulsar.common.schema.KeyValue",\n  "database.history": "org.apache.pulsar.io.debezium.PulsarDatabaseHistory",\n  "database.tcpKeepAlive": "true",\n  "decimal.handling.mode": "double",\n  "database.history.pulsar.topic": "debezium-oracle-source-history-topic",\n  "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650"\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"YAML"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tenant: "public"\nnamespace: "default"\nname: "debezium-oracle-source"\ntopicName: "debezium-oracle-topic"\nparallelism: 1\n\nclassName: "org.apache.pulsar.io.debezium.oracle.DebeziumOracleSource"\ndatabase.dbname: "XE"\n\nconfigs:\n    database.hostname: "localhost"\n    database.port: "1521"\n    database.user: "dbzuser"\n    database.password: "dbz"\n    database.dbname: "XE"\n    database.server.name: "XE"\n    schema.exclude.list: "system,dbzuser"\n    snapshot.mode: "initial"\n    topic.namespace: "public/default"\n    task.class: "io.debezium.connector.oracle.OracleConnectorTask"\n    value.converter: "org.apache.kafka.connect.json.JsonConverter"\n    key.converter: "org.apache.kafka.connect.json.JsonConverter"\n    typeClassName: "org.apache.pulsar.common.schema.KeyValue"\n    database.history: "org.apache.pulsar.io.debezium.PulsarDatabaseHistory"\n    database.tcpKeepAlive: "true"\n    decimal.handling.mode: "double"\n    database.history.pulsar.topic: "debezium-oracle-source-history-topic"\n    database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the full list of configuration properties supported by Debezium, see ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/oracle.html#oracle-connector-properties",children:"Debezium Connector for Oracle"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"example-of-microsoft-sql",children:"Example of Microsoft SQL"}),"\n",(0,r.jsx)(n.h3,{id:"configuration-5",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Debezium ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/sqlserver.html#sqlserver-overview",children:"requires"})," SQL Server with CDC enabled.\nSteps outlined in the ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/sqlserver.html#setting-up-sqlserver",children:"documentation"})," and used in the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/sources/debezium/DebeziumMsSqlSourceTester.java",children:"integration test"}),".\nFor more information, see ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/enable-and-disable-change-data-capture-sql-server",children:"Enable and disable change data capture in Microsoft SQL Server"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Similarly to other connectors, you can use JSON or YAML to configure the connector."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JSON"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "database.hostname": "localhost",\n  "database.port": "1433",\n  "database.user": "sa",\n  "database.password": "MyP@ssw0rd!",\n  "database.dbname": "MyTestDB",\n  "database.server.name": "mssql",\n  "snapshot.mode": "schema_only",\n  "topic.namespace": "public/default",\n  "task.class": "io.debezium.connector.sqlserver.SqlServerConnectorTask",\n  "value.converter": "org.apache.kafka.connect.json.JsonConverter",\n  "key.converter": "org.apache.kafka.connect.json.JsonConverter",\n  "typeClassName": "org.apache.pulsar.common.schema.KeyValue",\n  "database.history": "org.apache.pulsar.io.debezium.PulsarDatabaseHistory",\n  "database.tcpKeepAlive": "true",\n  "decimal.handling.mode": "double",\n  "database.history.pulsar.topic": "debezium-mssql-source-history-topic",\n  "database.history.pulsar.service.url": "pulsar://127.0.0.1:6650"\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"YAML"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'tenant: "public"\nnamespace: "default"\nname: "debezium-mssql-source"\ntopicName: "debezium-mssql-topic"\nparallelism: 1\n\nclassName: "org.apache.pulsar.io.debezium.mssql.DebeziumMsSqlSource"\ndatabase.dbname: "mssql"\n\nconfigs:\n    database.hostname: "localhost"\n    database.port: "1433"\n    database.user: "sa"\n    database.password: "MyP@ssw0rd!"\n    database.dbname: "MyTestDB"\n    database.server.name: "mssql"\n    snapshot.mode: "schema_only"\n    topic.namespace: "public/default"\n    task.class: "io.debezium.connector.sqlserver.SqlServerConnectorTask"\n    value.converter: "org.apache.kafka.connect.json.JsonConverter"\n    key.converter: "org.apache.kafka.connect.json.JsonConverter"\n    typeClassName: "org.apache.pulsar.common.schema.KeyValue"\n    database.history: "org.apache.pulsar.io.debezium.PulsarDatabaseHistory"\n    database.tcpKeepAlive: "true"\n    decimal.handling.mode: "double"\n    database.history.pulsar.topic: "debezium-mssql-source-history-topic"\n    database.history.pulsar.service.url: "pulsar://127.0.0.1:6650"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the full list of configuration properties supported by Debezium, see ",(0,r.jsx)(n.a,{href:"https://debezium.io/documentation/reference/1.5/connectors/sqlserver.html#sqlserver-connector-properties",children:"Debezium Connector for MS SQL"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsx)(n.h3,{id:"debezium-postgres-connector-will-hang-when-creating-snap",children:"Debezium postgres connector will hang when creating snap"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"#18 prio=5 os_prio=31 tid=0x00007fd83096f800 nid=0xa403 waiting on condition [0x000070000f534000]\n    java.lang.Thread.State: WAITING (parking)\n     at sun.misc.Unsafe.park(Native Method)\n     - parking to wait for  <0x00000007ab025a58> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n     at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n     at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n     at java.util.concurrent.LinkedBlockingDeque.putLast(LinkedBlockingDeque.java:396)\n     at java.util.concurrent.LinkedBlockingDeque.put(LinkedBlockingDeque.java:649)\n     at io.debezium.connector.base.ChangeEventQueue.enqueue(ChangeEventQueue.java:132)\n     at io.debezium.connector.postgresql.PostgresConnectorTask$Lambda$203/385424085.accept(Unknown Source)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.sendCurrentRecord(RecordsSnapshotProducer.java:402)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.readTable(RecordsSnapshotProducer.java:321)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.lambda$takeSnapshot$6(RecordsSnapshotProducer.java:226)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer$Lambda$240/1347039967.accept(Unknown Source)\n     at io.debezium.jdbc.JdbcConnection.queryWithBlockingConsumer(JdbcConnection.java:535)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.takeSnapshot(RecordsSnapshotProducer.java:224)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.lambda$start$0(RecordsSnapshotProducer.java:87)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer$Lambda$206/589332928.run(Unknown Source)\n     at java.util.concurrent.CompletableFuture.uniRun(CompletableFuture.java:705)\n     at java.util.concurrent.CompletableFuture.uniRunStage(CompletableFuture.java:717)\n     at java.util.concurrent.CompletableFuture.thenRun(CompletableFuture.java:2010)\n     at io.debezium.connector.postgresql.RecordsSnapshotProducer.start(RecordsSnapshotProducer.java:87)\n     at io.debezium.connector.postgresql.PostgresConnectorTask.start(PostgresConnectorTask.java:126)\n     at io.debezium.connector.common.BaseSourceTask.start(BaseSourceTask.java:47)\n     at org.apache.pulsar.io.kafka.connect.KafkaConnectSource.open(KafkaConnectSource.java:127)\n     at org.apache.pulsar.io.debezium.DebeziumSource.open(DebeziumSource.java:100)\n     at org.apache.pulsar.functions.instance.JavaInstanceRunnable.setupInput(JavaInstanceRunnable.java:690)\n     at org.apache.pulsar.functions.instance.JavaInstanceRunnable.setupJavaInstance(JavaInstanceRunnable.java:200)\n     at org.apache.pulsar.functions.instance.JavaInstanceRunnable.run(JavaInstanceRunnable.java:230)\n     at java.lang.Thread.run(Thread.java:748)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you encounter the above problems in synchronizing data, please refer to ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/issues/4075",children:"this"})," and add the following configuration to the configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"max.queue.size=\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var a=s(96540);const r={},o=a.createContext(r);function t(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);