"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[16950],{71408:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"schema-get-started","title":"Get started","description":"This hands-on tutorial provides instructions and examples on how to construct schemas. For instructions on administrative tasks, see Manage schema.","source":"@site/versioned_docs/version-3.1.x/schema-get-started.md","sourceDirName":".","slug":"/schema-get-started","permalink":"/docs/3.1.x/schema-get-started","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-3.1.x/schema-get-started.md","tags":[],"version":"3.1.x","frontMatter":{"id":"schema-get-started","title":"Get started","sidebar_label":"Get started"},"sidebar":"docsSidebar","previous":{"title":"Understand schema","permalink":"/docs/3.1.x/schema-understand"},"next":{"title":"Overview","permalink":"/docs/3.1.x/functions-overview"}}');var r=s(74848),c=s(28453),o=s(11470),t=s(19365);const i={id:"schema-get-started",title:"Get started",sidebar_label:"Get started"},l=void 0,d={},u=[{value:"Construct a schema",id:"construct-a-schema",level:2},{value:"bytes",id:"bytes",level:3},{value:"string",id:"string",level:3},{value:"key/value",id:"keyvalue",level:3},{value:"Avro",id:"avro",level:3},{value:"JSON",id:"json",level:3},{value:"ProtobufNative",id:"protobufnative",level:3},{value:"Protobuf",id:"protobuf",level:3},{value:"Native Avro",id:"native-avro",level:3},{value:"AUTO_PRODUCE",id:"auto_produce",level:3},{value:"AUTO_CONSUME",id:"auto_consume",level:3},{value:"Customize schema storage",id:"customize-schema-storage",level:2},{value:"Implement <code>SchemaStorage</code> interface",id:"implement-schemastorage-interface",level:3},{value:"Implement <code>SchemaStorageFactory</code> interface",id:"implement-schemastoragefactory-interface",level:3},{value:"Deploy custom schema storage",id:"deploy-custom-schema-storage",level:3}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This hands-on tutorial provides instructions and examples on how to construct schemas. For instructions on administrative tasks, see ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/admin-api-schemas",children:"Manage schema"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"construct-a-schema",children:"Construct a schema"}),"\n",(0,r.jsx)(n.h3,{id:"bytes",children:"bytes"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to construct a ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#primitive-type",children:"bytes schema"})," using language-specific clients and use it to produce and consume messages."]}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],children:[(0,r.jsx)(t.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<byte[]> producer = pulsarClient.newProducer(Schema.BYTES)\n       .topic("my-topic")\n       .create();\nConsumer<byte[]> consumer = pulsarClient.newConsumer(Schema.BYTES)\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nproducer.newMessage().value("message".getBytes()).send();\n\nMessage<byte[]> message = consumer.receive(5, TimeUnit.SECONDS);\n'})})}),(0,r.jsx)(t.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'SchemaInfo schemaInfo = SchemaInfo(SchemaType::BYTES, "Bytes", "");\nProducer producer;\nclient.createProducer("topic-bytes", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::array<char, 1024> buffer;\nproducer.send(MessageBuilder().setContent(buffer.data(), buffer.size()).build());\nConsumer consumer;\nres = client.subscribe("topic-bytes", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg, 3000);\n'})})}),(0,r.jsx)(t.A,{value:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"producer = client.create_producer(\n   'bytes-schema-topic',\n   schema=BytesSchema())\nproducer.send(b\"Hello\")\n\nconsumer = client.subscribe(\n   'bytes-schema-topic',\n\t'sub',\n\tschema=BytesSchema())\nmsg = consumer.receive()\ndata = msg.value()\n"})})}),(0,r.jsx)(t.A,{value:"Go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'producer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewBytesSchema(nil),\n})\nid, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: []byte("message"),\n})\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewBytesSchema(nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Exclusive,\n})\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"string",children:"string"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to construct a ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#primitive-type",children:"string schema"})," using language-specific clients and use it to produce and consume messages."]}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],children:[(0,r.jsx)(t.A,{value:"Java",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<String> producer = client.newProducer(Schema.STRING).create();\nproducer.newMessage().value("Hello Pulsar!").send();\n\nConsumer<String> consumer = client.newConsumer(Schema.STRING).subscribe();\nMessage<String> message = consumer.receive();\n'})})}),(0,r.jsx)(t.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'SchemaInfo schemaInfo = SchemaInfo(SchemaType::STRING, "String", "");\nProducer producer;\nclient.createProducer("topic-string", ProducerConfiguration().setSchema(schemaInfo), producer);\nproducer.send(MessageBuilder().setContent("message").build());\n\nConsumer consumer;\nclient.subscribe("topic-string", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg, 3000);\n'})})}),(0,r.jsx)(t.A,{value:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"producer = client.create_producer(\n      'string-schema-topic',\n      schema=StringSchema())\nproducer.send(\"Hello\")\n\nconsumer = client.subscribe(\n\t\t'string-schema-topic',\n\t\t'sub',\n\t\tschema=StringSchema())\nmsg = consumer.receive()\nstr = msg.value()\n"})})}),(0,r.jsx)(t.A,{value:"Go",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'producer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewStringSchema(nil),\n})\nid, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: "message",\n})\n\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewStringSchema(nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Exclusive,\n})\nmsg, err := consumer.Receive(context.Background())\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"keyvalue",children:"key/value"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to construct a ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#keyvalue-schema",children:"key/value schema"})," using language-specific clients and use it to produce and consume messages."]}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsx)(t.A,{value:"Java",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Construct a key/value schema with ",(0,r.jsx)(n.code,{children:"INLINE"})," encoding type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Schema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\n    Schema.INT32,\n    Schema.STRING,\n    KeyValueEncodingType.INLINE\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, construct a key/value schema with ",(0,r.jsx)(n.code,{children:"SEPARATED"})," encoding type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Schema<KeyValue<Integer, String>> kvSchema = Schema.KeyValue(\n    Schema.INT32,\n    Schema.STRING,\n    KeyValueEncodingType.SEPARATED\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Produce messages using a key/value schema."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<KeyValue<Integer, String>> producer = client.newProducer(kvSchema)\n    .topic(topicName)\n    .create();\n\nfinal int key = 100;\nfinal String value = "value-100";\n\n// send the key/value message\nproducer.newMessage()\n    .value(new KeyValue(key, value))\n    .send();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Consume messages using a key/value schema."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Consumer<KeyValue<Integer, String>> consumer = client.newConsumer(kvSchema)\n    ...\n    .topic(topicName)\n    .subscriptionName(subscriptionName).subscribe();\n\n// receive key/value pair\nMessage<KeyValue<Integer, String>> msg = consumer.receive();\nKeyValue<Integer, String> kv = msg.getValue();\n"})}),"\n"]}),"\n"]})}),(0,r.jsx)(t.A,{value:"C++",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Construct a key/value schema with ",(0,r.jsx)(n.code,{children:"INLINE"})," encoding type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'//Prepare keyValue schema\nstd::string jsonSchema =\nR"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo keySchema(JSON, "key-json", jsonSchema);\nSchemaInfo valueSchema(JSON, "value-json", jsonSchema);\nSchemaInfo keyValueSchema(keySchema, valueSchema, KeyValueEncodingType::INLINE);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Produce messages using a key/value schema."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'//Create Producer\nProducer producer;\nclient.createProducer("my-topic", ProducerConfiguration().setSchema(keyValueSchema), producer);\n\n//Prepare message\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nKeyValue keyValue(std::move(jsonData), std::move(jsonData));\nMessage msg = MessageBuilder().setContent(keyValue).setProperty("x", "1").build();\n//Send message\nproducer.send(msg);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Consume messages using a key/value schema."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'//Create Consumer\nConsumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(keyValueSchema), consumer);\n\n//Receive message\nMessage message;\nconsumer.receive(message);\n'})}),"\n"]}),"\n"]})})]}),"\n",(0,r.jsx)(n.h3,{id:"avro",children:"Avro"}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],children:[(0,r.jsxs)(t.A,{value:"Java",children:[(0,r.jsxs)(n.p,{children:["Suppose you have a ",(0,r.jsx)(n.code,{children:"SensorReading"})," class as follows, and you'd like to transmit it over a Pulsar topic."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class SensorReading {\n    public float temperature;\n\n    public SensorReading(float temperature) {\n        this.temperature = temperature;\n    }\n\n    // A no-arg constructor is required\n    public SensorReading() {\n    }\n\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public void setTemperature(float temperature) {\n        this.temperature = temperature;\n    }\n}\n"})}),(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"Producer<SensorReading>"})," (or ",(0,r.jsx)(n.code,{children:"Consumer<SensorReading>"}),") like this:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<SensorReading> producer = client.newProducer(AvroSchema.of(SensorReading.class))\n        .topic("sensor-readings")\n        .create();\n'})})]}),(0,r.jsx)(t.A,{value:"C++",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Send messages\nstatic const std::string exampleSchema =\n    "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\","\n    "\\"fields\\":[{\\"name\\":\\"a\\",\\"type\\":\\"int\\"},{\\"name\\":\\"b\\",\\"type\\":\\"int\\"}]}";\nProducer producer;\nProducerConfiguration producerConf;\nproducerConf.setSchema(SchemaInfo(AVRO, "Avro", exampleSchema));\nclient.createProducer("topic-avro", producerConf, producer);\n\n// Receive messages\nstatic const std::string exampleSchema =\n    "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\","\n    "\\"fields\\":[{\\"name\\":\\"a\\",\\"type\\":\\"int\\"},{\\"name\\":\\"b\\",\\"type\\":\\"int\\"}]}";\nConsumerConfiguration consumerConf;\nConsumer consumer;\nconsumerConf.setSchema(SchemaInfo(AVRO, "Avro", exampleSchema));\nclient.subscribe("topic-avro", "sub-2", consumerConf, consumer)\n'})})}),(0,r.jsxs)(t.A,{value:"Python",children:[(0,r.jsxs)(n.p,{children:["You can declare an ",(0,r.jsx)(n.code,{children:"AvroSchema"})," using Python through one of the following methods."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 1: Record"})}),(0,r.jsxs)(n.p,{children:["Declare an ",(0,r.jsx)(n.code,{children:"AvroSchema"})," by passing a class that inherits from ",(0,r.jsx)(n.code,{children:"pulsar.schema.Record"})," and defines the fields as class variables."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class Example(Record):\n    a = Integer()\n    b = Integer()\n\nproducer = client.create_producer(\n   'avro-schema-topic',\n   schema=AvroSchema(Example))\nr = Example(a=1, b=2)\nproducer.send(r)\n\nconsumer = client.subscribe(\n   'avro-schema-topic',\n\t'sub',\n\tschema=AvroSchema(Example))\nmsg = consumer.receive()\ne = msg.value()\n"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 2: JSON definition"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Declare an ",(0,r.jsx)(n.code,{children:"AvroSchema"})," using JSON. In this case, Avro schemas are defined using JSON."]}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of ",(0,r.jsx)(n.code,{children:"AvroSchema"})," defined using a JSON file (",(0,r.jsx)(n.code,{children:"company.avsc"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "doc": "this is doc",\n    "namespace": "example.avro",\n    "type": "record",\n    "name": "Company",\n    "fields": [\n        {"name": "name", "type": ["null", "string"]},\n        {"name": "address", "type": ["null", "string"]},\n        {"name": "employees", "type": ["null", {"type": "array", "items": {\n            "type": "record",\n            "name": "Employee",\n            "fields": [\n                {"name": "name", "type": ["null", "string"]},\n                {"name": "age", "type": ["null", "int"]}\n            ]\n        }}]},\n        {"name": "labels", "type": ["null", {"type": "map", "values": "string"}]}\n    ]\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Load a schema definition from a file by using ",(0,r.jsx)(n.a,{href:"https://avro.apache.org/docs/current/getting-started-python/",children:(0,r.jsx)(n.code,{children:"avro.schema"})})," or ",(0,r.jsx)(n.a,{href:"https://fastavro.readthedocs.io/en/latest/schema.html#fastavro._schema_py.load_schema",children:(0,r.jsx)(n.code,{children:"fastavro.schema"})}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you use the ",(0,r.jsx)(n.a,{href:"#method-2-json-definition",children:"JSON definition"})," method to declare an ",(0,r.jsx)(n.code,{children:"AvroSchema"}),", you need to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.a,{href:"https://developers.google.com/edu/python/dict-files",children:"Python dict"})," to produce and consume messages, which is different from using the ",(0,r.jsx)(n.a,{href:"#method-1-record",children:"Record"})," method."]}),"\n",(0,r.jsxs)(n.li,{children:["Set the value of the ",(0,r.jsx)(n.code,{children:"_record_cls"})," parameter to ",(0,r.jsx)(n.code,{children:"None"})," when generating an ",(0,r.jsx)(n.code,{children:"AvroSchema"})," object."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastavro.schema import load_schema\nfrom pulsar.schema import *\nschema_definition = load_schema("examples/company.avsc")\navro_schema = AvroSchema(None, schema_definition=schema_definition)\nproducer = client.create_producer(\n    topic=topic,\n    schema=avro_schema)\nconsumer = client.subscribe(topic, \'test\', schema=avro_schema)\ncompany = {\n    "name": "company-name" + str(i),\n    "address": \'xxx road xxx street \' + str(i),\n    "employees": [\n        {"name": "user" + str(i), "age": 20 + i},\n        {"name": "user" + str(i), "age": 30 + i},\n        {"name": "user" + str(i), "age": 35 + i},\n    ],\n    "labels": {\n        "industry": "software" + str(i),\n        "scale": ">100",\n        "funds": "1000000.0"\n    }\n}\nproducer.send(company)\nmsg = consumer.receive()\n# Users could get a dict object by `value()` method.\nmsg.value()\n'})}),"\n"]}),"\n"]})]}),(0,r.jsxs)(t.A,{value:"Go",children:[(0,r.jsxs)(n.p,{children:["Suppose you have an ",(0,r.jsx)(n.code,{children:"avroExampleStruct"})," class as follows, and you'd like to transmit it over a Pulsar topic."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type avroExampleStruct struct {\n    ID   int\n    Name string\n}\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add an ",(0,r.jsx)(n.code,{children:"avroSchemaDef"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var (\n    exampleSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n  "\\"fields\\":[{\\"name\\":\\"ID\\",\\"type\\":\\"int\\"},{\\"name\\":\\"Name\\",\\"type\\":\\"string\\"}]}"\n)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create producer and consumer to send/receive messages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'//Create producer and send message\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "my-topic",\n    Schema: pulsar.NewAvroSchema(exampleSchemaDef, nil),\n})\n\nmsgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: avroExampleStruct{\n       ID:   10,\n       Name: "avroExampleStruct",\n  },\n})\n\n//Create Consumer and receive message\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:            "my-topic",\n    Schema:           pulsar.NewAvroSchema(exampleSchemaDef, nil),\n    SubscriptionName: "my-sub",\n    Type:             pulsar.Shared,\n})\nmessage, err := consumer.Receive(context.Background())\n'})}),"\n"]}),"\n"]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"json",children:"JSON"}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Python",value:"Python"},{label:"Go",value:"Go"}],children:[(0,r.jsxs)(t.A,{value:"Java",children:[(0,r.jsxs)(n.p,{children:["Similar to using ",(0,r.jsx)(n.code,{children:"AvroSchema"}),", you can declare a ",(0,r.jsx)(n.code,{children:"JsonSchema"})," by passing a class. The only difference is to use  ",(0,r.jsx)(n.code,{children:"JsonSchema"})," instead of ",(0,r.jsx)(n.code,{children:"AvroSchema"})," when defining the schema type, as shown below. For how to use ",(0,r.jsx)(n.code,{children:"AvroSchema"})," via record, see ",(0,r.jsx)(n.a,{href:"#method-1-record",children:"Method 1 - Record"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'static class SchemaDemo {\n   public String name;\n   public int age;\n}\n\nProducer<SchemaDemo> producer = pulsarClient.newProducer(Schema.JSON(SchemaDemo.class))\n       .topic("my-topic")\n       .create();\nConsumer<SchemaDemo> consumer = pulsarClient.newConsumer(Schema.JSON(SchemaDemo.class))\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(schemaDemo).send();\n\nMessage<SchemaDemo> message = consumer.receive(5, TimeUnit.SECONDS);\n'})})]}),(0,r.jsxs)(t.A,{value:"C++",children:[(0,r.jsxs)(n.p,{children:["To declare a ",(0,r.jsx)(n.code,{children:"JSON"})," schema using C++, do the following:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Pass a JSON string like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Std::string jsonSchema = R"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo schemaInfo = SchemaInfo(JSON, "JSON", jsonSchema);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a producer and use it to send messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'client.createProducer("my-topic", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nproducer.send(MessageBuilder().setContent(std::move(jsonData)).build());\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create consumer and receive message."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Consumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(schemaInfo), consumer);\nMessage msg;\nconsumer.receive(msg);\n'})}),"\n"]}),"\n"]})]}),(0,r.jsxs)(t.A,{value:"Python",children:[(0,r.jsxs)(n.p,{children:["You can declare a ",(0,r.jsx)(n.code,{children:"JsonSchema"})," by passing a class that inherits from ",(0,r.jsx)(n.code,{children:"pulsar.schema.Record"})," and defines the fields as class variables. This is similar to using ",(0,r.jsx)(n.code,{children:"AvroSchema"}),". The only difference is to use  ",(0,r.jsx)(n.code,{children:"JsonSchema"})," instead of ",(0,r.jsx)(n.code,{children:"AvroSchema"})," when defining schema type, as shown below. For how to use ",(0,r.jsx)(n.code,{children:"AvroSchema"})," via record, see (#method-1-record)."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"producer = client.create_producer(\n   'avro-schema-topic',\n   schema=JsonSchema(Example))\n\nconsumer = client.subscribe(\n\t'avro-schema-topic',\n\t'sub',\n\tschema=JsonSchema(Example))\n"})})]}),(0,r.jsxs)(t.A,{value:"Go",children:[(0,r.jsxs)(n.p,{children:["Suppose you have an ",(0,r.jsx)(n.code,{children:"avroExampleStruct"})," class as follows, and you'd like to transmit it as JSON form over a Pulsar topic."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type jsonExampleStruct struct {\n    ID   int    `json:"id"`\n    Name string `json:"name"`\n}\n'})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Add a ",(0,r.jsx)(n.code,{children:"jsonSchemaDef"})," like this:"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'   jsonSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n  "\\"fields\\":[{\\"name\\":\\"ID\\",\\"type\\":\\"int\\"},{\\"name\\":\\"Name\\",\\"type\\":\\"string\\"}]}"\n'})}),(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Create a producer/consumer to send/receive messages:"}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'   //Create producer and send message\n   producer, err := client.CreateProducer(pulsar.ProducerOptions{\n       Topic:  "my-topic",\n       Schema: pulsar.NewJSONSchema(jsonSchemaDef, nil),\n   })\n\n   msgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n       Value: jsonExampleStruct{\n           ID:   10,\n           Name: "jsonExampleStruct",\n     },\n   })\n\n   //Create Consumer and receive message\n   consumer, err := client.Subscribe(pulsar.ConsumerOptions{\n       Topic:            "my-topic",\n       Schema:           pulsar.NewJSONSchema(jsonSchemaDef, nil),\n       SubscriptionName: "my-sub",\n       Type:             pulsar.Exclusive,\n   })\n   message, err := consumer.Receive(context.Background())\n'})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"protobufnative",children:"ProtobufNative"}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"}],children:[(0,r.jsxs)(t.A,{value:"Java",children:[(0,r.jsx)(n.p,{children:"The following example shows how to create a producer/consumer with a ProtobufNative schema using Java."}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Generate the ",(0,r.jsx)(n.code,{children:"DemoMessage"})," class using Protobuf3 or later versions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\nmessage DemoMessage {\n   string stringField = 1;\n   double doubleField = 2;\n   int32 intField = 6;\n   TestEnum testEnum = 4;\n   SubMessage nestedField = 5;\n   repeated string repeatedField = 10;\n   proto.external.ExternalMessage externalMessage = 11;\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a producer/consumer to send/receive messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<DemoMessage> producer = pulsarClient.newProducer(Schema.PROTOBUF_NATIVE(DemoMessage.class))\n    .topic("my-topic")\n    .create();\nConsumer<DemoMessage> consumer = pulsarClient.newConsumer(Schema.PROTOBUF_NATIVE(DemoMessage.class))\n    .topic("my-topic")\n    .subscriptionName("my-sub")\n    .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(DemoMessage.newBuilder().setStringField("string-field-value")\n    .setIntField(1).build()).send();\n\nMessage<DemoMessage> message = consumer.receive(5, TimeUnit.SECONDS);\n'})}),"\n"]}),"\n"]})]}),(0,r.jsxs)(t.A,{value:"C++",children:[(0,r.jsx)(n.p,{children:"The following example shows how to create a producer/consumer with a ProtobufNative schema."}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Generate the ",(0,r.jsx)(n.code,{children:"User"})," class using Protobuf3 or later versions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\nmessage User {\n    string name = 1;\n    int32 age = 2;\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Include the ",(0,r.jsx)(n.code,{children:"ProtobufNativeSchema.h"})," in your source code. Ensure the Protobuf dependency has been added to your project."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <pulsar/ProtobufNativeSchema.h>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a producer to send a ",(0,r.jsx)(n.code,{children:"User"})," instance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'ProducerConfiguration producerConf;\nproducerConf.setSchema(createProtobufNativeSchema(User::GetDescriptor()));\nProducer producer;\nclient.createProducer("topic-protobuf", producerConf, producer);\nUser user;\nuser.set_name("my-name");\nuser.set_age(10);\nstd::string content;\nuser.SerializeToString(&content);\nproducer.send(MessageBuilder().setContent(content).build());\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a consumer to receive a ",(0,r.jsx)(n.code,{children:"User"})," instance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'ConsumerConfiguration consumerConf;\nconsumerConf.setSchema(createProtobufNativeSchema(User::GetDescriptor()));\nconsumerConf.setSubscriptionInitialPosition(InitialPositionEarliest);\nConsumer consumer;\nclient.subscribe("topic-protobuf", "my-sub", consumerConf, consumer);\nMessage msg;\nconsumer.receive(msg);\nUser user2;\nuser2.ParseFromArray(msg.getData(), msg.getLength());\n'})}),"\n"]}),"\n"]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"protobuf",children:"Protobuf"}),"\n",(0,r.jsxs)(o.A,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"C++",value:"C++"},{label:"Go",value:"Go"}],children:[(0,r.jsxs)(t.A,{value:"Java",children:[(0,r.jsxs)(n.p,{children:["Constructing a protobuf schema using Java is similar to constructing a ",(0,r.jsx)(n.code,{children:"ProtobufNative"})," schema. The only difference is to use ",(0,r.jsx)(n.code,{children:"PROTOBUF"})," instead of ",(0,r.jsx)(n.code,{children:"PROTOBUF_NATIVE"})," when defining schema type as shown below."]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Generate the ",(0,r.jsx)(n.code,{children:"DemoMessage"})," class using Protobuf3 or later versions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\nmessage DemoMessage {\n   string stringField = 1;\n   double doubleField = 2;\n   int32 intField = 6;\n   TestEnum testEnum = 4;\n   SubMessage nestedField = 5;\n   repeated string repeatedField = 10;\n   proto.external.ExternalMessage externalMessage = 11;\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a producer/consumer to send/receive messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Producer<DemoMessage> producer = pulsarClient.newProducer(Schema.PROTOBUF(DemoMessage.class))\n       .topic("my-topic")\n       .create();\nConsumer<DemoMessage> consumer = pulsarClient.newConsumer(Schema.PROTOBUF(DemoMessage.class))\n       .topic("my-topic")\n       .subscriptionName("my-sub")\n       .subscribe();\n\nSchemaDemo schemaDemo = new SchemaDemo();\nschemaDemo.name = "puslar";\nschemaDemo.age = 20;\nproducer.newMessage().value(DemoMessage.newBuilder().setStringField("string-field-value")\n    .setIntField(1).build()).send();\n\nMessage<DemoMessage> message = consumer.receive(5, TimeUnit.SECONDS);\n'})}),"\n"]}),"\n"]})]}),(0,r.jsxs)(t.A,{value:"C++",children:[(0,r.jsxs)(n.p,{children:["Constructing a protobuf schema using C++ is similar to that using ",(0,r.jsx)(n.code,{children:"JSON"}),". The only difference is to use ",(0,r.jsx)(n.code,{children:"PROTOBUF"})," instead of ",(0,r.jsx)(n.code,{children:"JSON"})," when defining the schema type as shown below."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'std::string jsonSchema =\n   R"({"type":"record","name":"cpx","fields":[{"name":"re","type":"double"},{"name":"im","type":"double"}]})";\nSchemaInfo schemaInfo = SchemaInfo(pulsar::PROTOBUF, "PROTOBUF", jsonSchema);\n'})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a producer to send messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Producer producer;\nclient.createProducer("my-topic", ProducerConfiguration().setSchema(schemaInfo), producer);\nstd::string jsonData = "{\\"re\\":2.1,\\"im\\":1.23}";\nproducer.send(MessageBuilder().setContent(std::move(jsonData)).build());\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a consumer to receive messages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'Consumer consumer;\nclient.subscribe("my-topic", "my-sub", ConsumerConfiguration().setSchema(schemaInfo),   consumer);\nMessage msg;\nconsumer.receive(msg);\n'})}),"\n"]}),"\n"]})]}),(0,r.jsxs)(t.A,{value:"Go",children:[(0,r.jsxs)(n.p,{children:["Suppose you have a ",(0,r.jsx)(n.code,{children:"protobufDemo"})," class as follows, and you'd like to transmit it in JSON form over a Pulsar topic."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type protobufDemo struct {\n    Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`\n    Msf                  string   `protobuf:"bytes,2,opt,name=msf,proto3" json:"msf,omitempty"`\n    XXX_NoUnkeyedLiteral struct{} `json:"-"`\n    XXX_unrecognized     []byte   `json:"-"`\n    XXX_sizecache        int32    `json:"-"`\n}\n'})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add a ",(0,r.jsx)(n.code,{children:"protoSchemaDef"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var (\n    protoSchemaDef = "{\\"type\\":\\"record\\",\\"name\\":\\"Example\\",\\"namespace\\":\\"test\\"," +\n        "\\"fields\\":[{\\"name\\":\\"num\\",\\"type\\":\\"int\\"},{\\"name\\":\\"msf\\",\\"type\\":\\"string\\"}]}"\n)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a producer/consumer to send/receive messages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'psProducer := pulsar.NewProtoSchema(protoSchemaDef, nil)\nproducer, err := client.CreateProducer(pulsar.ProducerOptions{\n    Topic:  "proto",\n    Schema: psProducer,\n})\nmsgId, err := producer.Send(context.Background(), &pulsar.ProducerMessage{\n    Value: &protobufDemo{\n        Num: 100,\n        Msf: "pulsar",\n  },\n})\npsConsumer := pulsar.NewProtoSchema(protoSchemaDef, nil)\nconsumer, err := client.Subscribe(pulsar.ConsumerOptions{\n    Topic:                       "proto",\n    SubscriptionName:            "sub-1",\n    Schema:                      psConsumer,\n    SubscriptionInitialPosition: pulsar.SubscriptionPositionEarliest,\n})\nmsg, err := consumer.Receive(context.Background())\n'})}),"\n"]}),"\n"]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"native-avro",children:"Native Avro"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to construct a ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#struct-schema",children:"native Avro schema"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'org.apache.avro.Schema nativeAvroSchema = \u2026 ;\nProducer<byte[]> producer = pulsarClient.newProducer().topic("ingress").create();\nbyte[] content = \u2026 ;\nproducer.newMessage(Schema.NATIVE_AVRO(nativeAvroSchema)).value(content).send();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"auto_produce",children:"AUTO_PRODUCE"}),"\n",(0,r.jsxs)(n.p,{children:["Suppose you have a Pulsar topic ",(0,r.jsx)(n.em,{children:"P"}),", a producer processing messages from a Kafka topic ",(0,r.jsx)(n.em,{children:"K"}),", an application reading the messages from ",(0,r.jsx)(n.em,{children:"K"})," and writing the messages to ",(0,r.jsx)(n.em,{children:"P"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to construct an ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#auto-schema",children:"AUTO_PRODUCE"})," schema to verify whether the bytes produced by ",(0,r.jsx)(n.em,{children:"K"})," can be sent to ",(0,r.jsx)(n.em,{children:"P"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Produce<byte[]> pulsarProducer = client.newProducer(Schema.AUTO_PRODUCE_BYTES())\n    \u2026\n    .create();\nbyte[] kafkaMessageBytes = \u2026 ;\npulsarProducer.produce(kafkaMessageBytes);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"auto_consume",children:"AUTO_CONSUME"}),"\n",(0,r.jsxs)(n.p,{children:["Suppose you have a Pulsar topic ",(0,r.jsx)(n.em,{children:"P"})," and a consumer ",(0,r.jsx)(n.em,{children:"MySQL"})," that receives messages from ",(0,r.jsx)(n.em,{children:"P"}),", and you want to check if these messages have the information that your application needs to count."]}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to construct an ",(0,r.jsx)(n.a,{href:"/docs/3.1.x/schema-understand#auto-schema",children:"AUTO_CONSUME schema"})," to verify whether the bytes produced by ",(0,r.jsx)(n.em,{children:"P"})," can be sent to ",(0,r.jsx)(n.em,{children:"MySQL"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Consumer<GenericRecord> pulsarConsumer = client.newConsumer(Schema.AUTO_CONSUME())\n    \u2026\n    .subscribe();\n\nMessage<GenericRecord> msg = consumer.receive() ;\nGenericRecord record = msg.getValue();\nrecord.getFields().forEach((field -> {\n   if (field.getName().equals("theNeedFieldName")) {\n       Object recordField = record.getField(field);\n       //Do some things\n   }\n}));\n'})}),"\n",(0,r.jsx)(n.h2,{id:"customize-schema-storage",children:"Customize schema storage"}),"\n",(0,r.jsxs)(n.p,{children:["By default, Pulsar stores various data types of schemas in ",(0,r.jsx)(n.a,{href:"https://bookkeeper.apache.org",children:"Apache BookKeeper"})," deployed alongside Pulsar. Alternatively, you can use another storage system if needed."]}),"\n",(0,r.jsxs)(n.p,{children:["To use a non-default (non-BookKeeper) storage system for Pulsar schemas, you need to implement the following Java interfaces before ",(0,r.jsx)(n.a,{href:"#deploy-custom-schema-storage",children:"deploying custom schema storage"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#implement-schemastorage-interface",children:"SchemaStorage interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#implement-schemastoragefactory-interface",children:"SchemaStorageFactory interface"})}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"implement-schemastorage-interface",children:["Implement ",(0,r.jsx)(n.code,{children:"SchemaStorage"})," interface"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SchemaStorage"})," interface has the following methods:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface SchemaStorage {\n    // How schemas are updated\n    CompletableFuture<SchemaVersion> put(String key, byte[] value, byte[] hash);\n\n    // How schemas are fetched from storage\n    CompletableFuture<StoredSchema> get(String key, SchemaVersion version);\n\n    // How schemas are deleted\n    CompletableFuture<SchemaVersion> delete(String key);\n\n    // Utility method for converting a schema version byte array to a SchemaVersion object\n    SchemaVersion versionFromBytes(byte[] version);\n\n    // Startup behavior for the schema storage client\n    void start() throws Exception;\n\n    // Shutdown behavior for the schema storage client\n    void close() throws Exception;\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["For a complete example of ",(0,r.jsx)(n.strong,{children:"schema storage"})," implementation, see the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/BookkeeperSchemaStorage.java",children:"BookKeeperSchemaStorage"})," class."]})}),"\n",(0,r.jsxs)(n.h3,{id:"implement-schemastoragefactory-interface",children:["Implement ",(0,r.jsx)(n.code,{children:"SchemaStorageFactory"})," interface"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"SchemaStorageFactory"})," interface has the following method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface SchemaStorageFactory {\n    @NotNull\n    SchemaStorage create(PulsarService pulsar) throws Exception;\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["For a complete example of ",(0,r.jsx)(n.strong,{children:"schema storage factory"})," implementation, see the ",(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/blob/master/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/schema/BookkeeperSchemaStorageFactory.java",children:"BookKeeperSchemaStorageFactory"})," class."]})}),"\n",(0,r.jsx)(n.h3,{id:"deploy-custom-schema-storage",children:"Deploy custom schema storage"}),"\n",(0,r.jsx)(n.p,{children:"To use your custom schema storage implementation, perform the following steps."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Package the implementation in a ",(0,r.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/deployment/jar/basicsindex.html",children:"JAR"})," file."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add the JAR file to the ",(0,r.jsx)(n.code,{children:"lib"})," folder in your Pulsar binary or source distribution."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Change the ",(0,r.jsx)(n.code,{children:"schemaRegistryStorageClassName"})," configuration in the ",(0,r.jsx)(n.code,{children:"conf/broker.conf"})," file to your custom factory class."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start Pulsar."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},19365:(e,n,s)=>{s.d(n,{A:()=>o});s(96540);var a=s(34164);const r={tabItem:"tabItem_Ymn6"};var c=s(74848);function o(e){let{children:n,hidden:s,className:o}=e;return(0,c.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,o),hidden:s,children:n})}},11470:(e,n,s)=>{s.d(n,{A:()=>y});var a=s(96540),r=s(34164),c=s(23104),o=s(56347),t=s(205),i=s(57485),l=s(31682),d=s(70679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:s}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:a,default:r}}=e;return{value:n,label:s,attributes:a,default:r}}))}(s);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function h(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const r=(0,o.W6)(),c=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,i.aZ)(c),(0,a.useCallback)((e=>{if(!c)return;const n=new URLSearchParams(r.location.search);n.set(c,e),r.replace({...r.location,search:n.toString()})}),[c,r])]}function g(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,c=m(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=s.find((e=>e.default))??s[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:c}))),[l,u]=p({queryString:s,groupId:r}),[g,x]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,c]=(0,d.Dv)(s);return[r,(0,a.useCallback)((e=>{s&&c.set(e)}),[s,c])]}({groupId:r}),j=(()=>{const e=l??g;return h({value:e,tabValues:c})?e:null})();(0,t.A)((()=>{j&&i(j)}),[j]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),x(e)}),[u,x,c]),tabValues:c}}var x=s(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=s(74848);function f(e){let{className:n,block:s,selectedValue:a,selectValue:o,tabValues:t}=e;const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,c.a_)(),d=e=>{const n=e.currentTarget,s=i.indexOf(n),r=t[s].value;r!==a&&(l(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=i.indexOf(e.currentTarget)+1;n=i[s]??i[0];break}case"ArrowLeft":{const s=i.indexOf(e.currentTarget)-1;n=i[s]??i[i.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:t.map((e=>{let{value:n,label:s,attributes:c}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>i.push(e),onKeyDown:u,onClick:d,...c,className:(0,r.A)("tabs__item",j.tabItem,c?.className,{"tabs__item--active":a===n}),children:s??n},n)}))})}function S(e){let{lazy:n,children:s,selectedValue:c}=e;const o=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===c));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==c})))})}function b(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,v.jsx)(f,{...n,...e}),(0,v.jsx)(S,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,v.jsx)(b,{...e,children:u(e.children)},String(n))}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var a=s(96540);const r={},c=a.createContext(r);function o(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);