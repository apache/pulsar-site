"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[9102],{7872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"functions-state","title":"Pulsar Functions State Storage (Developer Preview)","description":"Since Pulsar 2.1.0 release, Pulsar integrates with Apache BookKeeper table service","source":"@site/versioned_docs/version-2.4.0/functions-state.md","sourceDirName":".","slug":"/functions-state","permalink":"/docs/2.4.0/functions-state","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.4.0/functions-state.md","tags":[],"version":"2.4.0","frontMatter":{"id":"functions-state","title":"Pulsar Functions State Storage (Developer Preview)","sidebar_label":"State Storage","original_id":"functions-state"},"sidebar":"docsSidebar","previous":{"title":"Processing guarantees","permalink":"/docs/2.4.0/functions-guarantees"},"next":{"title":"Metrics","permalink":"/docs/2.4.0/functions-metrics"}}');var r=t(74848),s=t(28453);const i={id:"functions-state",title:"Pulsar Functions State Storage (Developer Preview)",sidebar_label:"State Storage",original_id:"functions-state"},o=void 0,c={},l=[{value:"API",id:"api",level:2},{value:"Java API",id:"java-api",level:3},{value:"incrCounter",id:"incrcounter",level:4},{value:"incrCounterAsync",id:"incrcounterasync",level:4},{value:"getCounter",id:"getcounter",level:4},{value:"getCounterAsync",id:"getcounterasync",level:4},{value:"putState",id:"putstate",level:4},{value:"putStateAsync",id:"putstateasync",level:4},{value:"getState",id:"getstate",level:4},{value:"getStateAsync",id:"getstateasync",level:4},{value:"Python API",id:"python-api",level:3},{value:"Query State",id:"query-state",level:2},{value:"Example",id:"example",level:2},{value:"Java Example",id:"java-example",level:3},{value:"Python Example",id:"python-example",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Since Pulsar 2.1.0 release, Pulsar integrates with Apache BookKeeper ",(0,r.jsx)(n.a,{href:"https://docs.google.com/document/d/155xAwWv5IdOitHh1NVMEwCMGgB28M3FyMiQSxEpjE-Y/edit#heading=h.56rbh52koe3f",children:"table service"}),"\nfor storing the ",(0,r.jsx)(n.code,{children:"State"})," for functions. For example, A ",(0,r.jsx)(n.code,{children:"WordCount"})," function can store its ",(0,r.jsx)(n.code,{children:"counters"})," state into BookKeeper's table service via Pulsar Functions ",(0,r.jsx)(n.a,{href:"#api",children:"State API"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.h3,{id:"java-api",children:"Java API"}),"\n",(0,r.jsxs)(n.p,{children:["Currently Pulsar Functions expose following APIs for mutating and accessing State. These APIs are available in the ",(0,r.jsx)(n.a,{href:"/docs/2.4.0/functions-api#context",children:"Context"})," object when\nyou are using ",(0,r.jsx)(n.a,{href:"/docs/2.4.0/functions-api#java-sdk-functions",children:"Java SDK"})," functions."]}),"\n",(0,r.jsx)(n.h4,{id:"incrcounter",children:"incrCounter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    /**\n     * Increment the builtin distributed counter referred by key\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    void incrCounter(String key, long amount);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"incrCounter"})," to change the counter of a given ",(0,r.jsx)(n.code,{children:"key"})," by the given ",(0,r.jsx)(n.code,{children:"amount"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"incrcounterasync",children:"incrCounterAsync"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n     /**\n     * Increment the builtin distributed counter referred by key\n     * but dont wait for the completion of the increment operation\n     *\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    CompletableFuture<Void> incrCounterAsync(String key, long amount);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"incrCounterAsync"})," to asynchronously change the counter of a given ",(0,r.jsx)(n.code,{children:"key"})," by the given ",(0,r.jsx)(n.code,{children:"amount"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"getcounter",children:"getCounter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    /**\n     * Retrieve the counter value for the key.\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    long getCounter(String key);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"getCounter"})," to retrieve the counter of a given ",(0,r.jsx)(n.code,{children:"key"})," mutated by ",(0,r.jsx)(n.code,{children:"incrCounter"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Besides the ",(0,r.jsx)(n.code,{children:"counter"})," API, Pulsar also exposes a general key/value API for functions to store\ngeneral key/value state."]}),"\n",(0,r.jsx)(n.h4,{id:"getcounterasync",children:"getCounterAsync"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n     /**\n     * Retrieve the counter value for the key, but don't wait\n     * for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    CompletableFuture<Long> getCounterAsync(String key);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"getCounterAsync"})," to asynchronously retrieve the counter of a given ",(0,r.jsx)(n.code,{children:"key"})," mutated by ",(0,r.jsx)(n.code,{children:"incrCounterAsync"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"putstate",children:"putState"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    /**\n     * Update the state value for the key.\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    void putState(String key, ByteBuffer value);\n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"putstateasync",children:"putStateAsync"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    /**\n     * Update the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    CompletableFuture<Void> putStateAsync(String key, ByteBuffer value);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"putStateAsync"})," to asynchronously update the state of a given ",(0,r.jsx)(n.code,{children:"key"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"getstate",children:"getState"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\n    /**\n     * Retrieve the state value for the key.\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    ByteBuffer getState(String key);\n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"getstateasync",children:"getStateAsync"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    /**\n     * Retrieve the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    CompletableFuture<ByteBuffer> getStateAsync(String key);\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The application can use ",(0,r.jsx)(n.code,{children:"getStateAsync"})," to asynchronously retrieve the state of a given ",(0,r.jsx)(n.code,{children:"key"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"python-api",children:"Python API"}),"\n",(0,r.jsxs)(n.p,{children:["State currently is not supported at ",(0,r.jsx)(n.a,{href:"/docs/2.4.0/functions-api#python-sdk-functions",children:"Python SDK"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"query-state",children:"Query State"}),"\n",(0,r.jsxs)(n.p,{children:["A Pulsar Function can use the ",(0,r.jsx)(n.a,{href:"#api",children:"State API"})," for storing state into Pulsar's state storage\nand retrieving state back from Pulsar's state storage. Additionally Pulsar also provides\nCLI commands for querying its state."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"\n$ bin/pulsar-admin functions querystate \\\n    --tenant <tenant> \\\n    --namespace <namespace> \\\n    --name <function-name> \\\n    --state-storage-url <bookkeeper-service-url> \\\n    --key <state-key> \\\n    [---watch]\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"--watch"})," is specified, the CLI will watch the value of the provided ",(0,r.jsx)(n.code,{children:"state-key"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.h3,{id:"java-example",children:"Java Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/apache/pulsar/tree/master//pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/WordCountFunction.java",children:"WordCountFunction"})," is a very good example\ndemonstrating on how Application can easily store ",(0,r.jsx)(n.code,{children:"state"})," in Pulsar Functions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\npublic class WordCountFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context context) throws Exception {\n        Arrays.asList(input.split("\\\\.")).forEach(word -> context.incrCounter(word, 1));\n        return null;\n    }\n}\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The logic of this ",(0,r.jsx)(n.code,{children:"WordCount"})," function is pretty simple and straightforward:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The function first splits the received ",(0,r.jsx)(n.code,{children:"String"})," into multiple words using regex ",(0,r.jsx)(n.code,{children:"\\\\."}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["For each ",(0,r.jsx)(n.code,{children:"word"}),", the function increments the corresponding ",(0,r.jsx)(n.code,{children:"counter"})," by 1 (via ",(0,r.jsx)(n.code,{children:"incrCounter(key, amount)"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"python-example",children:"Python Example"}),"\n",(0,r.jsxs)(n.p,{children:["State currently is not supported at ",(0,r.jsx)(n.a,{href:"/docs/2.4.0/functions-api#python-sdk-functions",children:"Python SDK"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);